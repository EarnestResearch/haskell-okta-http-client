{-
   Okta API

   Allows customers to easily access the Okta API

   OpenAPI Version: 3.0.1
   Okta API API version: 1.3.0
   Contact: devex-public@okta.com
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : Okta.API.Group
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module Okta.API.Group where

import Okta.Core
import Okta.MimeTypes
import Okta.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** Group

-- *** activateRule

-- | @POST \/api\/v1\/groups\/rules\/{ruleId}\/lifecycle\/activate@
-- 
-- Activate a group Rule
-- 
-- Activates a specific group rule by id from your organization
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
activateRule 
  :: RuleId -- ^ "ruleId"
  -> OktaRequest ActivateRule MimeNoContent NoContent MimeNoContent
activateRule (RuleId ruleId) =
  _mkRequest "POST" ["/api/v1/groups/rules/",toPath ruleId,"/lifecycle/activate"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data ActivateRule  
instance Produces ActivateRule MimeNoContent


-- *** addUserToGroup

-- | @PUT \/api\/v1\/groups\/{groupId}\/users\/{userId}@
-- 
-- Add User to Group
-- 
-- Adds a [user](users.html#user-model) to a group with `OKTA_GROUP` type.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
addUserToGroup 
  :: GroupId -- ^ "groupId"
  -> UserId -- ^ "userId"
  -> OktaRequest AddUserToGroup MimeNoContent NoContent MimeNoContent
addUserToGroup (GroupId groupId) (UserId userId) =
  _mkRequest "PUT" ["/api/v1/groups/",toPath groupId,"/users/",toPath userId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data AddUserToGroup  
instance Produces AddUserToGroup MimeNoContent


-- *** createGroup

-- | @POST \/api\/v1\/groups@
-- 
-- Add Group
-- 
-- Adds a new group with `OKTA_GROUP` type to your organization.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
createGroup 
  :: (Consumes CreateGroup MimeJSON, MimeRender MimeJSON Group)
  => Group -- ^ "group"
  -> OktaRequest CreateGroup MimeJSON Group MimeJSON
createGroup group =
  _mkRequest "POST" ["/api/v1/groups"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` group

data CreateGroup 
instance HasBodyParam CreateGroup Group 

-- | @application/json@
instance Consumes CreateGroup MimeJSON

-- | @application/json@
instance Produces CreateGroup MimeJSON


-- *** createRule

-- | @POST \/api\/v1\/groups\/rules@
-- 
-- Create Group Rule
-- 
-- Creates a group rule to dynamically add users to the specified group if they match the condition
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
createRule 
  :: (Consumes CreateRule MimeJSON, MimeRender MimeJSON GroupRule)
  => GroupRule -- ^ "groupRule"
  -> OktaRequest CreateRule MimeJSON GroupRule MimeJSON
createRule groupRule =
  _mkRequest "POST" ["/api/v1/groups/rules"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` groupRule

data CreateRule 
instance HasBodyParam CreateRule GroupRule 

-- | @application/json@
instance Consumes CreateRule MimeJSON

-- | @application/json@
instance Produces CreateRule MimeJSON


-- *** deactivateRule

-- | @POST \/api\/v1\/groups\/rules\/{ruleId}\/lifecycle\/deactivate@
-- 
-- Deactivate a group Rule
-- 
-- Deactivates a specific group rule by id from your organization
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
deactivateRule 
  :: RuleId -- ^ "ruleId"
  -> OktaRequest DeactivateRule MimeNoContent NoContent MimeNoContent
deactivateRule (RuleId ruleId) =
  _mkRequest "POST" ["/api/v1/groups/rules/",toPath ruleId,"/lifecycle/deactivate"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data DeactivateRule  
instance Produces DeactivateRule MimeNoContent


-- *** deleteGroup

-- | @DELETE \/api\/v1\/groups\/{groupId}@
-- 
-- Remove Group
-- 
-- Removes a group with `OKTA_GROUP` type from your organization.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
deleteGroup 
  :: GroupId -- ^ "groupId"
  -> OktaRequest DeleteGroup MimeNoContent NoContent MimeNoContent
deleteGroup (GroupId groupId) =
  _mkRequest "DELETE" ["/api/v1/groups/",toPath groupId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data DeleteGroup  
instance Produces DeleteGroup MimeNoContent


-- *** deleteRule

-- | @DELETE \/api\/v1\/groups\/rules\/{ruleId}@
-- 
-- Delete a group Rule
-- 
-- Removes a specific group rule by id from your organization
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
deleteRule 
  :: RuleId -- ^ "ruleId"
  -> OktaRequest DeleteRule MimeNoContent NoContent MimeNoContent
deleteRule (RuleId ruleId) =
  _mkRequest "DELETE" ["/api/v1/groups/rules/",toPath ruleId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data DeleteRule  
instance HasOptionalParam DeleteRule RemoveUsers where
  applyOptionalParam req (RemoveUsers xs) =
    req `setQuery` toQuery ("removeUsers", Just xs)
instance Produces DeleteRule MimeNoContent


-- *** getGroup

-- | @GET \/api\/v1\/groups\/{groupId}@
-- 
-- List Group Rules
-- 
-- Lists all group rules for your organization.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
getGroup 
  :: GroupId -- ^ "groupId"
  -> OktaRequest GetGroup MimeNoContent Group MimeJSON
getGroup (GroupId groupId) =
  _mkRequest "GET" ["/api/v1/groups/",toPath groupId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data GetGroup  
instance HasOptionalParam GetGroup Expand where
  applyOptionalParam req (Expand xs) =
    req `setQuery` toQuery ("expand", Just xs)
-- | @application/json@
instance Produces GetGroup MimeJSON


-- *** getRule

-- | @GET \/api\/v1\/groups\/rules\/{ruleId}@
-- 
-- Get Group Rule
-- 
-- Fetches a specific group rule by id from your organization
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
getRule 
  :: RuleId -- ^ "ruleId"
  -> OktaRequest GetRule MimeNoContent GroupRule MimeJSON
getRule (RuleId ruleId) =
  _mkRequest "GET" ["/api/v1/groups/rules/",toPath ruleId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data GetRule  
instance HasOptionalParam GetRule Expand where
  applyOptionalParam req (Expand xs) =
    req `setQuery` toQuery ("expand", Just xs)
-- | @application/json@
instance Produces GetRule MimeJSON


-- *** listGroupUsers

-- | @GET \/api\/v1\/groups\/{groupId}\/users@
-- 
-- List Group Members
-- 
-- Enumerates all [users](/docs/api/resources/users.html#user-model) that are a member of a group.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
listGroupUsers 
  :: GroupId -- ^ "groupId"
  -> OktaRequest ListGroupUsers MimeNoContent [User] MimeJSON
listGroupUsers (GroupId groupId) =
  _mkRequest "GET" ["/api/v1/groups/",toPath groupId,"/users"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data ListGroupUsers  

-- | /Optional Param/ "after" - Specifies the pagination cursor for the next page of users
instance HasOptionalParam ListGroupUsers After where
  applyOptionalParam req (After xs) =
    req `setQuery` toQuery ("after", Just xs)

-- | /Optional Param/ "limit" - Specifies the number of user results in a page
instance HasOptionalParam ListGroupUsers Limit where
  applyOptionalParam req (Limit xs) =
    req `setQuery` toQuery ("limit", Just xs)
instance HasOptionalParam ListGroupUsers ManagedBy where
  applyOptionalParam req (ManagedBy xs) =
    req `setQuery` toQuery ("managedBy", Just xs)
-- | @application/json@
instance Produces ListGroupUsers MimeJSON


-- *** listGroups

-- | @GET \/api\/v1\/groups@
-- 
-- List Groups
-- 
-- Enumerates groups in your organization with pagination. A subset of groups can be returned that match a supported filter expression or query.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
listGroups 
  :: OktaRequest ListGroups MimeNoContent [Group] MimeJSON
listGroups =
  _mkRequest "GET" ["/api/v1/groups"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data ListGroups  

-- | /Optional Param/ "q" - Searches the name property of groups for matching value
instance HasOptionalParam ListGroups Q where
  applyOptionalParam req (Q xs) =
    req `setQuery` toQuery ("q", Just xs)

-- | /Optional Param/ "filter" - Filter expression for groups
instance HasOptionalParam ListGroups Filter where
  applyOptionalParam req (Filter xs) =
    req `setQuery` toQuery ("filter", Just xs)

-- | /Optional Param/ "after" - Specifies the pagination cursor for the next page of groups
instance HasOptionalParam ListGroups After where
  applyOptionalParam req (After xs) =
    req `setQuery` toQuery ("after", Just xs)

-- | /Optional Param/ "limit" - Specifies the number of group results in a page
instance HasOptionalParam ListGroups Limit where
  applyOptionalParam req (Limit xs) =
    req `setQuery` toQuery ("limit", Just xs)
instance HasOptionalParam ListGroups Expand where
  applyOptionalParam req (Expand xs) =
    req `setQuery` toQuery ("expand", Just xs)
-- | @application/json@
instance Produces ListGroups MimeJSON


-- *** listRules

-- | @GET \/api\/v1\/groups\/rules@
-- 
-- List Group Rules
-- 
-- Lists all group rules for your organization.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
listRules 
  :: OktaRequest ListRules MimeNoContent [GroupRule] MimeJSON
listRules =
  _mkRequest "GET" ["/api/v1/groups/rules"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data ListRules  

-- | /Optional Param/ "limit" - Specifies the number of rule results in a page
instance HasOptionalParam ListRules Limit where
  applyOptionalParam req (Limit xs) =
    req `setQuery` toQuery ("limit", Just xs)

-- | /Optional Param/ "after" - Specifies the pagination cursor for the next page of rules
instance HasOptionalParam ListRules After where
  applyOptionalParam req (After xs) =
    req `setQuery` toQuery ("after", Just xs)
instance HasOptionalParam ListRules Expand where
  applyOptionalParam req (Expand xs) =
    req `setQuery` toQuery ("expand", Just xs)
-- | @application/json@
instance Produces ListRules MimeJSON


-- *** removeGroupUser

-- | @DELETE \/api\/v1\/groups\/{groupId}\/users\/{userId}@
-- 
-- Remove User from Group
-- 
-- Removes a [user](users.html#user-model) from a group with `OKTA_GROUP` type.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
removeGroupUser 
  :: GroupId -- ^ "groupId"
  -> UserId -- ^ "userId"
  -> OktaRequest RemoveGroupUser MimeNoContent NoContent MimeNoContent
removeGroupUser (GroupId groupId) (UserId userId) =
  _mkRequest "DELETE" ["/api/v1/groups/",toPath groupId,"/users/",toPath userId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data RemoveGroupUser  
instance Produces RemoveGroupUser MimeNoContent


-- *** updateGroup

-- | @PUT \/api\/v1\/groups\/{groupId}@
-- 
-- Update Group
-- 
-- Updates the profile for a group with `OKTA_GROUP` type from your organization.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
updateGroup 
  :: (Consumes UpdateGroup MimeJSON, MimeRender MimeJSON Group)
  => Group -- ^ "group"
  -> GroupId -- ^ "groupId"
  -> OktaRequest UpdateGroup MimeJSON Group MimeJSON
updateGroup group (GroupId groupId) =
  _mkRequest "PUT" ["/api/v1/groups/",toPath groupId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` group

data UpdateGroup 
instance HasBodyParam UpdateGroup Group 

-- | @application/json@
instance Consumes UpdateGroup MimeJSON

-- | @application/json@
instance Produces UpdateGroup MimeJSON


-- *** updateRule

-- | @PUT \/api\/v1\/groups\/rules\/{ruleId}@
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
updateRule 
  :: (Consumes UpdateRule MimeJSON, MimeRender MimeJSON GroupRule)
  => GroupRule -- ^ "groupRule"
  -> RuleId -- ^ "ruleId"
  -> OktaRequest UpdateRule MimeJSON GroupRule MimeJSON
updateRule groupRule (RuleId ruleId) =
  _mkRequest "PUT" ["/api/v1/groups/rules/",toPath ruleId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` groupRule

data UpdateRule 
instance HasBodyParam UpdateRule GroupRule 

-- | @application/json@
instance Consumes UpdateRule MimeJSON

-- | @application/json@
instance Produces UpdateRule MimeJSON

