{-
   Okta API

   Allows customers to easily access the Okta API

   OpenAPI Version: 3.0.1
   Okta API API version: 2.7.1
   Contact: devex-public@okta.com
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : Okta.API.Domain
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module Okta.API.Domain where

import Okta.Core
import Okta.MimeTypes
import Okta.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** Domain

-- *** createCertificate

-- | @PUT \/api\/v1\/domains\/{domainId}\/certificate@
-- 
-- Create Certificate
-- 
-- Creates the Certificate for the Domain.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
createCertificate 
  :: (Consumes CreateCertificate MimeJSON, MimeRender MimeJSON DomainCertificate)
  => DomainCertificate -- ^ "certificate"
  -> DomainId -- ^ "domainId"
  -> OktaRequest CreateCertificate MimeJSON NoContent MimeNoContent
createCertificate certificate (DomainId domainId) =
  _mkRequest "PUT" ["/api/v1/domains/",toPath domainId,"/certificate"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` certificate

data CreateCertificate 
instance HasBodyParam CreateCertificate DomainCertificate 

-- | @application/json@
instance Consumes CreateCertificate MimeJSON

instance Produces CreateCertificate MimeNoContent


-- *** createDomain

-- | @POST \/api\/v1\/domains@
-- 
-- Create Domain
-- 
-- Creates your domain.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
createDomain 
  :: (Consumes CreateDomain MimeJSON, MimeRender MimeJSON Domain)
  => Domain -- ^ "domain"
  -> OktaRequest CreateDomain MimeJSON Domain MimeJSON
createDomain domain =
  _mkRequest "POST" ["/api/v1/domains"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` domain

data CreateDomain 
instance HasBodyParam CreateDomain Domain 

-- | @application/json@
instance Consumes CreateDomain MimeJSON

-- | @application/json@
instance Produces CreateDomain MimeJSON


-- *** deleteDomain

-- | @DELETE \/api\/v1\/domains\/{domainId}@
-- 
-- Delete Domain
-- 
-- Deletes a Domain by `id`.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
deleteDomain 
  :: DomainId -- ^ "domainId"
  -> OktaRequest DeleteDomain MimeNoContent NoContent MimeNoContent
deleteDomain (DomainId domainId) =
  _mkRequest "DELETE" ["/api/v1/domains/",toPath domainId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data DeleteDomain  
instance Produces DeleteDomain MimeNoContent


-- *** getDomain

-- | @GET \/api\/v1\/domains\/{domainId}@
-- 
-- Get Domain
-- 
-- Fetches a Domain by `id`.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
getDomain 
  :: DomainId -- ^ "domainId"
  -> OktaRequest GetDomain MimeNoContent Domain MimeJSON
getDomain (DomainId domainId) =
  _mkRequest "GET" ["/api/v1/domains/",toPath domainId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data GetDomain  
-- | @application/json@
instance Produces GetDomain MimeJSON


-- *** listDomains

-- | @GET \/api\/v1\/domains@
-- 
-- List Domains
-- 
-- List all verified custom Domains for the org.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
listDomains 
  :: OktaRequest ListDomains MimeNoContent DomainListResponse MimeJSON
listDomains =
  _mkRequest "GET" ["/api/v1/domains"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data ListDomains  
-- | @application/json@
instance Produces ListDomains MimeJSON


-- *** verifyDomain

-- | @POST \/api\/v1\/domains\/{domainId}\/verify@
-- 
-- Verify Domain
-- 
-- Verifies the Domain by `id`.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
verifyDomain 
  :: DomainId -- ^ "domainId"
  -> OktaRequest VerifyDomain MimeNoContent Domain MimeJSON
verifyDomain (DomainId domainId) =
  _mkRequest "POST" ["/api/v1/domains/",toPath domainId,"/verify"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data VerifyDomain  
-- | @application/json@
instance Produces VerifyDomain MimeJSON

