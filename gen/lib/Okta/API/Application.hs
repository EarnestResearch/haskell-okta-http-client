{-
   Okta API

   Allows customers to easily access the Okta API

   OpenAPI Version: 3.0.1
   Okta API API version: 1.3.0
   Contact: devex-public@okta.com
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : Okta.API.Application
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module Okta.API.Application where

import Okta.Core
import Okta.MimeTypes
import Okta.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** Application

-- *** activateApplication

-- | @POST \/api\/v1\/apps\/{appId}\/lifecycle\/activate@
-- 
-- Activate Application
-- 
-- Activates an inactive application.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
activateApplication 
  :: AppId -- ^ "appId"
  -> OktaRequest ActivateApplication MimeNoContent NoContent MimeNoContent
activateApplication (AppId appId) =
  _mkRequest "POST" ["/api/v1/apps/",toPath appId,"/lifecycle/activate"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data ActivateApplication  
instance Produces ActivateApplication MimeNoContent


-- *** assignUserToApplication

-- | @POST \/api\/v1\/apps\/{appId}\/users@
-- 
-- Assign User to Application for SSO & Provisioning
-- 
-- Assigns an user to an application with [credentials](#application-user-credentials-object) and an app-specific [profile](#application-user-profile-object). Profile mappings defined for the application are first applied before applying any profile properties specified in the request.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
assignUserToApplication 
  :: (Consumes AssignUserToApplication MimeJSON, MimeRender MimeJSON AppUser)
  => AppUser -- ^ "appUser"
  -> AppId -- ^ "appId"
  -> OktaRequest AssignUserToApplication MimeJSON AppUser MimeJSON
assignUserToApplication appUser (AppId appId) =
  _mkRequest "POST" ["/api/v1/apps/",toPath appId,"/users"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` appUser

data AssignUserToApplication 
instance HasBodyParam AssignUserToApplication AppUser 

-- | @application/json@
instance Consumes AssignUserToApplication MimeJSON

-- | @application/json@
instance Produces AssignUserToApplication MimeJSON


-- *** cloneApplicationKey

-- | @POST \/api\/v1\/apps\/{appId}\/credentials\/keys\/{keyId}\/clone@
-- 
-- Clone Application Key Credential
-- 
-- Clones a X.509 certificate for an application key credential from a source application to target application.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
cloneApplicationKey 
  :: AppId -- ^ "appId"
  -> KeyId -- ^ "keyId"
  -> TargetAid -- ^ "targetAid" -  Unique key of the target Application
  -> OktaRequest CloneApplicationKey MimeNoContent JsonWebKey MimeJSON
cloneApplicationKey (AppId appId) (KeyId keyId) (TargetAid targetAid) =
  _mkRequest "POST" ["/api/v1/apps/",toPath appId,"/credentials/keys/",toPath keyId,"/clone"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("targetAid", Just targetAid)

data CloneApplicationKey  
-- | @application/json@
instance Produces CloneApplicationKey MimeJSON


-- *** createApplication

-- | @POST \/api\/v1\/apps@
-- 
-- Add Application
-- 
-- Adds a new application to your Okta organization.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
createApplication 
  :: (Consumes CreateApplication MimeJSON, MimeRender MimeJSON Application)
  => Application -- ^ "application"
  -> OktaRequest CreateApplication MimeJSON Application MimeJSON
createApplication application =
  _mkRequest "POST" ["/api/v1/apps"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` application

data CreateApplication 
instance HasBodyParam CreateApplication Application 

-- | /Optional Param/ "activate" - Executes activation lifecycle operation when creating the app
instance HasOptionalParam CreateApplication Activate where
  applyOptionalParam req (Activate xs) =
    req `setQuery` toQuery ("activate", Just xs)

-- | @application/json@
instance Consumes CreateApplication MimeJSON

-- | @application/json@
instance Produces CreateApplication MimeJSON


-- *** createApplicationGroupAssignment

-- | @PUT \/api\/v1\/apps\/{appId}\/groups\/{groupId}@
-- 
-- Assign Group to Application
-- 
-- Assigns a group to an application
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
createApplicationGroupAssignment 
  :: (Consumes CreateApplicationGroupAssignment MimeJSON, MimeRender MimeJSON ApplicationGroupAssignment)
  => ApplicationGroupAssignment -- ^ "applicationGroupAssignment"
  -> AppId -- ^ "appId"
  -> GroupId -- ^ "groupId"
  -> OktaRequest CreateApplicationGroupAssignment MimeJSON ApplicationGroupAssignment MimeJSON
createApplicationGroupAssignment applicationGroupAssignment (AppId appId) (GroupId groupId) =
  _mkRequest "PUT" ["/api/v1/apps/",toPath appId,"/groups/",toPath groupId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` applicationGroupAssignment

data CreateApplicationGroupAssignment 
instance HasBodyParam CreateApplicationGroupAssignment ApplicationGroupAssignment 

-- | @application/json@
instance Consumes CreateApplicationGroupAssignment MimeJSON

-- | @application/json@
instance Produces CreateApplicationGroupAssignment MimeJSON


-- *** deactivateApplication

-- | @POST \/api\/v1\/apps\/{appId}\/lifecycle\/deactivate@
-- 
-- Deactivate Application
-- 
-- Deactivates an active application.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
deactivateApplication 
  :: AppId -- ^ "appId"
  -> OktaRequest DeactivateApplication MimeNoContent NoContent MimeNoContent
deactivateApplication (AppId appId) =
  _mkRequest "POST" ["/api/v1/apps/",toPath appId,"/lifecycle/deactivate"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data DeactivateApplication  
instance Produces DeactivateApplication MimeNoContent


-- *** deleteApplication

-- | @DELETE \/api\/v1\/apps\/{appId}@
-- 
-- Delete Application
-- 
-- Removes an inactive application.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
deleteApplication 
  :: AppId -- ^ "appId"
  -> OktaRequest DeleteApplication MimeNoContent NoContent MimeNoContent
deleteApplication (AppId appId) =
  _mkRequest "DELETE" ["/api/v1/apps/",toPath appId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data DeleteApplication  
instance Produces DeleteApplication MimeNoContent


-- *** deleteApplicationGroupAssignment

-- | @DELETE \/api\/v1\/apps\/{appId}\/groups\/{groupId}@
-- 
-- Remove Group from Application
-- 
-- Removes a group assignment from an application.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
deleteApplicationGroupAssignment 
  :: AppId -- ^ "appId"
  -> GroupId -- ^ "groupId"
  -> OktaRequest DeleteApplicationGroupAssignment MimeNoContent NoContent MimeNoContent
deleteApplicationGroupAssignment (AppId appId) (GroupId groupId) =
  _mkRequest "DELETE" ["/api/v1/apps/",toPath appId,"/groups/",toPath groupId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data DeleteApplicationGroupAssignment  
instance Produces DeleteApplicationGroupAssignment MimeNoContent


-- *** deleteApplicationUser

-- | @DELETE \/api\/v1\/apps\/{appId}\/users\/{userId}@
-- 
-- Remove User from Application
-- 
-- Removes an assignment for a user from an application.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
deleteApplicationUser 
  :: AppId -- ^ "appId"
  -> UserId -- ^ "userId"
  -> OktaRequest DeleteApplicationUser MimeNoContent NoContent MimeNoContent
deleteApplicationUser (AppId appId) (UserId userId) =
  _mkRequest "DELETE" ["/api/v1/apps/",toPath appId,"/users/",toPath userId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data DeleteApplicationUser  
instance Produces DeleteApplicationUser MimeNoContent


-- *** getApplication

-- | @GET \/api\/v1\/apps\/{appId}@
-- 
-- Get Application
-- 
-- Fetches an application from your Okta organization by `id`.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
getApplication 
  :: AppId -- ^ "appId"
  -> OktaRequest GetApplication MimeNoContent Application MimeJSON
getApplication (AppId appId) =
  _mkRequest "GET" ["/api/v1/apps/",toPath appId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data GetApplication  
instance HasOptionalParam GetApplication Expand where
  applyOptionalParam req (Expand xs) =
    req `setQuery` toQuery ("expand", Just xs)
-- | @application/json@
instance Produces GetApplication MimeJSON


-- *** getApplicationGroupAssignment

-- | @GET \/api\/v1\/apps\/{appId}\/groups\/{groupId}@
-- 
-- Get Assigned Group for Application
-- 
-- Fetches an application group assignment
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
getApplicationGroupAssignment 
  :: AppId -- ^ "appId"
  -> GroupId -- ^ "groupId"
  -> OktaRequest GetApplicationGroupAssignment MimeNoContent ApplicationGroupAssignment MimeJSON
getApplicationGroupAssignment (AppId appId) (GroupId groupId) =
  _mkRequest "GET" ["/api/v1/apps/",toPath appId,"/groups/",toPath groupId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data GetApplicationGroupAssignment  
instance HasOptionalParam GetApplicationGroupAssignment Expand where
  applyOptionalParam req (Expand xs) =
    req `setQuery` toQuery ("expand", Just xs)
-- | @application/json@
instance Produces GetApplicationGroupAssignment MimeJSON


-- *** getApplicationKey

-- | @GET \/api\/v1\/apps\/{appId}\/credentials\/keys\/{keyId}@
-- 
-- Get Key Credential for Application
-- 
-- Gets a specific [application key credential](#application-key-credential-model) by `kid`
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
getApplicationKey 
  :: AppId -- ^ "appId"
  -> KeyId -- ^ "keyId"
  -> OktaRequest GetApplicationKey MimeNoContent JsonWebKey MimeJSON
getApplicationKey (AppId appId) (KeyId keyId) =
  _mkRequest "GET" ["/api/v1/apps/",toPath appId,"/credentials/keys/",toPath keyId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data GetApplicationKey  
-- | @application/json@
instance Produces GetApplicationKey MimeJSON


-- *** getApplicationUser

-- | @GET \/api\/v1\/apps\/{appId}\/users\/{userId}@
-- 
-- Get Assigned User for Application
-- 
-- Fetches a specific user assignment for application by `id`.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
getApplicationUser 
  :: AppId -- ^ "appId"
  -> UserId -- ^ "userId"
  -> OktaRequest GetApplicationUser MimeNoContent AppUser MimeJSON
getApplicationUser (AppId appId) (UserId userId) =
  _mkRequest "GET" ["/api/v1/apps/",toPath appId,"/users/",toPath userId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data GetApplicationUser  
instance HasOptionalParam GetApplicationUser Expand where
  applyOptionalParam req (Expand xs) =
    req `setQuery` toQuery ("expand", Just xs)
-- | @application/json@
instance Produces GetApplicationUser MimeJSON


-- *** getLogs

-- | @GET \/api\/v1\/logs@
-- 
-- Fetch a list of events from your Okta organization system log.
-- 
-- The Okta System Log API provides read access to your organization’s system log. This API provides more functionality than the Events API
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
getLogs 
  :: OktaRequest GetLogs MimeNoContent [LogEvent] MimeJSON
getLogs =
  _mkRequest "GET" ["/api/v1/logs"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data GetLogs  
instance HasOptionalParam GetLogs Until where
  applyOptionalParam req (Until xs) =
    req `setQuery` toQuery ("until", Just xs)
instance HasOptionalParam GetLogs Since where
  applyOptionalParam req (Since xs) =
    req `setQuery` toQuery ("since", Just xs)
instance HasOptionalParam GetLogs Filter where
  applyOptionalParam req (Filter xs) =
    req `setQuery` toQuery ("filter", Just xs)
instance HasOptionalParam GetLogs Q where
  applyOptionalParam req (Q xs) =
    req `setQuery` toQuery ("q", Just xs)
instance HasOptionalParam GetLogs Limit where
  applyOptionalParam req (Limit xs) =
    req `setQuery` toQuery ("limit", Just xs)
instance HasOptionalParam GetLogs SortOrder where
  applyOptionalParam req (SortOrder xs) =
    req `setQuery` toQuery ("sortOrder", Just xs)
instance HasOptionalParam GetLogs After where
  applyOptionalParam req (After xs) =
    req `setQuery` toQuery ("after", Just xs)
-- | @application/json@
instance Produces GetLogs MimeJSON


-- *** listApplicationGroupAssignments

-- | @GET \/api\/v1\/apps\/{appId}\/groups@
-- 
-- List Groups Assigned to Application
-- 
-- Enumerates group assignments for an application.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
listApplicationGroupAssignments 
  :: AppId -- ^ "appId"
  -> OktaRequest ListApplicationGroupAssignments MimeNoContent [ApplicationGroupAssignment] MimeJSON
listApplicationGroupAssignments (AppId appId) =
  _mkRequest "GET" ["/api/v1/apps/",toPath appId,"/groups"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data ListApplicationGroupAssignments  
instance HasOptionalParam ListApplicationGroupAssignments Q where
  applyOptionalParam req (Q xs) =
    req `setQuery` toQuery ("q", Just xs)

-- | /Optional Param/ "after" - Specifies the pagination cursor for the next page of assignments
instance HasOptionalParam ListApplicationGroupAssignments After where
  applyOptionalParam req (After xs) =
    req `setQuery` toQuery ("after", Just xs)

-- | /Optional Param/ "limit" - Specifies the number of results for a page
instance HasOptionalParam ListApplicationGroupAssignments Limit where
  applyOptionalParam req (Limit xs) =
    req `setQuery` toQuery ("limit", Just xs)
instance HasOptionalParam ListApplicationGroupAssignments Expand where
  applyOptionalParam req (Expand xs) =
    req `setQuery` toQuery ("expand", Just xs)
-- | @application/json@
instance Produces ListApplicationGroupAssignments MimeJSON


-- *** listApplicationKeys

-- | @GET \/api\/v1\/apps\/{appId}\/credentials\/keys@
-- 
-- List Key Credentials for Application
-- 
-- Enumerates key credentials for an application
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
listApplicationKeys 
  :: AppId -- ^ "appId"
  -> OktaRequest ListApplicationKeys MimeNoContent [JsonWebKey] MimeJSON
listApplicationKeys (AppId appId) =
  _mkRequest "GET" ["/api/v1/apps/",toPath appId,"/credentials/keys"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data ListApplicationKeys  
-- | @application/json@
instance Produces ListApplicationKeys MimeJSON


-- *** listApplicationUsers

-- | @GET \/api\/v1\/apps\/{appId}\/users@
-- 
-- List Users Assigned to Application
-- 
-- Enumerates all assigned [application users](#application-user-model) for an application.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
listApplicationUsers 
  :: AppId -- ^ "appId"
  -> OktaRequest ListApplicationUsers MimeNoContent [AppUser] MimeJSON
listApplicationUsers (AppId appId) =
  _mkRequest "GET" ["/api/v1/apps/",toPath appId,"/users"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data ListApplicationUsers  
instance HasOptionalParam ListApplicationUsers Q where
  applyOptionalParam req (Q xs) =
    req `setQuery` toQuery ("q", Just xs)
instance HasOptionalParam ListApplicationUsers QueryScope where
  applyOptionalParam req (QueryScope xs) =
    req `setQuery` toQuery ("query_scope", Just xs)

-- | /Optional Param/ "after" - specifies the pagination cursor for the next page of assignments
instance HasOptionalParam ListApplicationUsers After where
  applyOptionalParam req (After xs) =
    req `setQuery` toQuery ("after", Just xs)

-- | /Optional Param/ "limit" - specifies the number of results for a page
instance HasOptionalParam ListApplicationUsers Limit where
  applyOptionalParam req (Limit xs) =
    req `setQuery` toQuery ("limit", Just xs)
instance HasOptionalParam ListApplicationUsers Filter where
  applyOptionalParam req (Filter xs) =
    req `setQuery` toQuery ("filter", Just xs)
instance HasOptionalParam ListApplicationUsers Expand where
  applyOptionalParam req (Expand xs) =
    req `setQuery` toQuery ("expand", Just xs)
-- | @application/json@
instance Produces ListApplicationUsers MimeJSON


-- *** listApplications

-- | @GET \/api\/v1\/apps@
-- 
-- List Applications
-- 
-- Enumerates apps added to your organization with pagination. A subset of apps can be returned that match a supported filter expression or query.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
listApplications 
  :: OktaRequest ListApplications MimeNoContent [Application] MimeJSON
listApplications =
  _mkRequest "GET" ["/api/v1/apps"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data ListApplications  
instance HasOptionalParam ListApplications Q where
  applyOptionalParam req (Q xs) =
    req `setQuery` toQuery ("q", Just xs)

-- | /Optional Param/ "after" - Specifies the pagination cursor for the next page of apps
instance HasOptionalParam ListApplications After where
  applyOptionalParam req (After xs) =
    req `setQuery` toQuery ("after", Just xs)

-- | /Optional Param/ "limit" - Specifies the number of results for a page
instance HasOptionalParam ListApplications Limit where
  applyOptionalParam req (Limit xs) =
    req `setQuery` toQuery ("limit", Just xs)

-- | /Optional Param/ "filter" - Filters apps by status, user.id, group.id or credentials.signing.kid expression
instance HasOptionalParam ListApplications Filter where
  applyOptionalParam req (Filter xs) =
    req `setQuery` toQuery ("filter", Just xs)

-- | /Optional Param/ "expand" - Traverses users link relationship and optionally embeds Application User resource
instance HasOptionalParam ListApplications Expand where
  applyOptionalParam req (Expand xs) =
    req `setQuery` toQuery ("expand", Just xs)
instance HasOptionalParam ListApplications IncludeNonDeleted where
  applyOptionalParam req (IncludeNonDeleted xs) =
    req `setQuery` toQuery ("includeNonDeleted", Just xs)
-- | @application/json@
instance Produces ListApplications MimeJSON


-- *** updateApplication

-- | @PUT \/api\/v1\/apps\/{appId}@
-- 
-- Update Application
-- 
-- Updates an application in your organization.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
updateApplication 
  :: (Consumes UpdateApplication MimeJSON, MimeRender MimeJSON Application)
  => Application -- ^ "application"
  -> AppId -- ^ "appId"
  -> OktaRequest UpdateApplication MimeJSON Application MimeJSON
updateApplication application (AppId appId) =
  _mkRequest "PUT" ["/api/v1/apps/",toPath appId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` application

data UpdateApplication 
instance HasBodyParam UpdateApplication Application 

-- | @application/json@
instance Consumes UpdateApplication MimeJSON

-- | @application/json@
instance Produces UpdateApplication MimeJSON


-- *** updateApplicationUser

-- | @POST \/api\/v1\/apps\/{appId}\/users\/{userId}@
-- 
-- Update Application Profile for Assigned User
-- 
-- Updates a user's profile for an application
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
updateApplicationUser 
  :: (Consumes UpdateApplicationUser MimeJSON, MimeRender MimeJSON AppUser)
  => AppUser -- ^ "appUser"
  -> AppId -- ^ "appId"
  -> UserId -- ^ "userId"
  -> OktaRequest UpdateApplicationUser MimeJSON AppUser MimeJSON
updateApplicationUser appUser (AppId appId) (UserId userId) =
  _mkRequest "POST" ["/api/v1/apps/",toPath appId,"/users/",toPath userId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` appUser

data UpdateApplicationUser 
instance HasBodyParam UpdateApplicationUser AppUser 

-- | @application/json@
instance Consumes UpdateApplicationUser MimeJSON

-- | @application/json@
instance Produces UpdateApplicationUser MimeJSON

