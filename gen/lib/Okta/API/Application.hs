{-
   Okta API

   Allows customers to easily access the Okta API

   OpenAPI Version: 3.0.1
   Okta API API version: 1.0.0
   Contact: devex-public@okta.com
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : Okta.API.Application
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module Okta.API.Application where

import Okta.Core
import Okta.MimeTypes
import Okta.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** Application

-- *** activateApplication

-- | @POST \/api\/v1\/apps\/{appId}\/lifecycle\/activate@
-- 
-- Activate Application
-- 
-- Activates an inactive application.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
activateApplication
  :: AppId -- ^ "appId"
  -> OktaRequest ActivateApplication MimeNoContent NoContent MimeNoContent
activateApplication (AppId appId) =
  _mkRequest "POST" ["/api/v1/apps/",toPath appId,"/lifecycle/activate"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data ActivateApplication  
instance Produces ActivateApplication MimeNoContent


-- *** activateClientSecretForApplication

-- | @POST \/api\/v1\/apps\/{appId}\/credentials\/secrets\/{secretId}\/lifecycle\/activate@
-- 
-- Activate a client secret
-- 
-- Activates a specific client secret by secretId
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
activateClientSecretForApplication
  :: AppId -- ^ "appId"
  -> SecretId -- ^ "secretId"
  -> OktaRequest ActivateClientSecretForApplication MimeNoContent ClientSecret MimeJSON
activateClientSecretForApplication (AppId appId) (SecretId secretId) =
  _mkRequest "POST" ["/api/v1/apps/",toPath appId,"/credentials/secrets/",toPath secretId,"/lifecycle/activate"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data ActivateClientSecretForApplication  
-- | @application/json@
instance Produces ActivateClientSecretForApplication MimeJSON


-- *** activateDefaultProvisioningConnectionForApplication

-- | @POST \/api\/v1\/apps\/{appId}\/connections\/default\/lifecycle\/activate@
-- 
-- Activate default Provisioning Connection for application
-- 
-- Activates the default Provisioning Connection for an application.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
activateDefaultProvisioningConnectionForApplication
  :: AppId -- ^ "appId"
  -> OktaRequest ActivateDefaultProvisioningConnectionForApplication MimeNoContent NoContent MimeNoContent
activateDefaultProvisioningConnectionForApplication (AppId appId) =
  _mkRequest "POST" ["/api/v1/apps/",toPath appId,"/connections/default/lifecycle/activate"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data ActivateDefaultProvisioningConnectionForApplication  
instance Produces ActivateDefaultProvisioningConnectionForApplication MimeNoContent


-- *** apiV1AppsAppIdCredentialsCsrsCsrIdLifecyclePublishPost

-- | @POST \/api\/v1\/apps\/{appId}\/credentials\/csrs\/{csrId}\/lifecycle\/publish@
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
apiV1AppsAppIdCredentialsCsrsCsrIdLifecyclePublishPost
  :: AppId -- ^ "appId"
  -> CsrId -- ^ "csrId"
  -> OktaRequest ApiV1AppsAppIdCredentialsCsrsCsrIdLifecyclePublishPost MimeNoContent JsonWebKey MimeJSON
apiV1AppsAppIdCredentialsCsrsCsrIdLifecyclePublishPost (AppId appId) (CsrId csrId) =
  _mkRequest "POST" ["/api/v1/apps/",toPath appId,"/credentials/csrs/",toPath csrId,"/lifecycle/publish"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data ApiV1AppsAppIdCredentialsCsrsCsrIdLifecyclePublishPost  
-- | @application/json@
instance Produces ApiV1AppsAppIdCredentialsCsrsCsrIdLifecyclePublishPost MimeJSON


-- *** assignUserToApplication

-- | @POST \/api\/v1\/apps\/{appId}\/users@
-- 
-- Assign User to Application for SSO & Provisioning
-- 
-- Assigns an user to an application with [credentials](#application-user-credentials-object) and an app-specific [profile](#application-user-profile-object). Profile mappings defined for the application are first applied before applying any profile properties specified in the request.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
assignUserToApplication
  :: (Consumes AssignUserToApplication MimeJSON, MimeRender MimeJSON AppUser)
  => AppUser -- ^ "appUser"
  -> AppId -- ^ "appId"
  -> OktaRequest AssignUserToApplication MimeJSON AppUser MimeJSON
assignUserToApplication appUser (AppId appId) =
  _mkRequest "POST" ["/api/v1/apps/",toPath appId,"/users"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` appUser

data AssignUserToApplication 
instance HasBodyParam AssignUserToApplication AppUser 

-- | @application/json@
instance Consumes AssignUserToApplication MimeJSON

-- | @application/json@
instance Produces AssignUserToApplication MimeJSON


-- *** cloneApplicationKey

-- | @POST \/api\/v1\/apps\/{appId}\/credentials\/keys\/{keyId}\/clone@
-- 
-- Clone Application Key Credential
-- 
-- Clones a X.509 certificate for an application key credential from a source application to target application.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
cloneApplicationKey
  :: AppId -- ^ "appId"
  -> KeyId -- ^ "keyId"
  -> TargetAid -- ^ "targetAid" -  Unique key of the target Application
  -> OktaRequest CloneApplicationKey MimeNoContent JsonWebKey MimeJSON
cloneApplicationKey (AppId appId) (KeyId keyId) (TargetAid targetAid) =
  _mkRequest "POST" ["/api/v1/apps/",toPath appId,"/credentials/keys/",toPath keyId,"/clone"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `addQuery` toQuery ("targetAid", Just targetAid)

data CloneApplicationKey  
-- | @application/json@
instance Produces CloneApplicationKey MimeJSON


-- *** createApplication

-- | @POST \/api\/v1\/apps@
-- 
-- Add Application
-- 
-- Adds a new application to your Okta organization.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
createApplication
  :: (Consumes CreateApplication MimeJSON, MimeRender MimeJSON Application)
  => Application -- ^ "application"
  -> OktaRequest CreateApplication MimeJSON Application MimeJSON
createApplication application =
  _mkRequest "POST" ["/api/v1/apps"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` application

data CreateApplication 
instance HasBodyParam CreateApplication Application 

-- | /Optional Param/ "activate" - Executes activation lifecycle operation when creating the app
instance HasOptionalParam CreateApplication Activate where
  applyOptionalParam req (Activate xs) =
    req `addQuery` toQuery ("activate", Just xs)
instance HasOptionalParam CreateApplication OktaAccessGatewayAgent where
  applyOptionalParam req (OktaAccessGatewayAgent xs) =
    req `addHeader` toHeader ("OktaAccessGateway-Agent", xs)

-- | @application/json@
instance Consumes CreateApplication MimeJSON

-- | @application/json@
instance Produces CreateApplication MimeJSON


-- *** createApplicationGroupAssignment

-- | @PUT \/api\/v1\/apps\/{appId}\/groups\/{groupId}@
-- 
-- Assign Group to Application
-- 
-- Assigns a group to an application
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
createApplicationGroupAssignment
  :: (Consumes CreateApplicationGroupAssignment MimeJSON)
  => AppId -- ^ "appId"
  -> GroupId -- ^ "groupId"
  -> OktaRequest CreateApplicationGroupAssignment MimeJSON ApplicationGroupAssignment MimeJSON
createApplicationGroupAssignment (AppId appId) (GroupId groupId) =
  _mkRequest "PUT" ["/api/v1/apps/",toPath appId,"/groups/",toPath groupId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data CreateApplicationGroupAssignment 
instance HasBodyParam CreateApplicationGroupAssignment ApplicationGroupAssignment 

-- | @application/json@
instance Consumes CreateApplicationGroupAssignment MimeJSON

-- | @application/json@
instance Produces CreateApplicationGroupAssignment MimeJSON


-- *** createNewClientSecretForApplication

-- | @POST \/api\/v1\/apps\/{appId}\/credentials\/secrets@
-- 
-- Add new client secret
-- 
-- Adds a new secret to the client's collection of secrets.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
createNewClientSecretForApplication
  :: (Consumes CreateNewClientSecretForApplication MimeJSON, MimeRender MimeJSON ClientSecretMetadata)
  => ClientSecretMetadata -- ^ "metadata"
  -> AppId -- ^ "appId"
  -> OktaRequest CreateNewClientSecretForApplication MimeJSON ClientSecret MimeJSON
createNewClientSecretForApplication metadata (AppId appId) =
  _mkRequest "POST" ["/api/v1/apps/",toPath appId,"/credentials/secrets"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` metadata

data CreateNewClientSecretForApplication 
instance HasBodyParam CreateNewClientSecretForApplication ClientSecretMetadata 

-- | @application/json@
instance Consumes CreateNewClientSecretForApplication MimeJSON

-- | @application/json@
instance Produces CreateNewClientSecretForApplication MimeJSON


-- *** deactivateApplication

-- | @POST \/api\/v1\/apps\/{appId}\/lifecycle\/deactivate@
-- 
-- Deactivate Application
-- 
-- Deactivates an active application.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
deactivateApplication
  :: AppId -- ^ "appId"
  -> OktaRequest DeactivateApplication MimeNoContent NoContent MimeNoContent
deactivateApplication (AppId appId) =
  _mkRequest "POST" ["/api/v1/apps/",toPath appId,"/lifecycle/deactivate"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data DeactivateApplication  
instance Produces DeactivateApplication MimeNoContent


-- *** deactivateClientSecretForApplication

-- | @POST \/api\/v1\/apps\/{appId}\/credentials\/secrets\/{secretId}\/lifecycle\/deactivate@
-- 
-- Deactivate a client secret
-- 
-- Deactivates a specific client secret by secretId
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
deactivateClientSecretForApplication
  :: AppId -- ^ "appId"
  -> SecretId -- ^ "secretId"
  -> OktaRequest DeactivateClientSecretForApplication MimeNoContent ClientSecret MimeJSON
deactivateClientSecretForApplication (AppId appId) (SecretId secretId) =
  _mkRequest "POST" ["/api/v1/apps/",toPath appId,"/credentials/secrets/",toPath secretId,"/lifecycle/deactivate"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data DeactivateClientSecretForApplication  
-- | @application/json@
instance Produces DeactivateClientSecretForApplication MimeJSON


-- *** deactivateDefaultProvisioningConnectionForApplication

-- | @POST \/api\/v1\/apps\/{appId}\/connections\/default\/lifecycle\/deactivate@
-- 
-- Deactivate default Provisioning Connection for application
-- 
-- Deactivates the default Provisioning Connection for an application.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
deactivateDefaultProvisioningConnectionForApplication
  :: AppId -- ^ "appId"
  -> OktaRequest DeactivateDefaultProvisioningConnectionForApplication MimeNoContent NoContent MimeNoContent
deactivateDefaultProvisioningConnectionForApplication (AppId appId) =
  _mkRequest "POST" ["/api/v1/apps/",toPath appId,"/connections/default/lifecycle/deactivate"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data DeactivateDefaultProvisioningConnectionForApplication  
instance Produces DeactivateDefaultProvisioningConnectionForApplication MimeNoContent


-- *** deleteApplication

-- | @DELETE \/api\/v1\/apps\/{appId}@
-- 
-- Delete Application
-- 
-- Removes an inactive application.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
deleteApplication
  :: AppId -- ^ "appId"
  -> OktaRequest DeleteApplication MimeNoContent NoContent MimeNoContent
deleteApplication (AppId appId) =
  _mkRequest "DELETE" ["/api/v1/apps/",toPath appId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data DeleteApplication  
instance Produces DeleteApplication MimeNoContent


-- *** deleteApplicationGroupAssignment

-- | @DELETE \/api\/v1\/apps\/{appId}\/groups\/{groupId}@
-- 
-- Remove Group from Application
-- 
-- Removes a group assignment from an application.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
deleteApplicationGroupAssignment
  :: AppId -- ^ "appId"
  -> GroupId -- ^ "groupId"
  -> OktaRequest DeleteApplicationGroupAssignment MimeNoContent NoContent MimeNoContent
deleteApplicationGroupAssignment (AppId appId) (GroupId groupId) =
  _mkRequest "DELETE" ["/api/v1/apps/",toPath appId,"/groups/",toPath groupId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data DeleteApplicationGroupAssignment  
instance Produces DeleteApplicationGroupAssignment MimeNoContent


-- *** deleteApplicationUser

-- | @DELETE \/api\/v1\/apps\/{appId}\/users\/{userId}@
-- 
-- Remove User from Application
-- 
-- Removes an assignment for a user from an application.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
deleteApplicationUser
  :: AppId -- ^ "appId"
  -> UserId -- ^ "userId"
  -> OktaRequest DeleteApplicationUser MimeNoContent NoContent MimeNoContent
deleteApplicationUser (AppId appId) (UserId userId) =
  _mkRequest "DELETE" ["/api/v1/apps/",toPath appId,"/users/",toPath userId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data DeleteApplicationUser  
instance HasOptionalParam DeleteApplicationUser SendEmail where
  applyOptionalParam req (SendEmail xs) =
    req `addQuery` toQuery ("sendEmail", Just xs)
instance Produces DeleteApplicationUser MimeNoContent


-- *** deleteClientSecretForApplication

-- | @DELETE \/api\/v1\/apps\/{appId}\/credentials\/secrets\/{secretId}@
-- 
-- Removes a secret from the client's collection of secrets.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
deleteClientSecretForApplication
  :: AppId -- ^ "appId"
  -> SecretId -- ^ "secretId"
  -> OktaRequest DeleteClientSecretForApplication MimeNoContent NoContent MimeNoContent
deleteClientSecretForApplication (AppId appId) (SecretId secretId) =
  _mkRequest "DELETE" ["/api/v1/apps/",toPath appId,"/credentials/secrets/",toPath secretId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data DeleteClientSecretForApplication  
instance Produces DeleteClientSecretForApplication MimeNoContent


-- *** generateApplicationKey

-- | @POST \/api\/v1\/apps\/{appId}\/credentials\/keys\/generate@
-- 
-- Generates a new X.509 certificate for an application key credential
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
generateApplicationKey
  :: AppId -- ^ "appId"
  -> OktaRequest GenerateApplicationKey MimeNoContent JsonWebKey MimeJSON
generateApplicationKey (AppId appId) =
  _mkRequest "POST" ["/api/v1/apps/",toPath appId,"/credentials/keys/generate"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data GenerateApplicationKey  
instance HasOptionalParam GenerateApplicationKey ValidityYears where
  applyOptionalParam req (ValidityYears xs) =
    req `addQuery` toQuery ("validityYears", Just xs)
-- | @application/json@
instance Produces GenerateApplicationKey MimeJSON


-- *** generateCsrForApplication

-- | @POST \/api\/v1\/apps\/{appId}\/credentials\/csrs@
-- 
-- Generate Certificate Signing Request for Application
-- 
-- Generates a new key pair and returns the Certificate Signing Request for it.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
generateCsrForApplication
  :: (Consumes GenerateCsrForApplication MimeJSON, MimeRender MimeJSON CsrMetadata)
  => CsrMetadata -- ^ "metadata"
  -> AppId -- ^ "appId"
  -> OktaRequest GenerateCsrForApplication MimeJSON Csr MimeJSON
generateCsrForApplication metadata (AppId appId) =
  _mkRequest "POST" ["/api/v1/apps/",toPath appId,"/credentials/csrs"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` metadata

data GenerateCsrForApplication 
instance HasBodyParam GenerateCsrForApplication CsrMetadata 

-- | @application/json@
instance Consumes GenerateCsrForApplication MimeJSON

-- | @application/json@
instance Produces GenerateCsrForApplication MimeJSON


-- *** getApplication

-- | @GET \/api\/v1\/apps\/{appId}@
-- 
-- Get Application
-- 
-- Fetches an application from your Okta organization by `id`.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
getApplication
  :: AppId -- ^ "appId"
  -> OktaRequest GetApplication MimeNoContent Application MimeJSON
getApplication (AppId appId) =
  _mkRequest "GET" ["/api/v1/apps/",toPath appId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data GetApplication  
instance HasOptionalParam GetApplication Expand where
  applyOptionalParam req (Expand xs) =
    req `addQuery` toQuery ("expand", Just xs)
-- | @application/json@
instance Produces GetApplication MimeJSON


-- *** getApplicationGroupAssignment

-- | @GET \/api\/v1\/apps\/{appId}\/groups\/{groupId}@
-- 
-- Get Assigned Group for Application
-- 
-- Fetches an application group assignment
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
getApplicationGroupAssignment
  :: AppId -- ^ "appId"
  -> GroupId -- ^ "groupId"
  -> OktaRequest GetApplicationGroupAssignment MimeNoContent ApplicationGroupAssignment MimeJSON
getApplicationGroupAssignment (AppId appId) (GroupId groupId) =
  _mkRequest "GET" ["/api/v1/apps/",toPath appId,"/groups/",toPath groupId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data GetApplicationGroupAssignment  
instance HasOptionalParam GetApplicationGroupAssignment Expand where
  applyOptionalParam req (Expand xs) =
    req `addQuery` toQuery ("expand", Just xs)
-- | @application/json@
instance Produces GetApplicationGroupAssignment MimeJSON


-- *** getApplicationKey

-- | @GET \/api\/v1\/apps\/{appId}\/credentials\/keys\/{keyId}@
-- 
-- Get Key Credential for Application
-- 
-- Gets a specific application key credential by kid
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
getApplicationKey
  :: AppId -- ^ "appId"
  -> KeyId -- ^ "keyId"
  -> OktaRequest GetApplicationKey MimeNoContent JsonWebKey MimeJSON
getApplicationKey (AppId appId) (KeyId keyId) =
  _mkRequest "GET" ["/api/v1/apps/",toPath appId,"/credentials/keys/",toPath keyId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data GetApplicationKey  
-- | @application/json@
instance Produces GetApplicationKey MimeJSON


-- *** getApplicationUser

-- | @GET \/api\/v1\/apps\/{appId}\/users\/{userId}@
-- 
-- Get Assigned User for Application
-- 
-- Fetches a specific user assignment for application by `id`.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
getApplicationUser
  :: AppId -- ^ "appId"
  -> UserId -- ^ "userId"
  -> OktaRequest GetApplicationUser MimeNoContent AppUser MimeJSON
getApplicationUser (AppId appId) (UserId userId) =
  _mkRequest "GET" ["/api/v1/apps/",toPath appId,"/users/",toPath userId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data GetApplicationUser  
instance HasOptionalParam GetApplicationUser Expand where
  applyOptionalParam req (Expand xs) =
    req `addQuery` toQuery ("expand", Just xs)
-- | @application/json@
instance Produces GetApplicationUser MimeJSON


-- *** getClientSecretForApplication

-- | @GET \/api\/v1\/apps\/{appId}\/credentials\/secrets\/{secretId}@
-- 
-- Get client secret
-- 
-- Gets a specific client secret by secretId
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
getClientSecretForApplication
  :: AppId -- ^ "appId"
  -> SecretId -- ^ "secretId"
  -> OktaRequest GetClientSecretForApplication MimeNoContent ClientSecret MimeJSON
getClientSecretForApplication (AppId appId) (SecretId secretId) =
  _mkRequest "GET" ["/api/v1/apps/",toPath appId,"/credentials/secrets/",toPath secretId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data GetClientSecretForApplication  
-- | @application/json@
instance Produces GetClientSecretForApplication MimeJSON


-- *** getCsrForApplication

-- | @GET \/api\/v1\/apps\/{appId}\/credentials\/csrs\/{csrId}@
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
getCsrForApplication
  :: AppId -- ^ "appId"
  -> CsrId -- ^ "csrId"
  -> OktaRequest GetCsrForApplication MimeNoContent Csr MimeJSON
getCsrForApplication (AppId appId) (CsrId csrId) =
  _mkRequest "GET" ["/api/v1/apps/",toPath appId,"/credentials/csrs/",toPath csrId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data GetCsrForApplication  
-- | @application/json@
instance Produces GetCsrForApplication MimeJSON


-- *** getDefaultProvisioningConnectionForApplication

-- | @GET \/api\/v1\/apps\/{appId}\/connections\/default@
-- 
-- Fetches the default Provisioning Connection for an application.
-- 
-- Get default Provisioning Connection for application
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
getDefaultProvisioningConnectionForApplication
  :: AppId -- ^ "appId"
  -> OktaRequest GetDefaultProvisioningConnectionForApplication MimeNoContent ProvisioningConnection MimeJSON
getDefaultProvisioningConnectionForApplication (AppId appId) =
  _mkRequest "GET" ["/api/v1/apps/",toPath appId,"/connections/default"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data GetDefaultProvisioningConnectionForApplication  
-- | @application/json@
instance Produces GetDefaultProvisioningConnectionForApplication MimeJSON


-- *** getFeatureForApplication

-- | @GET \/api\/v1\/apps\/{appId}\/features\/{name}@
-- 
-- Fetches a Feature object for an application.
-- 
-- Fetches a Feature object for an application.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
getFeatureForApplication
  :: AppId -- ^ "appId"
  -> Name -- ^ "name"
  -> OktaRequest GetFeatureForApplication MimeNoContent ApplicationFeature MimeJSON
getFeatureForApplication (AppId appId) (Name name) =
  _mkRequest "GET" ["/api/v1/apps/",toPath appId,"/features/",toPath name]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data GetFeatureForApplication  
-- | @application/json@
instance Produces GetFeatureForApplication MimeJSON


-- *** getOAuth2TokenForApplication

-- | @GET \/api\/v1\/apps\/{appId}\/tokens\/{tokenId}@
-- 
-- Gets a token for the specified application
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
getOAuth2TokenForApplication
  :: AppId -- ^ "appId"
  -> TokenId -- ^ "tokenId"
  -> OktaRequest GetOAuth2TokenForApplication MimeNoContent OAuth2Token MimeJSON
getOAuth2TokenForApplication (AppId appId) (TokenId tokenId) =
  _mkRequest "GET" ["/api/v1/apps/",toPath appId,"/tokens/",toPath tokenId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data GetOAuth2TokenForApplication  
instance HasOptionalParam GetOAuth2TokenForApplication Expand where
  applyOptionalParam req (Expand xs) =
    req `addQuery` toQuery ("expand", Just xs)
-- | @application/json@
instance Produces GetOAuth2TokenForApplication MimeJSON


-- *** getScopeConsentGrant

-- | @GET \/api\/v1\/apps\/{appId}\/grants\/{grantId}@
-- 
-- Fetches a single scope consent grant for the application
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
getScopeConsentGrant
  :: AppId -- ^ "appId"
  -> GrantId -- ^ "grantId"
  -> OktaRequest GetScopeConsentGrant MimeNoContent OAuth2ScopeConsentGrant MimeJSON
getScopeConsentGrant (AppId appId) (GrantId grantId) =
  _mkRequest "GET" ["/api/v1/apps/",toPath appId,"/grants/",toPath grantId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data GetScopeConsentGrant  
instance HasOptionalParam GetScopeConsentGrant Expand where
  applyOptionalParam req (Expand xs) =
    req `addQuery` toQuery ("expand", Just xs)
-- | @application/json@
instance Produces GetScopeConsentGrant MimeJSON


-- *** grantConsentToScope

-- | @POST \/api\/v1\/apps\/{appId}\/grants@
-- 
-- Grants consent for the application to request an OAuth 2.0 Okta scope
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
grantConsentToScope
  :: (Consumes GrantConsentToScope MimeJSON, MimeRender MimeJSON OAuth2ScopeConsentGrant)
  => OAuth2ScopeConsentGrant -- ^ "oAuth2ScopeConsentGrant"
  -> AppId -- ^ "appId"
  -> OktaRequest GrantConsentToScope MimeJSON OAuth2ScopeConsentGrant MimeJSON
grantConsentToScope oAuth2ScopeConsentGrant (AppId appId) =
  _mkRequest "POST" ["/api/v1/apps/",toPath appId,"/grants"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` oAuth2ScopeConsentGrant

data GrantConsentToScope 
instance HasBodyParam GrantConsentToScope OAuth2ScopeConsentGrant 

-- | @application/json@
instance Consumes GrantConsentToScope MimeJSON

-- | @application/json@
instance Produces GrantConsentToScope MimeJSON


-- *** listApplicationGroupAssignments

-- | @GET \/api\/v1\/apps\/{appId}\/groups@
-- 
-- List Groups Assigned to Application
-- 
-- Enumerates group assignments for an application.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
listApplicationGroupAssignments
  :: AppId -- ^ "appId"
  -> OktaRequest ListApplicationGroupAssignments MimeNoContent [ApplicationGroupAssignment] MimeJSON
listApplicationGroupAssignments (AppId appId) =
  _mkRequest "GET" ["/api/v1/apps/",toPath appId,"/groups"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data ListApplicationGroupAssignments  
instance HasOptionalParam ListApplicationGroupAssignments Q where
  applyOptionalParam req (Q xs) =
    req `addQuery` toQuery ("q", Just xs)

-- | /Optional Param/ "after" - Specifies the pagination cursor for the next page of assignments
instance HasOptionalParam ListApplicationGroupAssignments After where
  applyOptionalParam req (After xs) =
    req `addQuery` toQuery ("after", Just xs)

-- | /Optional Param/ "limit" - Specifies the number of results for a page
instance HasOptionalParam ListApplicationGroupAssignments Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)
instance HasOptionalParam ListApplicationGroupAssignments Expand where
  applyOptionalParam req (Expand xs) =
    req `addQuery` toQuery ("expand", Just xs)
-- | @application/json@
instance Produces ListApplicationGroupAssignments MimeJSON


-- *** listApplicationKeys

-- | @GET \/api\/v1\/apps\/{appId}\/credentials\/keys@
-- 
-- List Key Credentials for Application
-- 
-- Enumerates key credentials for an application
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
listApplicationKeys
  :: AppId -- ^ "appId"
  -> OktaRequest ListApplicationKeys MimeNoContent [JsonWebKey] MimeJSON
listApplicationKeys (AppId appId) =
  _mkRequest "GET" ["/api/v1/apps/",toPath appId,"/credentials/keys"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data ListApplicationKeys  
-- | @application/json@
instance Produces ListApplicationKeys MimeJSON


-- *** listApplicationUsers

-- | @GET \/api\/v1\/apps\/{appId}\/users@
-- 
-- List Users Assigned to Application
-- 
-- Enumerates all assigned [application users](#application-user-model) for an application.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
listApplicationUsers
  :: AppId -- ^ "appId"
  -> OktaRequest ListApplicationUsers MimeNoContent [AppUser] MimeJSON
listApplicationUsers (AppId appId) =
  _mkRequest "GET" ["/api/v1/apps/",toPath appId,"/users"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data ListApplicationUsers  
instance HasOptionalParam ListApplicationUsers Q where
  applyOptionalParam req (Q xs) =
    req `addQuery` toQuery ("q", Just xs)
instance HasOptionalParam ListApplicationUsers QueryScope where
  applyOptionalParam req (QueryScope xs) =
    req `addQuery` toQuery ("query_scope", Just xs)

-- | /Optional Param/ "after" - specifies the pagination cursor for the next page of assignments
instance HasOptionalParam ListApplicationUsers After where
  applyOptionalParam req (After xs) =
    req `addQuery` toQuery ("after", Just xs)

-- | /Optional Param/ "limit" - specifies the number of results for a page
instance HasOptionalParam ListApplicationUsers Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)
instance HasOptionalParam ListApplicationUsers Filter where
  applyOptionalParam req (Filter xs) =
    req `addQuery` toQuery ("filter", Just xs)
instance HasOptionalParam ListApplicationUsers Expand where
  applyOptionalParam req (Expand xs) =
    req `addQuery` toQuery ("expand", Just xs)
-- | @application/json@
instance Produces ListApplicationUsers MimeJSON


-- *** listApplications

-- | @GET \/api\/v1\/apps@
-- 
-- List Applications
-- 
-- Enumerates apps added to your organization with pagination. A subset of apps can be returned that match a supported filter expression or query.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
listApplications
  :: OktaRequest ListApplications MimeNoContent [Application] MimeJSON
listApplications =
  _mkRequest "GET" ["/api/v1/apps"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data ListApplications  
instance HasOptionalParam ListApplications Q where
  applyOptionalParam req (Q xs) =
    req `addQuery` toQuery ("q", Just xs)

-- | /Optional Param/ "after" - Specifies the pagination cursor for the next page of apps
instance HasOptionalParam ListApplications After where
  applyOptionalParam req (After xs) =
    req `addQuery` toQuery ("after", Just xs)

-- | /Optional Param/ "limit" - Specifies the number of results for a page
instance HasOptionalParam ListApplications Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)

-- | /Optional Param/ "filter" - Filters apps by status, user.id, group.id or credentials.signing.kid expression
instance HasOptionalParam ListApplications Filter where
  applyOptionalParam req (Filter xs) =
    req `addQuery` toQuery ("filter", Just xs)

-- | /Optional Param/ "expand" - Traverses users link relationship and optionally embeds Application User resource
instance HasOptionalParam ListApplications Expand where
  applyOptionalParam req (Expand xs) =
    req `addQuery` toQuery ("expand", Just xs)
instance HasOptionalParam ListApplications IncludeNonDeleted where
  applyOptionalParam req (IncludeNonDeleted xs) =
    req `addQuery` toQuery ("includeNonDeleted", Just xs)
-- | @application/json@
instance Produces ListApplications MimeJSON


-- *** listClientSecretsForApplication

-- | @GET \/api\/v1\/apps\/{appId}\/credentials\/secrets@
-- 
-- List client secrets
-- 
-- Enumerates the client's collection of secrets
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
listClientSecretsForApplication
  :: AppId -- ^ "appId"
  -> OktaRequest ListClientSecretsForApplication MimeNoContent [ClientSecret] MimeJSON
listClientSecretsForApplication (AppId appId) =
  _mkRequest "GET" ["/api/v1/apps/",toPath appId,"/credentials/secrets"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data ListClientSecretsForApplication  
-- | @application/json@
instance Produces ListClientSecretsForApplication MimeJSON


-- *** listCsrsForApplication

-- | @GET \/api\/v1\/apps\/{appId}\/credentials\/csrs@
-- 
-- List Certificate Signing Requests for Application
-- 
-- Enumerates Certificate Signing Requests for an application
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
listCsrsForApplication
  :: AppId -- ^ "appId"
  -> OktaRequest ListCsrsForApplication MimeNoContent [Csr] MimeJSON
listCsrsForApplication (AppId appId) =
  _mkRequest "GET" ["/api/v1/apps/",toPath appId,"/credentials/csrs"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data ListCsrsForApplication  
-- | @application/json@
instance Produces ListCsrsForApplication MimeJSON


-- *** listFeaturesForApplication

-- | @GET \/api\/v1\/apps\/{appId}\/features@
-- 
-- Fetches the Feature objects for an application.
-- 
-- List Features for application
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
listFeaturesForApplication
  :: AppId -- ^ "appId"
  -> OktaRequest ListFeaturesForApplication MimeNoContent [ApplicationFeature] MimeJSON
listFeaturesForApplication (AppId appId) =
  _mkRequest "GET" ["/api/v1/apps/",toPath appId,"/features"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data ListFeaturesForApplication  
-- | @application/json@
instance Produces ListFeaturesForApplication MimeJSON


-- *** listOAuth2TokensForApplication

-- | @GET \/api\/v1\/apps\/{appId}\/tokens@
-- 
-- Lists all tokens for the application
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
listOAuth2TokensForApplication
  :: AppId -- ^ "appId"
  -> OktaRequest ListOAuth2TokensForApplication MimeNoContent [OAuth2Token] MimeJSON
listOAuth2TokensForApplication (AppId appId) =
  _mkRequest "GET" ["/api/v1/apps/",toPath appId,"/tokens"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data ListOAuth2TokensForApplication  
instance HasOptionalParam ListOAuth2TokensForApplication Expand where
  applyOptionalParam req (Expand xs) =
    req `addQuery` toQuery ("expand", Just xs)
instance HasOptionalParam ListOAuth2TokensForApplication After where
  applyOptionalParam req (After xs) =
    req `addQuery` toQuery ("after", Just xs)
instance HasOptionalParam ListOAuth2TokensForApplication Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)
-- | @application/json@
instance Produces ListOAuth2TokensForApplication MimeJSON


-- *** listScopeConsentGrants

-- | @GET \/api\/v1\/apps\/{appId}\/grants@
-- 
-- Lists all scope consent grants for the application
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
listScopeConsentGrants
  :: AppId -- ^ "appId"
  -> OktaRequest ListScopeConsentGrants MimeNoContent [OAuth2ScopeConsentGrant] MimeJSON
listScopeConsentGrants (AppId appId) =
  _mkRequest "GET" ["/api/v1/apps/",toPath appId,"/grants"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data ListScopeConsentGrants  
instance HasOptionalParam ListScopeConsentGrants Expand where
  applyOptionalParam req (Expand xs) =
    req `addQuery` toQuery ("expand", Just xs)
-- | @application/json@
instance Produces ListScopeConsentGrants MimeJSON


-- *** previewSAMLAppMetadata

-- | @GET \/api\/v1\/apps\/{appId}\/sso\/saml\/metadata@
-- 
-- Previews SAML metadata based on a specific key credential for an application
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
previewSAMLAppMetadata
  :: AppId -- ^ "appId"
  -> Kid -- ^ "kid" -  unique key identifier of an Application Key Credential
  -> OktaRequest PreviewSAMLAppMetadata MimeNoContent PreviewSAMLAppMetadata200Response MimeXML
previewSAMLAppMetadata (AppId appId) (Kid kid) =
  _mkRequest "GET" ["/api/v1/apps/",toPath appId,"/sso/saml/metadata"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `addQuery` toQuery ("kid", Just kid)

data PreviewSAMLAppMetadata  
-- | @application/xml@
instance Produces PreviewSAMLAppMetadata MimeXML


-- *** revokeCsrFromApplication

-- | @DELETE \/api\/v1\/apps\/{appId}\/credentials\/csrs\/{csrId}@
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
revokeCsrFromApplication
  :: AppId -- ^ "appId"
  -> CsrId -- ^ "csrId"
  -> OktaRequest RevokeCsrFromApplication MimeNoContent NoContent MimeNoContent
revokeCsrFromApplication (AppId appId) (CsrId csrId) =
  _mkRequest "DELETE" ["/api/v1/apps/",toPath appId,"/credentials/csrs/",toPath csrId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data RevokeCsrFromApplication  
instance Produces RevokeCsrFromApplication MimeNoContent


-- *** revokeOAuth2TokenForApplication

-- | @DELETE \/api\/v1\/apps\/{appId}\/tokens\/{tokenId}@
-- 
-- Revokes the specified token for the specified application
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
revokeOAuth2TokenForApplication
  :: AppId -- ^ "appId"
  -> TokenId -- ^ "tokenId"
  -> OktaRequest RevokeOAuth2TokenForApplication MimeNoContent NoContent MimeNoContent
revokeOAuth2TokenForApplication (AppId appId) (TokenId tokenId) =
  _mkRequest "DELETE" ["/api/v1/apps/",toPath appId,"/tokens/",toPath tokenId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data RevokeOAuth2TokenForApplication  
instance Produces RevokeOAuth2TokenForApplication MimeNoContent


-- *** revokeOAuth2TokensForApplication

-- | @DELETE \/api\/v1\/apps\/{appId}\/tokens@
-- 
-- Revokes all tokens for the specified application
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
revokeOAuth2TokensForApplication
  :: AppId -- ^ "appId"
  -> OktaRequest RevokeOAuth2TokensForApplication MimeNoContent NoContent MimeNoContent
revokeOAuth2TokensForApplication (AppId appId) =
  _mkRequest "DELETE" ["/api/v1/apps/",toPath appId,"/tokens"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data RevokeOAuth2TokensForApplication  
instance Produces RevokeOAuth2TokensForApplication MimeNoContent


-- *** revokeScopeConsentGrant

-- | @DELETE \/api\/v1\/apps\/{appId}\/grants\/{grantId}@
-- 
-- Revokes permission for the application to request the given scope
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
revokeScopeConsentGrant
  :: AppId -- ^ "appId"
  -> GrantId -- ^ "grantId"
  -> OktaRequest RevokeScopeConsentGrant MimeNoContent NoContent MimeNoContent
revokeScopeConsentGrant (AppId appId) (GrantId grantId) =
  _mkRequest "DELETE" ["/api/v1/apps/",toPath appId,"/grants/",toPath grantId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data RevokeScopeConsentGrant  
instance Produces RevokeScopeConsentGrant MimeNoContent


-- *** setDefaultProvisioningConnectionForApplication

-- | @POST \/api\/v1\/apps\/{appId}\/connections\/default@
-- 
-- Sets the default Provisioning Connection for an application.
-- 
-- Set default Provisioning Connection for application
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
setDefaultProvisioningConnectionForApplication
  :: (Consumes SetDefaultProvisioningConnectionForApplication MimeJSON, MimeRender MimeJSON ProvisioningConnectionRequest)
  => ProvisioningConnectionRequest -- ^ "profile"
  -> AppId -- ^ "appId"
  -> OktaRequest SetDefaultProvisioningConnectionForApplication MimeJSON ProvisioningConnection MimeJSON
setDefaultProvisioningConnectionForApplication profile (AppId appId) =
  _mkRequest "POST" ["/api/v1/apps/",toPath appId,"/connections/default"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` profile

data SetDefaultProvisioningConnectionForApplication 
instance HasBodyParam SetDefaultProvisioningConnectionForApplication ProvisioningConnectionRequest 
instance HasOptionalParam SetDefaultProvisioningConnectionForApplication Activate where
  applyOptionalParam req (Activate xs) =
    req `addQuery` toQuery ("activate", Just xs)

-- | @application/json@
instance Consumes SetDefaultProvisioningConnectionForApplication MimeJSON

-- | @application/json@
instance Produces SetDefaultProvisioningConnectionForApplication MimeJSON


-- *** updateApplication

-- | @PUT \/api\/v1\/apps\/{appId}@
-- 
-- Update Application
-- 
-- Updates an application in your organization.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
updateApplication
  :: (Consumes UpdateApplication MimeJSON, MimeRender MimeJSON Application)
  => Application -- ^ "application"
  -> AppId -- ^ "appId"
  -> OktaRequest UpdateApplication MimeJSON Application MimeJSON
updateApplication application (AppId appId) =
  _mkRequest "PUT" ["/api/v1/apps/",toPath appId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` application

data UpdateApplication 
instance HasBodyParam UpdateApplication Application 

-- | @application/json@
instance Consumes UpdateApplication MimeJSON

-- | @application/json@
instance Produces UpdateApplication MimeJSON


-- *** updateApplicationPolicy

-- | @PUT \/api\/v1\/apps\/{appId}\/policies\/{policyId}@
-- 
-- Update application policy
-- 
-- Assign an application to a specific policy. This unassigns the application from its currently assigned policy.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
updateApplicationPolicy
  :: AppId -- ^ "appId"
  -> PolicyId -- ^ "policyId"
  -> OktaRequest UpdateApplicationPolicy MimeNoContent NoContent MimeNoContent
updateApplicationPolicy (AppId appId) (PolicyId policyId) =
  _mkRequest "PUT" ["/api/v1/apps/",toPath appId,"/policies/",toPath policyId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data UpdateApplicationPolicy  
instance Produces UpdateApplicationPolicy MimeNoContent


-- *** updateApplicationUser

-- | @POST \/api\/v1\/apps\/{appId}\/users\/{userId}@
-- 
-- Update Application Profile for Assigned User
-- 
-- Updates a user's profile for an application
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
updateApplicationUser
  :: (Consumes UpdateApplicationUser MimeJSON, MimeRender MimeJSON AppUser)
  => AppUser -- ^ "appUser"
  -> AppId -- ^ "appId"
  -> UserId -- ^ "userId"
  -> OktaRequest UpdateApplicationUser MimeJSON AppUser MimeJSON
updateApplicationUser appUser (AppId appId) (UserId userId) =
  _mkRequest "POST" ["/api/v1/apps/",toPath appId,"/users/",toPath userId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` appUser

data UpdateApplicationUser 
instance HasBodyParam UpdateApplicationUser AppUser 

-- | @application/json@
instance Consumes UpdateApplicationUser MimeJSON

-- | @application/json@
instance Produces UpdateApplicationUser MimeJSON


-- *** updateFeatureForApplication

-- | @PUT \/api\/v1\/apps\/{appId}\/features\/{name}@
-- 
-- Updates a Feature object for an application.
-- 
-- Updates a Feature object for an application.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
updateFeatureForApplication
  :: (Consumes UpdateFeatureForApplication MimeJSON, MimeRender MimeJSON CapabilitiesObject)
  => CapabilitiesObject -- ^ "capabilities"
  -> AppId -- ^ "appId"
  -> Name -- ^ "name"
  -> OktaRequest UpdateFeatureForApplication MimeJSON ApplicationFeature MimeJSON
updateFeatureForApplication capabilities (AppId appId) (Name name) =
  _mkRequest "PUT" ["/api/v1/apps/",toPath appId,"/features/",toPath name]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` capabilities

data UpdateFeatureForApplication 
instance HasBodyParam UpdateFeatureForApplication CapabilitiesObject 

-- | @application/json@
instance Consumes UpdateFeatureForApplication MimeJSON

-- | @application/json@
instance Produces UpdateFeatureForApplication MimeJSON


-- *** uploadApplicationLogo

-- | @POST \/api\/v1\/apps\/{appId}\/logo@
-- 
-- The file must be in PNG, JPG, or GIF format, and less than 1 MB in size. For best results use landscape orientation, a transparent background, and a minimum size of 420px by 120px to prevent upscaling.
-- 
-- Update the logo for an application.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
uploadApplicationLogo
  :: (Consumes UploadApplicationLogo MimeMultipartFormData)
  => File -- ^ "file"
  -> AppId -- ^ "appId"
  -> OktaRequest UploadApplicationLogo MimeMultipartFormData NoContent MimeNoContent
uploadApplicationLogo (File file) (AppId appId) =
  _mkRequest "POST" ["/api/v1/apps/",toPath appId,"/logo"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `_addMultiFormPart` NH.partFileSource "file" file

data UploadApplicationLogo  

-- | @multipart/form-data@
instance Consumes UploadApplicationLogo MimeMultipartFormData

instance Produces UploadApplicationLogo MimeNoContent

