{-
   Okta API

   Allows customers to easily access the Okta API

   OpenAPI Version: 3.0.1
   Okta API API version: 2.7.1
   Contact: devex-public@okta.com
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : Okta.API.UserFactor
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module Okta.API.UserFactor where

import Okta.Core
import Okta.MimeTypes
import Okta.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** UserFactor

-- *** activateFactor

-- | @POST \/api\/v1\/users\/{userId}\/factors\/{factorId}\/lifecycle\/activate@
-- 
-- Activate Factor
-- 
-- The `sms` and `token:software:totp` factor types require activation to complete the enrollment process.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
activateFactor 
  :: (Consumes ActivateFactor MimeJSON)
  => UserId -- ^ "userId"
  -> FactorId -- ^ "factorId"
  -> OktaRequest ActivateFactor MimeJSON UserFactor MimeJSON
activateFactor (UserId userId) (FactorId factorId) =
  _mkRequest "POST" ["/api/v1/users/",toPath userId,"/factors/",toPath factorId,"/lifecycle/activate"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data ActivateFactor 
instance HasBodyParam ActivateFactor ActivateFactorRequest 

-- | @application/json@
instance Consumes ActivateFactor MimeJSON

-- | @application/json@
instance Produces ActivateFactor MimeJSON


-- *** deleteFactor

-- | @DELETE \/api\/v1\/users\/{userId}\/factors\/{factorId}@
-- 
-- Unenrolls an existing factor for the specified user, allowing the user to enroll a new factor.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
deleteFactor 
  :: UserId -- ^ "userId"
  -> FactorId -- ^ "factorId"
  -> OktaRequest DeleteFactor MimeNoContent NoContent MimeNoContent
deleteFactor (UserId userId) (FactorId factorId) =
  _mkRequest "DELETE" ["/api/v1/users/",toPath userId,"/factors/",toPath factorId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data DeleteFactor  
instance Produces DeleteFactor MimeNoContent


-- *** enrollFactor

-- | @POST \/api\/v1\/users\/{userId}\/factors@
-- 
-- Enroll Factor
-- 
-- Enrolls a user with a supported factor.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
enrollFactor 
  :: (Consumes EnrollFactor MimeJSON, MimeRender MimeJSON UserFactor)
  => UserFactor -- ^ "body" -  Factor
  -> UserId -- ^ "userId"
  -> OktaRequest EnrollFactor MimeJSON UserFactor MimeJSON
enrollFactor body (UserId userId) =
  _mkRequest "POST" ["/api/v1/users/",toPath userId,"/factors"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body

data EnrollFactor 

-- | /Body Param/ "body" - Factor
instance HasBodyParam EnrollFactor UserFactor 
instance HasOptionalParam EnrollFactor UpdatePhone where
  applyOptionalParam req (UpdatePhone xs) =
    req `addQuery` toQuery ("updatePhone", Just xs)

-- | /Optional Param/ "templateId" - id of SMS template (only for SMS factor)
instance HasOptionalParam EnrollFactor TemplateId where
  applyOptionalParam req (TemplateId xs) =
    req `addQuery` toQuery ("templateId", Just xs)
instance HasOptionalParam EnrollFactor TokenLifetimeSeconds where
  applyOptionalParam req (TokenLifetimeSeconds xs) =
    req `addQuery` toQuery ("tokenLifetimeSeconds", Just xs)
instance HasOptionalParam EnrollFactor Activate where
  applyOptionalParam req (Activate xs) =
    req `addQuery` toQuery ("activate", Just xs)

-- | @application/json@
instance Consumes EnrollFactor MimeJSON

-- | @application/json@
instance Produces EnrollFactor MimeJSON


-- *** getFactor

-- | @GET \/api\/v1\/users\/{userId}\/factors\/{factorId}@
-- 
-- Fetches a factor for the specified user
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
getFactor 
  :: UserId -- ^ "userId"
  -> FactorId -- ^ "factorId"
  -> OktaRequest GetFactor MimeNoContent UserFactor MimeJSON
getFactor (UserId userId) (FactorId factorId) =
  _mkRequest "GET" ["/api/v1/users/",toPath userId,"/factors/",toPath factorId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data GetFactor  
-- | @application/json@
instance Produces GetFactor MimeJSON


-- *** getFactorTransactionStatus

-- | @GET \/api\/v1\/users\/{userId}\/factors\/{factorId}\/transactions\/{transactionId}@
-- 
-- Polls factors verification transaction for status.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
getFactorTransactionStatus 
  :: UserId -- ^ "userId"
  -> FactorId -- ^ "factorId"
  -> TransactionId -- ^ "transactionId"
  -> OktaRequest GetFactorTransactionStatus MimeNoContent VerifyUserFactorResponse MimeJSON
getFactorTransactionStatus (UserId userId) (FactorId factorId) (TransactionId transactionId) =
  _mkRequest "GET" ["/api/v1/users/",toPath userId,"/factors/",toPath factorId,"/transactions/",toPath transactionId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data GetFactorTransactionStatus  
-- | @application/json@
instance Produces GetFactorTransactionStatus MimeJSON


-- *** listFactors

-- | @GET \/api\/v1\/users\/{userId}\/factors@
-- 
-- Enumerates all the enrolled factors for the specified user
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
listFactors 
  :: UserId -- ^ "userId"
  -> OktaRequest ListFactors MimeNoContent [UserFactor] MimeJSON
listFactors (UserId userId) =
  _mkRequest "GET" ["/api/v1/users/",toPath userId,"/factors"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data ListFactors  
-- | @application/json@
instance Produces ListFactors MimeJSON


-- *** listSupportedFactors

-- | @GET \/api\/v1\/users\/{userId}\/factors\/catalog@
-- 
-- Enumerates all the supported factors that can be enrolled for the specified user
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
listSupportedFactors 
  :: UserId -- ^ "userId"
  -> OktaRequest ListSupportedFactors MimeNoContent [UserFactor] MimeJSON
listSupportedFactors (UserId userId) =
  _mkRequest "GET" ["/api/v1/users/",toPath userId,"/factors/catalog"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data ListSupportedFactors  
-- | @application/json@
instance Produces ListSupportedFactors MimeJSON


-- *** listSupportedSecurityQuestions

-- | @GET \/api\/v1\/users\/{userId}\/factors\/questions@
-- 
-- Enumerates all available security questions for a user's `question` factor
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
listSupportedSecurityQuestions 
  :: UserId -- ^ "userId"
  -> OktaRequest ListSupportedSecurityQuestions MimeNoContent [SecurityQuestion] MimeJSON
listSupportedSecurityQuestions (UserId userId) =
  _mkRequest "GET" ["/api/v1/users/",toPath userId,"/factors/questions"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data ListSupportedSecurityQuestions  
-- | @application/json@
instance Produces ListSupportedSecurityQuestions MimeJSON


-- *** verifyFactor

-- | @POST \/api\/v1\/users\/{userId}\/factors\/{factorId}\/verify@
-- 
-- Verify MFA Factor
-- 
-- Verifies an OTP for a `token` or `token:hardware` factor
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
verifyFactor 
  :: (Consumes VerifyFactor MimeJSON)
  => UserId -- ^ "userId"
  -> FactorId -- ^ "factorId"
  -> OktaRequest VerifyFactor MimeJSON VerifyUserFactorResponse MimeJSON
verifyFactor (UserId userId) (FactorId factorId) =
  _mkRequest "POST" ["/api/v1/users/",toPath userId,"/factors/",toPath factorId,"/verify"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data VerifyFactor 
instance HasBodyParam VerifyFactor VerifyFactorRequest 
instance HasOptionalParam VerifyFactor TemplateId where
  applyOptionalParam req (TemplateId xs) =
    req `addQuery` toQuery ("templateId", Just xs)
instance HasOptionalParam VerifyFactor TokenLifetimeSeconds where
  applyOptionalParam req (TokenLifetimeSeconds xs) =
    req `addQuery` toQuery ("tokenLifetimeSeconds", Just xs)
instance HasOptionalParam VerifyFactor XForwardedFor where
  applyOptionalParam req (XForwardedFor xs) =
    req `addHeader` toHeader ("X-Forwarded-For", xs)
instance HasOptionalParam VerifyFactor UserAgent where
  applyOptionalParam req (UserAgent xs) =
    req `addHeader` toHeader ("User-Agent", xs)
instance HasOptionalParam VerifyFactor AcceptLanguage where
  applyOptionalParam req (AcceptLanguage xs) =
    req `addHeader` toHeader ("Accept-Language", xs)

-- | @application/json@
instance Consumes VerifyFactor MimeJSON

-- | @application/json@
instance Produces VerifyFactor MimeJSON

