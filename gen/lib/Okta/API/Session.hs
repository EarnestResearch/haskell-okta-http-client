{-
   Okta API

   Allows customers to easily access the Okta API

   OpenAPI Version: 3.0.1
   Okta API API version: 1.3.0
   Contact: devex-public@okta.com
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : Okta.API.Session
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module Okta.API.Session where

import Okta.Core
import Okta.MimeTypes
import Okta.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** Session

-- *** createSession

-- | @POST \/api\/v1\/sessions@
-- 
-- Create Session with Session Token
-- 
-- Creates a new session for a user with a valid session token. Use this API if, for example, you want to set the session cookie yourself instead of allowing Okta to set it, or want to hold the session ID in order to delete a session via the API instead of visiting the logout URL.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
createSession 
  :: (Consumes CreateSession MimeJSON, MimeRender MimeJSON CreateSessionRequest)
  => CreateSessionRequest -- ^ "createSessionRequest"
  -> OktaRequest CreateSession MimeJSON Session MimeJSON
createSession createSessionRequest =
  _mkRequest "POST" ["/api/v1/sessions"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` createSessionRequest

data CreateSession 
instance HasBodyParam CreateSession CreateSessionRequest 

-- | @application/json@
instance Consumes CreateSession MimeJSON

-- | @application/json@
instance Produces CreateSession MimeJSON


-- *** endSession

-- | @DELETE \/api\/v1\/sessions\/{sessionId}@
-- 
-- Close Session
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
endSession 
  :: SessionId -- ^ "sessionId"
  -> OktaRequest EndSession MimeNoContent NoContent MimeNoContent
endSession (SessionId sessionId) =
  _mkRequest "DELETE" ["/api/v1/sessions/",toPath sessionId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data EndSession  
instance Produces EndSession MimeNoContent


-- *** getSession

-- | @GET \/api\/v1\/sessions\/{sessionId}@
-- 
-- Get details about a session.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
getSession 
  :: SessionId -- ^ "sessionId"
  -> OktaRequest GetSession MimeNoContent Session MimeJSON
getSession (SessionId sessionId) =
  _mkRequest "GET" ["/api/v1/sessions/",toPath sessionId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data GetSession  
-- | @application/json@
instance Produces GetSession MimeJSON


-- *** refreshSession

-- | @POST \/api\/v1\/sessions\/{sessionId}\/lifecycle\/refresh@
-- 
-- Refresh Session
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
refreshSession 
  :: SessionId -- ^ "sessionId"
  -> OktaRequest RefreshSession MimeNoContent Session MimeJSON
refreshSession (SessionId sessionId) =
  _mkRequest "POST" ["/api/v1/sessions/",toPath sessionId,"/lifecycle/refresh"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data RefreshSession  
-- | @application/json@
instance Produces RefreshSession MimeJSON

