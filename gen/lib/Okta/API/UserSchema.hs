{-
   Okta API

   Allows customers to easily access the Okta API

   OpenAPI Version: 3.0.1
   Okta API API version: 1.0.0
   Contact: devex-public@okta.com
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : Okta.API.UserSchema
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module Okta.API.UserSchema where

import Okta.Core
import Okta.MimeTypes
import Okta.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** UserSchema

-- *** getApplicationUserSchema

-- | @GET \/api\/v1\/meta\/schemas\/apps\/{appInstanceId}\/default@
-- 
-- Fetches the Schema for an App User
-- 
-- Fetches the Schema for an App User
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
getApplicationUserSchema
  :: AppInstanceId -- ^ "appInstanceId"
  -> OktaRequest GetApplicationUserSchema MimeNoContent UserSchema MimeJSON
getApplicationUserSchema (AppInstanceId appInstanceId) =
  _mkRequest "GET" ["/api/v1/meta/schemas/apps/",toPath appInstanceId,"/default"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data GetApplicationUserSchema  
-- | @application/json@
instance Produces GetApplicationUserSchema MimeJSON


-- *** getUserSchema

-- | @GET \/api\/v1\/meta\/schemas\/user\/{schemaId}@
-- 
-- Fetches the schema for a Schema Id.
-- 
-- Fetches the schema for a Schema Id.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
getUserSchema
  :: SchemaId -- ^ "schemaId"
  -> OktaRequest GetUserSchema MimeNoContent UserSchema MimeJSON
getUserSchema (SchemaId schemaId) =
  _mkRequest "GET" ["/api/v1/meta/schemas/user/",toPath schemaId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data GetUserSchema  
-- | @application/json@
instance Produces GetUserSchema MimeJSON


-- *** updateApplicationUserProfile

-- | @POST \/api\/v1\/meta\/schemas\/apps\/{appInstanceId}\/default@
-- 
-- Partial updates on the User Profile properties of the Application User Schema.
-- 
-- Partial updates on the User Profile properties of the Application User Schema.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
updateApplicationUserProfile
  :: (Consumes UpdateApplicationUserProfile MimeJSON)
  => AppInstanceId -- ^ "appInstanceId"
  -> OktaRequest UpdateApplicationUserProfile MimeJSON UserSchema MimeJSON
updateApplicationUserProfile (AppInstanceId appInstanceId) =
  _mkRequest "POST" ["/api/v1/meta/schemas/apps/",toPath appInstanceId,"/default"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data UpdateApplicationUserProfile 
instance HasBodyParam UpdateApplicationUserProfile UserSchema 

-- | @application/json@
instance Consumes UpdateApplicationUserProfile MimeJSON

-- | @application/json@
instance Produces UpdateApplicationUserProfile MimeJSON


-- *** updateUserProfile

-- | @POST \/api\/v1\/meta\/schemas\/user\/{schemaId}@
-- 
-- Partial updates on the User Profile properties of the user schema.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
updateUserProfile
  :: (Consumes UpdateUserProfile MimeJSON, MimeRender MimeJSON UserSchema)
  => UserSchema -- ^ "userSchema"
  -> SchemaId -- ^ "schemaId"
  -> OktaRequest UpdateUserProfile MimeJSON UserSchema MimeJSON
updateUserProfile userSchema (SchemaId schemaId) =
  _mkRequest "POST" ["/api/v1/meta/schemas/user/",toPath schemaId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` userSchema

data UpdateUserProfile 
instance HasBodyParam UpdateUserProfile UserSchema 

-- | @application/json@
instance Consumes UpdateUserProfile MimeJSON

-- | @application/json@
instance Produces UpdateUserProfile MimeJSON

