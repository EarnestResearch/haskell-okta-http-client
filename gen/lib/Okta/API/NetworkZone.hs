{-
   Okta API

   Allows customers to easily access the Okta API

   OpenAPI Version: 3.0.1
   Okta API API version: 1.0.0
   Contact: devex-public@okta.com
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : Okta.API.NetworkZone
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module Okta.API.NetworkZone where

import Okta.Core
import Okta.MimeTypes
import Okta.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** NetworkZone

-- *** activateNetworkZone

-- | @POST \/api\/v1\/zones\/{zoneId}\/lifecycle\/activate@
-- 
-- Activate Network Zone
-- 
-- Activate Network Zone
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
activateNetworkZone
  :: ZoneId -- ^ "zoneId"
  -> OktaRequest ActivateNetworkZone MimeNoContent NetworkZone MimeJSON
activateNetworkZone (ZoneId zoneId) =
  _mkRequest "POST" ["/api/v1/zones/",toPath zoneId,"/lifecycle/activate"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data ActivateNetworkZone  
-- | @application/json@
instance Produces ActivateNetworkZone MimeJSON


-- *** createNetworkZone

-- | @POST \/api\/v1\/zones@
-- 
-- Add Network Zone
-- 
-- Adds a new network zone to your Okta organization.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
createNetworkZone
  :: (Consumes CreateNetworkZone MimeJSON, MimeRender MimeJSON NetworkZone)
  => NetworkZone -- ^ "zone"
  -> OktaRequest CreateNetworkZone MimeJSON NetworkZone MimeJSON
createNetworkZone zone =
  _mkRequest "POST" ["/api/v1/zones"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` zone

data CreateNetworkZone 
instance HasBodyParam CreateNetworkZone NetworkZone 

-- | @application/json@
instance Consumes CreateNetworkZone MimeJSON

-- | @application/json@
instance Produces CreateNetworkZone MimeJSON


-- *** deactivateNetworkZone

-- | @POST \/api\/v1\/zones\/{zoneId}\/lifecycle\/deactivate@
-- 
-- Deactivate Network Zone
-- 
-- Deactivates a network zone.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
deactivateNetworkZone
  :: ZoneId -- ^ "zoneId"
  -> OktaRequest DeactivateNetworkZone MimeNoContent NetworkZone MimeJSON
deactivateNetworkZone (ZoneId zoneId) =
  _mkRequest "POST" ["/api/v1/zones/",toPath zoneId,"/lifecycle/deactivate"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data DeactivateNetworkZone  
-- | @application/json@
instance Produces DeactivateNetworkZone MimeJSON


-- *** deleteNetworkZone

-- | @DELETE \/api\/v1\/zones\/{zoneId}@
-- 
-- Delete Network Zone
-- 
-- Removes network zone.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
deleteNetworkZone
  :: ZoneId -- ^ "zoneId"
  -> OktaRequest DeleteNetworkZone MimeNoContent NoContent MimeNoContent
deleteNetworkZone (ZoneId zoneId) =
  _mkRequest "DELETE" ["/api/v1/zones/",toPath zoneId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data DeleteNetworkZone  
instance Produces DeleteNetworkZone MimeNoContent


-- *** getNetworkZone

-- | @GET \/api\/v1\/zones\/{zoneId}@
-- 
-- Get Network Zone
-- 
-- Fetches a network zone from your Okta organization by `id`.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
getNetworkZone
  :: ZoneId -- ^ "zoneId"
  -> OktaRequest GetNetworkZone MimeNoContent NetworkZone MimeJSON
getNetworkZone (ZoneId zoneId) =
  _mkRequest "GET" ["/api/v1/zones/",toPath zoneId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data GetNetworkZone  
-- | @application/json@
instance Produces GetNetworkZone MimeJSON


-- *** listNetworkZones

-- | @GET \/api\/v1\/zones@
-- 
-- List Network Zones
-- 
-- Enumerates network zones added to your organization with pagination. A subset of zones can be returned that match a supported filter expression or query.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
listNetworkZones
  :: OktaRequest ListNetworkZones MimeNoContent [NetworkZone] MimeJSON
listNetworkZones =
  _mkRequest "GET" ["/api/v1/zones"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data ListNetworkZones  

-- | /Optional Param/ "after" - Specifies the pagination cursor for the next page of network zones
instance HasOptionalParam ListNetworkZones After where
  applyOptionalParam req (After xs) =
    req `addQuery` toQuery ("after", Just xs)

-- | /Optional Param/ "limit" - Specifies the number of results for a page
instance HasOptionalParam ListNetworkZones Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)

-- | /Optional Param/ "filter" - Filters zones by usage or id expression
instance HasOptionalParam ListNetworkZones Filter where
  applyOptionalParam req (Filter xs) =
    req `addQuery` toQuery ("filter", Just xs)
-- | @application/json@
instance Produces ListNetworkZones MimeJSON


-- *** updateNetworkZone

-- | @PUT \/api\/v1\/zones\/{zoneId}@
-- 
-- Update Network Zone
-- 
-- Updates a network zone in your organization.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
updateNetworkZone
  :: (Consumes UpdateNetworkZone MimeJSON, MimeRender MimeJSON NetworkZone)
  => NetworkZone -- ^ "zone"
  -> ZoneId -- ^ "zoneId"
  -> OktaRequest UpdateNetworkZone MimeJSON NetworkZone MimeJSON
updateNetworkZone zone (ZoneId zoneId) =
  _mkRequest "PUT" ["/api/v1/zones/",toPath zoneId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` zone

data UpdateNetworkZone 
instance HasBodyParam UpdateNetworkZone NetworkZone 

-- | @application/json@
instance Consumes UpdateNetworkZone MimeJSON

-- | @application/json@
instance Produces UpdateNetworkZone MimeJSON

