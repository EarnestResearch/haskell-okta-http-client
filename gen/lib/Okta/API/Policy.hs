{-
   Okta API

   Allows customers to easily access the Okta API

   OpenAPI Version: 3.0.1
   Okta API API version: 1.0.0
   Contact: devex-public@okta.com
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : Okta.API.Policy
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module Okta.API.Policy where

import Okta.Core
import Okta.MimeTypes
import Okta.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** Policy

-- *** activatePolicy

-- | @POST \/api\/v1\/policies\/{policyId}\/lifecycle\/activate@
-- 
-- Activates a policy.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
activatePolicy
  :: PolicyId -- ^ "policyId"
  -> OktaRequest ActivatePolicy MimeNoContent NoContent MimeNoContent
activatePolicy (PolicyId policyId) =
  _mkRequest "POST" ["/api/v1/policies/",toPath policyId,"/lifecycle/activate"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data ActivatePolicy  
instance Produces ActivatePolicy MimeNoContent


-- *** activatePolicyRule

-- | @POST \/api\/v1\/policies\/{policyId}\/rules\/{ruleId}\/lifecycle\/activate@
-- 
-- Activates a policy rule.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
activatePolicyRule
  :: PolicyId -- ^ "policyId"
  -> RuleId -- ^ "ruleId"
  -> OktaRequest ActivatePolicyRule MimeNoContent NoContent MimeNoContent
activatePolicyRule (PolicyId policyId) (RuleId ruleId) =
  _mkRequest "POST" ["/api/v1/policies/",toPath policyId,"/rules/",toPath ruleId,"/lifecycle/activate"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data ActivatePolicyRule  
instance Produces ActivatePolicyRule MimeNoContent


-- *** createPolicy

-- | @POST \/api\/v1\/policies@
-- 
-- Creates a policy.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
createPolicy
  :: (Consumes CreatePolicy MimeJSON, MimeRender MimeJSON Policy)
  => Policy -- ^ "policy"
  -> OktaRequest CreatePolicy MimeJSON Policy MimeJSON
createPolicy policy =
  _mkRequest "POST" ["/api/v1/policies"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` policy

data CreatePolicy 
instance HasBodyParam CreatePolicy Policy 
instance HasOptionalParam CreatePolicy Activate where
  applyOptionalParam req (Activate xs) =
    req `addQuery` toQuery ("activate", Just xs)

-- | @application/json@
instance Consumes CreatePolicy MimeJSON

-- | @application/json@
instance Produces CreatePolicy MimeJSON


-- *** createPolicyRule

-- | @POST \/api\/v1\/policies\/{policyId}\/rules@
-- 
-- Creates a policy rule.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
createPolicyRule
  :: (Consumes CreatePolicyRule MimeJSON, MimeRender MimeJSON PolicyRule)
  => PolicyRule -- ^ "policyRule"
  -> PolicyId -- ^ "policyId"
  -> OktaRequest CreatePolicyRule MimeJSON PolicyRule MimeJSON
createPolicyRule policyRule (PolicyId policyId) =
  _mkRequest "POST" ["/api/v1/policies/",toPath policyId,"/rules"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` policyRule

data CreatePolicyRule 
instance HasBodyParam CreatePolicyRule PolicyRule 

-- | @application/json@
instance Consumes CreatePolicyRule MimeJSON

-- | @application/json@
instance Produces CreatePolicyRule MimeJSON


-- *** deactivatePolicy

-- | @POST \/api\/v1\/policies\/{policyId}\/lifecycle\/deactivate@
-- 
-- Deactivates a policy.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
deactivatePolicy
  :: PolicyId -- ^ "policyId"
  -> OktaRequest DeactivatePolicy MimeNoContent NoContent MimeNoContent
deactivatePolicy (PolicyId policyId) =
  _mkRequest "POST" ["/api/v1/policies/",toPath policyId,"/lifecycle/deactivate"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data DeactivatePolicy  
instance Produces DeactivatePolicy MimeNoContent


-- *** deactivatePolicyRule

-- | @POST \/api\/v1\/policies\/{policyId}\/rules\/{ruleId}\/lifecycle\/deactivate@
-- 
-- Deactivates a policy rule.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
deactivatePolicyRule
  :: PolicyId -- ^ "policyId"
  -> RuleId -- ^ "ruleId"
  -> OktaRequest DeactivatePolicyRule MimeNoContent NoContent MimeNoContent
deactivatePolicyRule (PolicyId policyId) (RuleId ruleId) =
  _mkRequest "POST" ["/api/v1/policies/",toPath policyId,"/rules/",toPath ruleId,"/lifecycle/deactivate"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data DeactivatePolicyRule  
instance Produces DeactivatePolicyRule MimeNoContent


-- *** deletePolicy

-- | @DELETE \/api\/v1\/policies\/{policyId}@
-- 
-- Removes a policy.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
deletePolicy
  :: PolicyId -- ^ "policyId"
  -> OktaRequest DeletePolicy MimeNoContent NoContent MimeNoContent
deletePolicy (PolicyId policyId) =
  _mkRequest "DELETE" ["/api/v1/policies/",toPath policyId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data DeletePolicy  
instance Produces DeletePolicy MimeNoContent


-- *** deletePolicyRule

-- | @DELETE \/api\/v1\/policies\/{policyId}\/rules\/{ruleId}@
-- 
-- Removes a policy rule.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
deletePolicyRule
  :: PolicyId -- ^ "policyId"
  -> RuleId -- ^ "ruleId"
  -> OktaRequest DeletePolicyRule MimeNoContent NoContent MimeNoContent
deletePolicyRule (PolicyId policyId) (RuleId ruleId) =
  _mkRequest "DELETE" ["/api/v1/policies/",toPath policyId,"/rules/",toPath ruleId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data DeletePolicyRule  
instance Produces DeletePolicyRule MimeNoContent


-- *** getPolicy

-- | @GET \/api\/v1\/policies\/{policyId}@
-- 
-- Gets a policy.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
getPolicy
  :: PolicyId -- ^ "policyId"
  -> OktaRequest GetPolicy MimeNoContent Policy MimeJSON
getPolicy (PolicyId policyId) =
  _mkRequest "GET" ["/api/v1/policies/",toPath policyId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data GetPolicy  
instance HasOptionalParam GetPolicy Expand where
  applyOptionalParam req (Expand xs) =
    req `addQuery` toQuery ("expand", Just xs)
-- | @application/json@
instance Produces GetPolicy MimeJSON


-- *** getPolicyRule

-- | @GET \/api\/v1\/policies\/{policyId}\/rules\/{ruleId}@
-- 
-- Gets a policy rule.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
getPolicyRule
  :: PolicyId -- ^ "policyId"
  -> RuleId -- ^ "ruleId"
  -> OktaRequest GetPolicyRule MimeNoContent PolicyRule MimeJSON
getPolicyRule (PolicyId policyId) (RuleId ruleId) =
  _mkRequest "GET" ["/api/v1/policies/",toPath policyId,"/rules/",toPath ruleId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data GetPolicyRule  
-- | @application/json@
instance Produces GetPolicyRule MimeJSON


-- *** listPolicies

-- | @GET \/api\/v1\/policies@
-- 
-- Gets all policies with the specified type.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
listPolicies
  :: ParamType -- ^ "_type"
  -> OktaRequest ListPolicies MimeNoContent [Policy] MimeJSON
listPolicies (ParamType _type) =
  _mkRequest "GET" ["/api/v1/policies"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `addQuery` toQuery ("type", Just _type)

data ListPolicies  
instance HasOptionalParam ListPolicies Status where
  applyOptionalParam req (Status xs) =
    req `addQuery` toQuery ("status", Just xs)
instance HasOptionalParam ListPolicies Expand where
  applyOptionalParam req (Expand xs) =
    req `addQuery` toQuery ("expand", Just xs)
-- | @application/json@
instance Produces ListPolicies MimeJSON


-- *** listPolicyRules

-- | @GET \/api\/v1\/policies\/{policyId}\/rules@
-- 
-- Enumerates all policy rules.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
listPolicyRules
  :: PolicyId -- ^ "policyId"
  -> OktaRequest ListPolicyRules MimeNoContent [PolicyRule] MimeJSON
listPolicyRules (PolicyId policyId) =
  _mkRequest "GET" ["/api/v1/policies/",toPath policyId,"/rules"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data ListPolicyRules  
-- | @application/json@
instance Produces ListPolicyRules MimeJSON


-- *** updatePolicy

-- | @PUT \/api\/v1\/policies\/{policyId}@
-- 
-- Updates a policy.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
updatePolicy
  :: (Consumes UpdatePolicy MimeJSON, MimeRender MimeJSON Policy)
  => Policy -- ^ "policy"
  -> PolicyId -- ^ "policyId"
  -> OktaRequest UpdatePolicy MimeJSON Policy MimeJSON
updatePolicy policy (PolicyId policyId) =
  _mkRequest "PUT" ["/api/v1/policies/",toPath policyId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` policy

data UpdatePolicy 
instance HasBodyParam UpdatePolicy Policy 

-- | @application/json@
instance Consumes UpdatePolicy MimeJSON

-- | @application/json@
instance Produces UpdatePolicy MimeJSON


-- *** updatePolicyRule

-- | @PUT \/api\/v1\/policies\/{policyId}\/rules\/{ruleId}@
-- 
-- Updates a policy rule.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
updatePolicyRule
  :: (Consumes UpdatePolicyRule MimeJSON, MimeRender MimeJSON PolicyRule)
  => PolicyRule -- ^ "policyRule"
  -> PolicyId -- ^ "policyId"
  -> RuleId -- ^ "ruleId"
  -> OktaRequest UpdatePolicyRule MimeJSON PolicyRule MimeJSON
updatePolicyRule policyRule (PolicyId policyId) (RuleId ruleId) =
  _mkRequest "PUT" ["/api/v1/policies/",toPath policyId,"/rules/",toPath ruleId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` policyRule

data UpdatePolicyRule 
instance HasBodyParam UpdatePolicyRule PolicyRule 

-- | @application/json@
instance Consumes UpdatePolicyRule MimeJSON

-- | @application/json@
instance Produces UpdatePolicyRule MimeJSON

