{-
   Okta API

   Allows customers to easily access the Okta API

   OpenAPI Version: 3.0.1
   Okta API API version: 1.0.0
   Contact: devex-public@okta.com
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : Okta.API.Brand
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module Okta.API.Brand where

import Okta.Core
import Okta.MimeTypes
import Okta.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** Brand

-- *** createEmailTemplateCustomization

-- | @POST \/api\/v1\/brands\/{brandId}\/templates\/email\/{templateName}\/customizations@
-- 
-- Create Email Template Customization
-- 
-- Create an email customization
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
createEmailTemplateCustomization
  :: (Consumes CreateEmailTemplateCustomization MimeJSON, MimeRender MimeJSON EmailTemplateCustomizationRequest)
  => EmailTemplateCustomizationRequest -- ^ "customization"
  -> BrandId -- ^ "brandId"
  -> TemplateName -- ^ "templateName"
  -> OktaRequest CreateEmailTemplateCustomization MimeJSON EmailTemplateCustomization MimeJSON
createEmailTemplateCustomization customization (BrandId brandId) (TemplateName templateName) =
  _mkRequest "POST" ["/api/v1/brands/",toPath brandId,"/templates/email/",toPath templateName,"/customizations"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` customization

data CreateEmailTemplateCustomization 
instance HasBodyParam CreateEmailTemplateCustomization EmailTemplateCustomizationRequest 

-- | @application/json@
instance Consumes CreateEmailTemplateCustomization MimeJSON

-- | @application/json@
instance Produces CreateEmailTemplateCustomization MimeJSON


-- *** deleteBrandThemeBackgroundImage

-- | @DELETE \/api\/v1\/brands\/{brandId}\/themes\/{themeId}\/background-image@
-- 
-- Deletes a Theme background image
-- 
-- Deletes a Theme background image
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
deleteBrandThemeBackgroundImage
  :: BrandId -- ^ "brandId"
  -> ThemeId -- ^ "themeId"
  -> OktaRequest DeleteBrandThemeBackgroundImage MimeNoContent NoContent MimeNoContent
deleteBrandThemeBackgroundImage (BrandId brandId) (ThemeId themeId) =
  _mkRequest "DELETE" ["/api/v1/brands/",toPath brandId,"/themes/",toPath themeId,"/background-image"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data DeleteBrandThemeBackgroundImage  
instance Produces DeleteBrandThemeBackgroundImage MimeNoContent


-- *** deleteBrandThemeFavicon

-- | @DELETE \/api\/v1\/brands\/{brandId}\/themes\/{themeId}\/favicon@
-- 
-- Deletes a Theme favicon. The org then uses the Okta default favicon.
-- 
-- Deletes a Theme favicon. The org then uses the Okta default favicon.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
deleteBrandThemeFavicon
  :: BrandId -- ^ "brandId"
  -> ThemeId -- ^ "themeId"
  -> OktaRequest DeleteBrandThemeFavicon MimeNoContent NoContent MimeNoContent
deleteBrandThemeFavicon (BrandId brandId) (ThemeId themeId) =
  _mkRequest "DELETE" ["/api/v1/brands/",toPath brandId,"/themes/",toPath themeId,"/favicon"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data DeleteBrandThemeFavicon  
instance Produces DeleteBrandThemeFavicon MimeNoContent


-- *** deleteBrandThemeLogo

-- | @DELETE \/api\/v1\/brands\/{brandId}\/themes\/{themeId}\/logo@
-- 
-- Deletes a Theme logo. The org then uses the Okta default logo.
-- 
-- Deletes a Theme logo. The org then uses the Okta default logo.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
deleteBrandThemeLogo
  :: BrandId -- ^ "brandId"
  -> ThemeId -- ^ "themeId"
  -> OktaRequest DeleteBrandThemeLogo MimeNoContent NoContent MimeNoContent
deleteBrandThemeLogo (BrandId brandId) (ThemeId themeId) =
  _mkRequest "DELETE" ["/api/v1/brands/",toPath brandId,"/themes/",toPath themeId,"/logo"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data DeleteBrandThemeLogo  
instance Produces DeleteBrandThemeLogo MimeNoContent


-- *** deleteEmailTemplateCustomization

-- | @DELETE \/api\/v1\/brands\/{brandId}\/templates\/email\/{templateName}\/customizations\/{customizationId}@
-- 
-- Delete Email Customization
-- 
-- Delete an email customization
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
deleteEmailTemplateCustomization
  :: BrandId -- ^ "brandId"
  -> TemplateName -- ^ "templateName"
  -> CustomizationId -- ^ "customizationId"
  -> OktaRequest DeleteEmailTemplateCustomization MimeNoContent NoContent MimeNoContent
deleteEmailTemplateCustomization (BrandId brandId) (TemplateName templateName) (CustomizationId customizationId) =
  _mkRequest "DELETE" ["/api/v1/brands/",toPath brandId,"/templates/email/",toPath templateName,"/customizations/",toPath customizationId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data DeleteEmailTemplateCustomization  
instance Produces DeleteEmailTemplateCustomization MimeNoContent


-- *** deleteEmailTemplateCustomizations

-- | @DELETE \/api\/v1\/brands\/{brandId}\/templates\/email\/{templateName}\/customizations@
-- 
-- Delete Email Template Customization
-- 
-- Delete all customizations for an email template. Also known as “Reset to Default”.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
deleteEmailTemplateCustomizations
  :: BrandId -- ^ "brandId"
  -> TemplateName -- ^ "templateName"
  -> OktaRequest DeleteEmailTemplateCustomizations MimeNoContent NoContent MimeNoContent
deleteEmailTemplateCustomizations (BrandId brandId) (TemplateName templateName) =
  _mkRequest "DELETE" ["/api/v1/brands/",toPath brandId,"/templates/email/",toPath templateName,"/customizations"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data DeleteEmailTemplateCustomizations  
instance Produces DeleteEmailTemplateCustomizations MimeNoContent


-- *** getBrand

-- | @GET \/api\/v1\/brands\/{brandId}@
-- 
-- Get Brand
-- 
-- Fetches a brand by `brandId`
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
getBrand
  :: BrandId -- ^ "brandId"
  -> OktaRequest GetBrand MimeNoContent Brand MimeJSON
getBrand (BrandId brandId) =
  _mkRequest "GET" ["/api/v1/brands/",toPath brandId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data GetBrand  
-- | @application/json@
instance Produces GetBrand MimeJSON


-- *** getBrandTheme

-- | @GET \/api\/v1\/brands\/{brandId}\/themes\/{themeId}@
-- 
-- Get a theme for a brand
-- 
-- Fetches a theme for a brand
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
getBrandTheme
  :: BrandId -- ^ "brandId"
  -> ThemeId -- ^ "themeId"
  -> OktaRequest GetBrandTheme MimeNoContent ThemeResponse MimeJSON
getBrandTheme (BrandId brandId) (ThemeId themeId) =
  _mkRequest "GET" ["/api/v1/brands/",toPath brandId,"/themes/",toPath themeId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data GetBrandTheme  
-- | @application/json@
instance Produces GetBrandTheme MimeJSON


-- *** getEmailTemplate

-- | @GET \/api\/v1\/brands\/{brandId}\/templates\/email\/{templateName}@
-- 
-- Get Email Template
-- 
-- Fetch an email template by templateName
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
getEmailTemplate
  :: BrandId -- ^ "brandId"
  -> TemplateName -- ^ "templateName"
  -> OktaRequest GetEmailTemplate MimeNoContent EmailTemplate MimeJSON
getEmailTemplate (BrandId brandId) (TemplateName templateName) =
  _mkRequest "GET" ["/api/v1/brands/",toPath brandId,"/templates/email/",toPath templateName]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data GetEmailTemplate  
-- | @application/json@
instance Produces GetEmailTemplate MimeJSON


-- *** getEmailTemplateCustomization

-- | @GET \/api\/v1\/brands\/{brandId}\/templates\/email\/{templateName}\/customizations\/{customizationId}@
-- 
-- Get Email Template Customization
-- 
-- Fetch an email customization by id.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
getEmailTemplateCustomization
  :: BrandId -- ^ "brandId"
  -> TemplateName -- ^ "templateName"
  -> CustomizationId -- ^ "customizationId"
  -> OktaRequest GetEmailTemplateCustomization MimeNoContent EmailTemplateCustomization MimeJSON
getEmailTemplateCustomization (BrandId brandId) (TemplateName templateName) (CustomizationId customizationId) =
  _mkRequest "GET" ["/api/v1/brands/",toPath brandId,"/templates/email/",toPath templateName,"/customizations/",toPath customizationId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data GetEmailTemplateCustomization  
-- | @application/json@
instance Produces GetEmailTemplateCustomization MimeJSON


-- *** getEmailTemplateCustomizationPreview

-- | @GET \/api\/v1\/brands\/{brandId}\/templates\/email\/{templateName}\/customizations\/{customizationId}\/preview@
-- 
-- Get Preview Content of Email Customization
-- 
-- Get a preview of an email template customization.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
getEmailTemplateCustomizationPreview
  :: BrandId -- ^ "brandId"
  -> TemplateName -- ^ "templateName"
  -> CustomizationId -- ^ "customizationId"
  -> OktaRequest GetEmailTemplateCustomizationPreview MimeNoContent EmailTemplateContent MimeJSON
getEmailTemplateCustomizationPreview (BrandId brandId) (TemplateName templateName) (CustomizationId customizationId) =
  _mkRequest "GET" ["/api/v1/brands/",toPath brandId,"/templates/email/",toPath templateName,"/customizations/",toPath customizationId,"/preview"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data GetEmailTemplateCustomizationPreview  
-- | @application/json@
instance Produces GetEmailTemplateCustomizationPreview MimeJSON


-- *** getEmailTemplateDefaultContent

-- | @GET \/api\/v1\/brands\/{brandId}\/templates\/email\/{templateName}\/default-content@
-- 
-- Get Default Content of Email Template
-- 
-- Fetch the default content for an email template.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
getEmailTemplateDefaultContent
  :: BrandId -- ^ "brandId"
  -> TemplateName -- ^ "templateName"
  -> OktaRequest GetEmailTemplateDefaultContent MimeNoContent EmailTemplateContent MimeJSON
getEmailTemplateDefaultContent (BrandId brandId) (TemplateName templateName) =
  _mkRequest "GET" ["/api/v1/brands/",toPath brandId,"/templates/email/",toPath templateName,"/default-content"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data GetEmailTemplateDefaultContent  
-- | @application/json@
instance Produces GetEmailTemplateDefaultContent MimeJSON


-- *** getEmailTemplateDefaultContentPreview

-- | @GET \/api\/v1\/brands\/{brandId}\/templates\/email\/{templateName}\/default-content\/preview@
-- 
-- Get Preview of Email Template Default Content
-- 
-- Fetch a preview of an email template's default content by populating velocity references with the current user's environment.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
getEmailTemplateDefaultContentPreview
  :: BrandId -- ^ "brandId"
  -> TemplateName -- ^ "templateName"
  -> OktaRequest GetEmailTemplateDefaultContentPreview MimeNoContent EmailTemplateContent MimeJSON
getEmailTemplateDefaultContentPreview (BrandId brandId) (TemplateName templateName) =
  _mkRequest "GET" ["/api/v1/brands/",toPath brandId,"/templates/email/",toPath templateName,"/default-content/preview"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data GetEmailTemplateDefaultContentPreview  
-- | @application/json@
instance Produces GetEmailTemplateDefaultContentPreview MimeJSON


-- *** listBrandThemes

-- | @GET \/api\/v1\/brands\/{brandId}\/themes@
-- 
-- Get Brand Themes
-- 
-- List all the themes in your brand
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
listBrandThemes
  :: BrandId -- ^ "brandId"
  -> OktaRequest ListBrandThemes MimeNoContent [ThemeResponse] MimeJSON
listBrandThemes (BrandId brandId) =
  _mkRequest "GET" ["/api/v1/brands/",toPath brandId,"/themes"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data ListBrandThemes  
-- | @application/json@
instance Produces ListBrandThemes MimeJSON


-- *** listBrands

-- | @GET \/api\/v1\/brands@
-- 
-- List Brands
-- 
-- List all the brands in your org.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
listBrands
  :: OktaRequest ListBrands MimeNoContent [Brand] MimeJSON
listBrands =
  _mkRequest "GET" ["/api/v1/brands"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data ListBrands  
-- | @application/json@
instance Produces ListBrands MimeJSON


-- *** listEmailTemplateCustomizations

-- | @GET \/api\/v1\/brands\/{brandId}\/templates\/email\/{templateName}\/customizations@
-- 
-- List Email Template Customization
-- 
-- List all email customizations for an email template
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
listEmailTemplateCustomizations
  :: BrandId -- ^ "brandId"
  -> TemplateName -- ^ "templateName"
  -> OktaRequest ListEmailTemplateCustomizations MimeNoContent [EmailTemplateCustomization] MimeJSON
listEmailTemplateCustomizations (BrandId brandId) (TemplateName templateName) =
  _mkRequest "GET" ["/api/v1/brands/",toPath brandId,"/templates/email/",toPath templateName,"/customizations"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data ListEmailTemplateCustomizations  
-- | @application/json@
instance Produces ListEmailTemplateCustomizations MimeJSON


-- *** listEmailTemplates

-- | @GET \/api\/v1\/brands\/{brandId}\/templates\/email@
-- 
-- List Email Templates
-- 
-- List email templates in your organization with pagination.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
listEmailTemplates
  :: BrandId -- ^ "brandId"
  -> OktaRequest ListEmailTemplates MimeNoContent [EmailTemplate] MimeJSON
listEmailTemplates (BrandId brandId) =
  _mkRequest "GET" ["/api/v1/brands/",toPath brandId,"/templates/email"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data ListEmailTemplates  

-- | /Optional Param/ "after" - Specifies the pagination cursor for the next page of email templates.
instance HasOptionalParam ListEmailTemplates After where
  applyOptionalParam req (After xs) =
    req `addQuery` toQuery ("after", Just xs)

-- | /Optional Param/ "limit" - Specifies the number of results returned (maximum 200)
instance HasOptionalParam ListEmailTemplates Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)
-- | @application/json@
instance Produces ListEmailTemplates MimeJSON


-- *** sendTestEmail

-- | @POST \/api\/v1\/brands\/{brandId}\/templates\/email\/{templateName}\/test@
-- 
-- Get Preview of Email Template Default Content
-- 
-- Send a test email to the current users primary and secondary email addresses. The email content is selected based on the following priority: An email customization specifically for the users locale. The default language of email customizations. The email templates default content.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
sendTestEmail
  :: (Consumes SendTestEmail MimeJSON, MimeRender MimeJSON EmailTemplateTestRequest)
  => EmailTemplateTestRequest -- ^ "customization"
  -> BrandId -- ^ "brandId"
  -> TemplateName -- ^ "templateName"
  -> OktaRequest SendTestEmail MimeJSON NoContent MimeNoContent
sendTestEmail customization (BrandId brandId) (TemplateName templateName) =
  _mkRequest "POST" ["/api/v1/brands/",toPath brandId,"/templates/email/",toPath templateName,"/test"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` customization

data SendTestEmail 
instance HasBodyParam SendTestEmail EmailTemplateTestRequest 

-- | @application/json@
instance Consumes SendTestEmail MimeJSON

instance Produces SendTestEmail MimeNoContent


-- *** updateBrand

-- | @PUT \/api\/v1\/brands\/{brandId}@
-- 
-- Update Brand
-- 
-- Updates a brand by `brandId`
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
updateBrand
  :: (Consumes UpdateBrand MimeJSON, MimeRender MimeJSON Brand)
  => Brand -- ^ "brand"
  -> BrandId -- ^ "brandId"
  -> OktaRequest UpdateBrand MimeJSON Brand MimeJSON
updateBrand brand (BrandId brandId) =
  _mkRequest "PUT" ["/api/v1/brands/",toPath brandId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` brand

data UpdateBrand 
instance HasBodyParam UpdateBrand Brand 

-- | @application/json@
instance Consumes UpdateBrand MimeJSON

-- | @application/json@
instance Produces UpdateBrand MimeJSON


-- *** updateBrandTheme

-- | @PUT \/api\/v1\/brands\/{brandId}\/themes\/{themeId}@
-- 
-- Update a theme for a brand
-- 
-- Updates a theme for a brand
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
updateBrandTheme
  :: (Consumes UpdateBrandTheme MimeJSON, MimeRender MimeJSON Theme)
  => Theme -- ^ "theme"
  -> BrandId -- ^ "brandId"
  -> ThemeId -- ^ "themeId"
  -> OktaRequest UpdateBrandTheme MimeJSON ThemeResponse MimeJSON
updateBrandTheme theme (BrandId brandId) (ThemeId themeId) =
  _mkRequest "PUT" ["/api/v1/brands/",toPath brandId,"/themes/",toPath themeId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` theme

data UpdateBrandTheme 
instance HasBodyParam UpdateBrandTheme Theme 

-- | @application/json@
instance Consumes UpdateBrandTheme MimeJSON

-- | @application/json@
instance Produces UpdateBrandTheme MimeJSON


-- *** updateEmailTemplateCustomization

-- | @PUT \/api\/v1\/brands\/{brandId}\/templates\/email\/{templateName}\/customizations\/{customizationId}@
-- 
-- Update Email Customization
-- 
-- Update an email customization
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
updateEmailTemplateCustomization
  :: (Consumes UpdateEmailTemplateCustomization MimeJSON, MimeRender MimeJSON EmailTemplateCustomizationRequest)
  => EmailTemplateCustomizationRequest -- ^ "customization"
  -> BrandId -- ^ "brandId"
  -> TemplateName -- ^ "templateName"
  -> CustomizationId -- ^ "customizationId"
  -> OktaRequest UpdateEmailTemplateCustomization MimeJSON EmailTemplateCustomization MimeJSON
updateEmailTemplateCustomization customization (BrandId brandId) (TemplateName templateName) (CustomizationId customizationId) =
  _mkRequest "PUT" ["/api/v1/brands/",toPath brandId,"/templates/email/",toPath templateName,"/customizations/",toPath customizationId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` customization

data UpdateEmailTemplateCustomization 
instance HasBodyParam UpdateEmailTemplateCustomization EmailTemplateCustomizationRequest 

-- | @application/json@
instance Consumes UpdateEmailTemplateCustomization MimeJSON

-- | @application/json@
instance Produces UpdateEmailTemplateCustomization MimeJSON


-- *** uploadBrandThemeBackgroundImage

-- | @POST \/api\/v1\/brands\/{brandId}\/themes\/{themeId}\/background-image@
-- 
-- Updates the background image for your Theme
-- 
-- Updates the background image for your Theme
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
uploadBrandThemeBackgroundImage
  :: (Consumes UploadBrandThemeBackgroundImage MimeMultipartFormData)
  => File -- ^ "file"
  -> BrandId -- ^ "brandId"
  -> ThemeId -- ^ "themeId"
  -> OktaRequest UploadBrandThemeBackgroundImage MimeMultipartFormData ImageUploadResponse MimeJSON
uploadBrandThemeBackgroundImage (File file) (BrandId brandId) (ThemeId themeId) =
  _mkRequest "POST" ["/api/v1/brands/",toPath brandId,"/themes/",toPath themeId,"/background-image"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `_addMultiFormPart` NH.partFileSource "file" file

data UploadBrandThemeBackgroundImage  

-- | @multipart/form-data@
instance Consumes UploadBrandThemeBackgroundImage MimeMultipartFormData

-- | @application/json@
instance Produces UploadBrandThemeBackgroundImage MimeJSON


-- *** uploadBrandThemeFavicon

-- | @POST \/api\/v1\/brands\/{brandId}\/themes\/{themeId}\/favicon@
-- 
-- Updates the favicon for your theme
-- 
-- Updates the favicon for your theme
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
uploadBrandThemeFavicon
  :: (Consumes UploadBrandThemeFavicon MimeMultipartFormData)
  => File -- ^ "file"
  -> BrandId -- ^ "brandId"
  -> ThemeId -- ^ "themeId"
  -> OktaRequest UploadBrandThemeFavicon MimeMultipartFormData ImageUploadResponse MimeJSON
uploadBrandThemeFavicon (File file) (BrandId brandId) (ThemeId themeId) =
  _mkRequest "POST" ["/api/v1/brands/",toPath brandId,"/themes/",toPath themeId,"/favicon"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `_addMultiFormPart` NH.partFileSource "file" file

data UploadBrandThemeFavicon  

-- | @multipart/form-data@
instance Consumes UploadBrandThemeFavicon MimeMultipartFormData

-- | @application/json@
instance Produces UploadBrandThemeFavicon MimeJSON


-- *** uploadBrandThemeLogo

-- | @POST \/api\/v1\/brands\/{brandId}\/themes\/{themeId}\/logo@
-- 
-- Update a themes logo
-- 
-- Updates the logo for your Theme
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
uploadBrandThemeLogo
  :: (Consumes UploadBrandThemeLogo MimeMultipartFormData)
  => File -- ^ "file"
  -> BrandId -- ^ "brandId"
  -> ThemeId -- ^ "themeId"
  -> OktaRequest UploadBrandThemeLogo MimeMultipartFormData ImageUploadResponse MimeJSON
uploadBrandThemeLogo (File file) (BrandId brandId) (ThemeId themeId) =
  _mkRequest "POST" ["/api/v1/brands/",toPath brandId,"/themes/",toPath themeId,"/logo"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `_addMultiFormPart` NH.partFileSource "file" file

data UploadBrandThemeLogo  

-- | @multipart/form-data@
instance Consumes UploadBrandThemeLogo MimeMultipartFormData

-- | @application/json@
instance Produces UploadBrandThemeLogo MimeJSON

