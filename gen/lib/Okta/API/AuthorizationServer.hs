{-
   Okta API

   Allows customers to easily access the Okta API

   OpenAPI Version: 3.0.1
   Okta API API version: 1.0.0
   Contact: devex-public@okta.com
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : Okta.API.AuthorizationServer
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module Okta.API.AuthorizationServer where

import Okta.Core
import Okta.MimeTypes
import Okta.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** AuthorizationServer

-- *** activateAuthorizationServer

-- | @POST \/api\/v1\/authorizationServers\/{authServerId}\/lifecycle\/activate@
-- 
-- Success
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
activateAuthorizationServer
  :: AuthServerId -- ^ "authServerId"
  -> OktaRequest ActivateAuthorizationServer MimeNoContent NoContent MimeNoContent
activateAuthorizationServer (AuthServerId authServerId) =
  _mkRequest "POST" ["/api/v1/authorizationServers/",toPath authServerId,"/lifecycle/activate"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data ActivateAuthorizationServer  
instance Produces ActivateAuthorizationServer MimeNoContent


-- *** activateAuthorizationServerPolicy

-- | @POST \/api\/v1\/authorizationServers\/{authServerId}\/policies\/{policyId}\/lifecycle\/activate@
-- 
-- Activate Authorization Server Policy
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
activateAuthorizationServerPolicy
  :: AuthServerId -- ^ "authServerId"
  -> PolicyId -- ^ "policyId"
  -> OktaRequest ActivateAuthorizationServerPolicy MimeNoContent NoContent MimeNoContent
activateAuthorizationServerPolicy (AuthServerId authServerId) (PolicyId policyId) =
  _mkRequest "POST" ["/api/v1/authorizationServers/",toPath authServerId,"/policies/",toPath policyId,"/lifecycle/activate"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data ActivateAuthorizationServerPolicy  
instance Produces ActivateAuthorizationServerPolicy MimeNoContent


-- *** activateAuthorizationServerPolicyRule

-- | @POST \/api\/v1\/authorizationServers\/{authServerId}\/policies\/{policyId}\/rules\/{ruleId}\/lifecycle\/activate@
-- 
-- Activate Authorization Server Policy Rule
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
activateAuthorizationServerPolicyRule
  :: AuthServerId -- ^ "authServerId"
  -> PolicyId -- ^ "policyId"
  -> RuleId -- ^ "ruleId"
  -> OktaRequest ActivateAuthorizationServerPolicyRule MimeNoContent NoContent MimeNoContent
activateAuthorizationServerPolicyRule (AuthServerId authServerId) (PolicyId policyId) (RuleId ruleId) =
  _mkRequest "POST" ["/api/v1/authorizationServers/",toPath authServerId,"/policies/",toPath policyId,"/rules/",toPath ruleId,"/lifecycle/activate"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data ActivateAuthorizationServerPolicyRule  
instance Produces ActivateAuthorizationServerPolicyRule MimeNoContent


-- *** createAuthorizationServer

-- | @POST \/api\/v1\/authorizationServers@
-- 
-- Success
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
createAuthorizationServer
  :: (Consumes CreateAuthorizationServer MimeJSON, MimeRender MimeJSON AuthorizationServer)
  => AuthorizationServer -- ^ "authorizationServer"
  -> OktaRequest CreateAuthorizationServer MimeJSON AuthorizationServer MimeJSON
createAuthorizationServer authorizationServer =
  _mkRequest "POST" ["/api/v1/authorizationServers"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` authorizationServer

data CreateAuthorizationServer 
instance HasBodyParam CreateAuthorizationServer AuthorizationServer 

-- | @application/json@
instance Consumes CreateAuthorizationServer MimeJSON

-- | @application/json@
instance Produces CreateAuthorizationServer MimeJSON


-- *** createAuthorizationServerPolicy

-- | @POST \/api\/v1\/authorizationServers\/{authServerId}\/policies@
-- 
-- Success
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
createAuthorizationServerPolicy
  :: (Consumes CreateAuthorizationServerPolicy MimeJSON, MimeRender MimeJSON AuthorizationServerPolicy)
  => AuthorizationServerPolicy -- ^ "policy"
  -> AuthServerId -- ^ "authServerId"
  -> OktaRequest CreateAuthorizationServerPolicy MimeJSON AuthorizationServerPolicy MimeJSON
createAuthorizationServerPolicy policy (AuthServerId authServerId) =
  _mkRequest "POST" ["/api/v1/authorizationServers/",toPath authServerId,"/policies"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` policy

data CreateAuthorizationServerPolicy 
instance HasBodyParam CreateAuthorizationServerPolicy AuthorizationServerPolicy 

-- | @application/json@
instance Consumes CreateAuthorizationServerPolicy MimeJSON

-- | @application/json@
instance Produces CreateAuthorizationServerPolicy MimeJSON


-- *** createAuthorizationServerPolicyRule

-- | @POST \/api\/v1\/authorizationServers\/{authServerId}\/policies\/{policyId}\/rules@
-- 
-- Creates a policy rule for the specified Custom Authorization Server and Policy.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
createAuthorizationServerPolicyRule
  :: (Consumes CreateAuthorizationServerPolicyRule MimeJSON, MimeRender MimeJSON AuthorizationServerPolicyRule)
  => AuthorizationServerPolicyRule -- ^ "policyRule"
  -> AuthServerId -- ^ "authServerId"
  -> PolicyId -- ^ "policyId"
  -> OktaRequest CreateAuthorizationServerPolicyRule MimeJSON AuthorizationServerPolicyRule MimeJSON
createAuthorizationServerPolicyRule policyRule (AuthServerId authServerId) (PolicyId policyId) =
  _mkRequest "POST" ["/api/v1/authorizationServers/",toPath authServerId,"/policies/",toPath policyId,"/rules"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` policyRule

data CreateAuthorizationServerPolicyRule 
instance HasBodyParam CreateAuthorizationServerPolicyRule AuthorizationServerPolicyRule 

-- | @application/json@
instance Consumes CreateAuthorizationServerPolicyRule MimeJSON

-- | @application/json@
instance Produces CreateAuthorizationServerPolicyRule MimeJSON


-- *** createOAuth2Claim

-- | @POST \/api\/v1\/authorizationServers\/{authServerId}\/claims@
-- 
-- Success
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
createOAuth2Claim
  :: (Consumes CreateOAuth2Claim MimeJSON, MimeRender MimeJSON OAuth2Claim)
  => OAuth2Claim -- ^ "oAuth2Claim"
  -> AuthServerId -- ^ "authServerId"
  -> OktaRequest CreateOAuth2Claim MimeJSON OAuth2Claim MimeJSON
createOAuth2Claim oAuth2Claim (AuthServerId authServerId) =
  _mkRequest "POST" ["/api/v1/authorizationServers/",toPath authServerId,"/claims"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` oAuth2Claim

data CreateOAuth2Claim 
instance HasBodyParam CreateOAuth2Claim OAuth2Claim 

-- | @application/json@
instance Consumes CreateOAuth2Claim MimeJSON

-- | @application/json@
instance Produces CreateOAuth2Claim MimeJSON


-- *** createOAuth2Scope

-- | @POST \/api\/v1\/authorizationServers\/{authServerId}\/scopes@
-- 
-- Success
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
createOAuth2Scope
  :: (Consumes CreateOAuth2Scope MimeJSON, MimeRender MimeJSON OAuth2Scope)
  => OAuth2Scope -- ^ "oAuth2Scope"
  -> AuthServerId -- ^ "authServerId"
  -> OktaRequest CreateOAuth2Scope MimeJSON OAuth2Scope MimeJSON
createOAuth2Scope oAuth2Scope (AuthServerId authServerId) =
  _mkRequest "POST" ["/api/v1/authorizationServers/",toPath authServerId,"/scopes"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` oAuth2Scope

data CreateOAuth2Scope 
instance HasBodyParam CreateOAuth2Scope OAuth2Scope 

-- | @application/json@
instance Consumes CreateOAuth2Scope MimeJSON

-- | @application/json@
instance Produces CreateOAuth2Scope MimeJSON


-- *** deactivateAuthorizationServer

-- | @POST \/api\/v1\/authorizationServers\/{authServerId}\/lifecycle\/deactivate@
-- 
-- Success
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
deactivateAuthorizationServer
  :: AuthServerId -- ^ "authServerId"
  -> OktaRequest DeactivateAuthorizationServer MimeNoContent NoContent MimeNoContent
deactivateAuthorizationServer (AuthServerId authServerId) =
  _mkRequest "POST" ["/api/v1/authorizationServers/",toPath authServerId,"/lifecycle/deactivate"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data DeactivateAuthorizationServer  
instance Produces DeactivateAuthorizationServer MimeNoContent


-- *** deactivateAuthorizationServerPolicy

-- | @POST \/api\/v1\/authorizationServers\/{authServerId}\/policies\/{policyId}\/lifecycle\/deactivate@
-- 
-- Deactivate Authorization Server Policy
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
deactivateAuthorizationServerPolicy
  :: AuthServerId -- ^ "authServerId"
  -> PolicyId -- ^ "policyId"
  -> OktaRequest DeactivateAuthorizationServerPolicy MimeNoContent NoContent MimeNoContent
deactivateAuthorizationServerPolicy (AuthServerId authServerId) (PolicyId policyId) =
  _mkRequest "POST" ["/api/v1/authorizationServers/",toPath authServerId,"/policies/",toPath policyId,"/lifecycle/deactivate"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data DeactivateAuthorizationServerPolicy  
instance Produces DeactivateAuthorizationServerPolicy MimeNoContent


-- *** deactivateAuthorizationServerPolicyRule

-- | @POST \/api\/v1\/authorizationServers\/{authServerId}\/policies\/{policyId}\/rules\/{ruleId}\/lifecycle\/deactivate@
-- 
-- Deactivate Authorization Server Policy Rule
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
deactivateAuthorizationServerPolicyRule
  :: AuthServerId -- ^ "authServerId"
  -> PolicyId -- ^ "policyId"
  -> RuleId -- ^ "ruleId"
  -> OktaRequest DeactivateAuthorizationServerPolicyRule MimeNoContent NoContent MimeNoContent
deactivateAuthorizationServerPolicyRule (AuthServerId authServerId) (PolicyId policyId) (RuleId ruleId) =
  _mkRequest "POST" ["/api/v1/authorizationServers/",toPath authServerId,"/policies/",toPath policyId,"/rules/",toPath ruleId,"/lifecycle/deactivate"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data DeactivateAuthorizationServerPolicyRule  
instance Produces DeactivateAuthorizationServerPolicyRule MimeNoContent


-- *** deleteAuthorizationServer

-- | @DELETE \/api\/v1\/authorizationServers\/{authServerId}@
-- 
-- Success
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
deleteAuthorizationServer
  :: AuthServerId -- ^ "authServerId"
  -> OktaRequest DeleteAuthorizationServer MimeNoContent NoContent MimeNoContent
deleteAuthorizationServer (AuthServerId authServerId) =
  _mkRequest "DELETE" ["/api/v1/authorizationServers/",toPath authServerId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data DeleteAuthorizationServer  
instance Produces DeleteAuthorizationServer MimeNoContent


-- *** deleteAuthorizationServerPolicy

-- | @DELETE \/api\/v1\/authorizationServers\/{authServerId}\/policies\/{policyId}@
-- 
-- Success
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
deleteAuthorizationServerPolicy
  :: AuthServerId -- ^ "authServerId"
  -> PolicyId -- ^ "policyId"
  -> OktaRequest DeleteAuthorizationServerPolicy MimeNoContent NoContent MimeNoContent
deleteAuthorizationServerPolicy (AuthServerId authServerId) (PolicyId policyId) =
  _mkRequest "DELETE" ["/api/v1/authorizationServers/",toPath authServerId,"/policies/",toPath policyId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data DeleteAuthorizationServerPolicy  
instance Produces DeleteAuthorizationServerPolicy MimeNoContent


-- *** deleteAuthorizationServerPolicyRule

-- | @DELETE \/api\/v1\/authorizationServers\/{authServerId}\/policies\/{policyId}\/rules\/{ruleId}@
-- 
-- Deletes a Policy Rule defined in the specified Custom Authorization Server and Policy.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
deleteAuthorizationServerPolicyRule
  :: AuthServerId -- ^ "authServerId"
  -> PolicyId -- ^ "policyId"
  -> RuleId -- ^ "ruleId"
  -> OktaRequest DeleteAuthorizationServerPolicyRule MimeNoContent NoContent MimeNoContent
deleteAuthorizationServerPolicyRule (AuthServerId authServerId) (PolicyId policyId) (RuleId ruleId) =
  _mkRequest "DELETE" ["/api/v1/authorizationServers/",toPath authServerId,"/policies/",toPath policyId,"/rules/",toPath ruleId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data DeleteAuthorizationServerPolicyRule  
instance Produces DeleteAuthorizationServerPolicyRule MimeNoContent


-- *** deleteOAuth2Claim

-- | @DELETE \/api\/v1\/authorizationServers\/{authServerId}\/claims\/{claimId}@
-- 
-- Success
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
deleteOAuth2Claim
  :: AuthServerId -- ^ "authServerId"
  -> ClaimId -- ^ "claimId"
  -> OktaRequest DeleteOAuth2Claim MimeNoContent NoContent MimeNoContent
deleteOAuth2Claim (AuthServerId authServerId) (ClaimId claimId) =
  _mkRequest "DELETE" ["/api/v1/authorizationServers/",toPath authServerId,"/claims/",toPath claimId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data DeleteOAuth2Claim  
instance Produces DeleteOAuth2Claim MimeNoContent


-- *** deleteOAuth2Scope

-- | @DELETE \/api\/v1\/authorizationServers\/{authServerId}\/scopes\/{scopeId}@
-- 
-- Success
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
deleteOAuth2Scope
  :: AuthServerId -- ^ "authServerId"
  -> ScopeId -- ^ "scopeId"
  -> OktaRequest DeleteOAuth2Scope MimeNoContent NoContent MimeNoContent
deleteOAuth2Scope (AuthServerId authServerId) (ScopeId scopeId) =
  _mkRequest "DELETE" ["/api/v1/authorizationServers/",toPath authServerId,"/scopes/",toPath scopeId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data DeleteOAuth2Scope  
instance Produces DeleteOAuth2Scope MimeNoContent


-- *** getAuthorizationServer

-- | @GET \/api\/v1\/authorizationServers\/{authServerId}@
-- 
-- Success
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
getAuthorizationServer
  :: AuthServerId -- ^ "authServerId"
  -> OktaRequest GetAuthorizationServer MimeNoContent AuthorizationServer MimeJSON
getAuthorizationServer (AuthServerId authServerId) =
  _mkRequest "GET" ["/api/v1/authorizationServers/",toPath authServerId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data GetAuthorizationServer  
-- | @application/json@
instance Produces GetAuthorizationServer MimeJSON


-- *** getAuthorizationServerPolicy

-- | @GET \/api\/v1\/authorizationServers\/{authServerId}\/policies\/{policyId}@
-- 
-- Success
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
getAuthorizationServerPolicy
  :: AuthServerId -- ^ "authServerId"
  -> PolicyId -- ^ "policyId"
  -> OktaRequest GetAuthorizationServerPolicy MimeNoContent AuthorizationServerPolicy MimeJSON
getAuthorizationServerPolicy (AuthServerId authServerId) (PolicyId policyId) =
  _mkRequest "GET" ["/api/v1/authorizationServers/",toPath authServerId,"/policies/",toPath policyId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data GetAuthorizationServerPolicy  
-- | @application/json@
instance Produces GetAuthorizationServerPolicy MimeJSON


-- *** getAuthorizationServerPolicyRule

-- | @GET \/api\/v1\/authorizationServers\/{authServerId}\/policies\/{policyId}\/rules\/{ruleId}@
-- 
-- Returns a Policy Rule by ID that is defined in the specified Custom Authorization Server and Policy.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
getAuthorizationServerPolicyRule
  :: AuthServerId -- ^ "authServerId"
  -> PolicyId -- ^ "policyId"
  -> RuleId -- ^ "ruleId"
  -> OktaRequest GetAuthorizationServerPolicyRule MimeNoContent AuthorizationServerPolicyRule MimeJSON
getAuthorizationServerPolicyRule (AuthServerId authServerId) (PolicyId policyId) (RuleId ruleId) =
  _mkRequest "GET" ["/api/v1/authorizationServers/",toPath authServerId,"/policies/",toPath policyId,"/rules/",toPath ruleId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data GetAuthorizationServerPolicyRule  
-- | @application/json@
instance Produces GetAuthorizationServerPolicyRule MimeJSON


-- *** getOAuth2Claim

-- | @GET \/api\/v1\/authorizationServers\/{authServerId}\/claims\/{claimId}@
-- 
-- Success
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
getOAuth2Claim
  :: AuthServerId -- ^ "authServerId"
  -> ClaimId -- ^ "claimId"
  -> OktaRequest GetOAuth2Claim MimeNoContent OAuth2Claim MimeJSON
getOAuth2Claim (AuthServerId authServerId) (ClaimId claimId) =
  _mkRequest "GET" ["/api/v1/authorizationServers/",toPath authServerId,"/claims/",toPath claimId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data GetOAuth2Claim  
-- | @application/json@
instance Produces GetOAuth2Claim MimeJSON


-- *** getOAuth2Scope

-- | @GET \/api\/v1\/authorizationServers\/{authServerId}\/scopes\/{scopeId}@
-- 
-- Success
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
getOAuth2Scope
  :: AuthServerId -- ^ "authServerId"
  -> ScopeId -- ^ "scopeId"
  -> OktaRequest GetOAuth2Scope MimeNoContent OAuth2Scope MimeJSON
getOAuth2Scope (AuthServerId authServerId) (ScopeId scopeId) =
  _mkRequest "GET" ["/api/v1/authorizationServers/",toPath authServerId,"/scopes/",toPath scopeId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data GetOAuth2Scope  
-- | @application/json@
instance Produces GetOAuth2Scope MimeJSON


-- *** getRefreshTokenForAuthorizationServerAndClient

-- | @GET \/api\/v1\/authorizationServers\/{authServerId}\/clients\/{clientId}\/tokens\/{tokenId}@
-- 
-- Success
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
getRefreshTokenForAuthorizationServerAndClient
  :: AuthServerId -- ^ "authServerId"
  -> ClientId -- ^ "clientId"
  -> TokenId -- ^ "tokenId"
  -> OktaRequest GetRefreshTokenForAuthorizationServerAndClient MimeNoContent OAuth2RefreshToken MimeJSON
getRefreshTokenForAuthorizationServerAndClient (AuthServerId authServerId) (ClientId clientId) (TokenId tokenId) =
  _mkRequest "GET" ["/api/v1/authorizationServers/",toPath authServerId,"/clients/",toPath clientId,"/tokens/",toPath tokenId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data GetRefreshTokenForAuthorizationServerAndClient  
instance HasOptionalParam GetRefreshTokenForAuthorizationServerAndClient Expand where
  applyOptionalParam req (Expand xs) =
    req `addQuery` toQuery ("expand", Just xs)
-- | @application/json@
instance Produces GetRefreshTokenForAuthorizationServerAndClient MimeJSON


-- *** listAuthorizationServerKeys

-- | @GET \/api\/v1\/authorizationServers\/{authServerId}\/credentials\/keys@
-- 
-- Success
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
listAuthorizationServerKeys
  :: AuthServerId -- ^ "authServerId"
  -> OktaRequest ListAuthorizationServerKeys MimeNoContent [JsonWebKey] MimeJSON
listAuthorizationServerKeys (AuthServerId authServerId) =
  _mkRequest "GET" ["/api/v1/authorizationServers/",toPath authServerId,"/credentials/keys"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data ListAuthorizationServerKeys  
-- | @application/json@
instance Produces ListAuthorizationServerKeys MimeJSON


-- *** listAuthorizationServerPolicies

-- | @GET \/api\/v1\/authorizationServers\/{authServerId}\/policies@
-- 
-- Success
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
listAuthorizationServerPolicies
  :: AuthServerId -- ^ "authServerId"
  -> OktaRequest ListAuthorizationServerPolicies MimeNoContent [AuthorizationServerPolicy] MimeJSON
listAuthorizationServerPolicies (AuthServerId authServerId) =
  _mkRequest "GET" ["/api/v1/authorizationServers/",toPath authServerId,"/policies"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data ListAuthorizationServerPolicies  
-- | @application/json@
instance Produces ListAuthorizationServerPolicies MimeJSON


-- *** listAuthorizationServerPolicyRules

-- | @GET \/api\/v1\/authorizationServers\/{authServerId}\/policies\/{policyId}\/rules@
-- 
-- Enumerates all policy rules for the specified Custom Authorization Server and Policy.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
listAuthorizationServerPolicyRules
  :: AuthServerId -- ^ "authServerId"
  -> PolicyId -- ^ "policyId"
  -> OktaRequest ListAuthorizationServerPolicyRules MimeNoContent [AuthorizationServerPolicyRule] MimeJSON
listAuthorizationServerPolicyRules (AuthServerId authServerId) (PolicyId policyId) =
  _mkRequest "GET" ["/api/v1/authorizationServers/",toPath authServerId,"/policies/",toPath policyId,"/rules"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data ListAuthorizationServerPolicyRules  
-- | @application/json@
instance Produces ListAuthorizationServerPolicyRules MimeJSON


-- *** listAuthorizationServers

-- | @GET \/api\/v1\/authorizationServers@
-- 
-- Success
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
listAuthorizationServers
  :: OktaRequest ListAuthorizationServers MimeNoContent [AuthorizationServer] MimeJSON
listAuthorizationServers =
  _mkRequest "GET" ["/api/v1/authorizationServers"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data ListAuthorizationServers  
instance HasOptionalParam ListAuthorizationServers Q where
  applyOptionalParam req (Q xs) =
    req `addQuery` toQuery ("q", Just xs)
instance HasOptionalParam ListAuthorizationServers LimitText where
  applyOptionalParam req (LimitText xs) =
    req `addQuery` toQuery ("limit", Just xs)
instance HasOptionalParam ListAuthorizationServers After where
  applyOptionalParam req (After xs) =
    req `addQuery` toQuery ("after", Just xs)
-- | @application/json@
instance Produces ListAuthorizationServers MimeJSON


-- *** listOAuth2Claims

-- | @GET \/api\/v1\/authorizationServers\/{authServerId}\/claims@
-- 
-- Success
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
listOAuth2Claims
  :: AuthServerId -- ^ "authServerId"
  -> OktaRequest ListOAuth2Claims MimeNoContent [OAuth2Claim] MimeJSON
listOAuth2Claims (AuthServerId authServerId) =
  _mkRequest "GET" ["/api/v1/authorizationServers/",toPath authServerId,"/claims"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data ListOAuth2Claims  
-- | @application/json@
instance Produces ListOAuth2Claims MimeJSON


-- *** listOAuth2ClientsForAuthorizationServer

-- | @GET \/api\/v1\/authorizationServers\/{authServerId}\/clients@
-- 
-- Success
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
listOAuth2ClientsForAuthorizationServer
  :: AuthServerId -- ^ "authServerId"
  -> OktaRequest ListOAuth2ClientsForAuthorizationServer MimeNoContent [OAuth2Client] MimeJSON
listOAuth2ClientsForAuthorizationServer (AuthServerId authServerId) =
  _mkRequest "GET" ["/api/v1/authorizationServers/",toPath authServerId,"/clients"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data ListOAuth2ClientsForAuthorizationServer  
-- | @application/json@
instance Produces ListOAuth2ClientsForAuthorizationServer MimeJSON


-- *** listOAuth2Scopes

-- | @GET \/api\/v1\/authorizationServers\/{authServerId}\/scopes@
-- 
-- Success
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
listOAuth2Scopes
  :: AuthServerId -- ^ "authServerId"
  -> OktaRequest ListOAuth2Scopes MimeNoContent [OAuth2Scope] MimeJSON
listOAuth2Scopes (AuthServerId authServerId) =
  _mkRequest "GET" ["/api/v1/authorizationServers/",toPath authServerId,"/scopes"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data ListOAuth2Scopes  
instance HasOptionalParam ListOAuth2Scopes Q where
  applyOptionalParam req (Q xs) =
    req `addQuery` toQuery ("q", Just xs)
instance HasOptionalParam ListOAuth2Scopes Filter where
  applyOptionalParam req (Filter xs) =
    req `addQuery` toQuery ("filter", Just xs)
instance HasOptionalParam ListOAuth2Scopes Cursor where
  applyOptionalParam req (Cursor xs) =
    req `addQuery` toQuery ("cursor", Just xs)
instance HasOptionalParam ListOAuth2Scopes Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)
-- | @application/json@
instance Produces ListOAuth2Scopes MimeJSON


-- *** listRefreshTokensForAuthorizationServerAndClient

-- | @GET \/api\/v1\/authorizationServers\/{authServerId}\/clients\/{clientId}\/tokens@
-- 
-- Success
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
listRefreshTokensForAuthorizationServerAndClient
  :: AuthServerId -- ^ "authServerId"
  -> ClientId -- ^ "clientId"
  -> OktaRequest ListRefreshTokensForAuthorizationServerAndClient MimeNoContent [OAuth2RefreshToken] MimeJSON
listRefreshTokensForAuthorizationServerAndClient (AuthServerId authServerId) (ClientId clientId) =
  _mkRequest "GET" ["/api/v1/authorizationServers/",toPath authServerId,"/clients/",toPath clientId,"/tokens"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data ListRefreshTokensForAuthorizationServerAndClient  
instance HasOptionalParam ListRefreshTokensForAuthorizationServerAndClient Expand where
  applyOptionalParam req (Expand xs) =
    req `addQuery` toQuery ("expand", Just xs)
instance HasOptionalParam ListRefreshTokensForAuthorizationServerAndClient After where
  applyOptionalParam req (After xs) =
    req `addQuery` toQuery ("after", Just xs)
instance HasOptionalParam ListRefreshTokensForAuthorizationServerAndClient Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)
-- | @application/json@
instance Produces ListRefreshTokensForAuthorizationServerAndClient MimeJSON


-- *** revokeRefreshTokenForAuthorizationServerAndClient

-- | @DELETE \/api\/v1\/authorizationServers\/{authServerId}\/clients\/{clientId}\/tokens\/{tokenId}@
-- 
-- Success
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
revokeRefreshTokenForAuthorizationServerAndClient
  :: AuthServerId -- ^ "authServerId"
  -> ClientId -- ^ "clientId"
  -> TokenId -- ^ "tokenId"
  -> OktaRequest RevokeRefreshTokenForAuthorizationServerAndClient MimeNoContent NoContent MimeNoContent
revokeRefreshTokenForAuthorizationServerAndClient (AuthServerId authServerId) (ClientId clientId) (TokenId tokenId) =
  _mkRequest "DELETE" ["/api/v1/authorizationServers/",toPath authServerId,"/clients/",toPath clientId,"/tokens/",toPath tokenId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data RevokeRefreshTokenForAuthorizationServerAndClient  
instance Produces RevokeRefreshTokenForAuthorizationServerAndClient MimeNoContent


-- *** revokeRefreshTokensForAuthorizationServerAndClient

-- | @DELETE \/api\/v1\/authorizationServers\/{authServerId}\/clients\/{clientId}\/tokens@
-- 
-- Success
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
revokeRefreshTokensForAuthorizationServerAndClient
  :: AuthServerId -- ^ "authServerId"
  -> ClientId -- ^ "clientId"
  -> OktaRequest RevokeRefreshTokensForAuthorizationServerAndClient MimeNoContent NoContent MimeNoContent
revokeRefreshTokensForAuthorizationServerAndClient (AuthServerId authServerId) (ClientId clientId) =
  _mkRequest "DELETE" ["/api/v1/authorizationServers/",toPath authServerId,"/clients/",toPath clientId,"/tokens"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)

data RevokeRefreshTokensForAuthorizationServerAndClient  
instance Produces RevokeRefreshTokensForAuthorizationServerAndClient MimeNoContent


-- *** rotateAuthorizationServerKeys

-- | @POST \/api\/v1\/authorizationServers\/{authServerId}\/credentials\/lifecycle\/keyRotate@
-- 
-- Success
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
rotateAuthorizationServerKeys
  :: (Consumes RotateAuthorizationServerKeys MimeJSON, MimeRender MimeJSON JwkUse)
  => JwkUse -- ^ "use"
  -> AuthServerId -- ^ "authServerId"
  -> OktaRequest RotateAuthorizationServerKeys MimeJSON [JsonWebKey] MimeJSON
rotateAuthorizationServerKeys use (AuthServerId authServerId) =
  _mkRequest "POST" ["/api/v1/authorizationServers/",toPath authServerId,"/credentials/lifecycle/keyRotate"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` use

data RotateAuthorizationServerKeys 
instance HasBodyParam RotateAuthorizationServerKeys JwkUse 

-- | @application/json@
instance Consumes RotateAuthorizationServerKeys MimeJSON

-- | @application/json@
instance Produces RotateAuthorizationServerKeys MimeJSON


-- *** updateAuthorizationServer

-- | @PUT \/api\/v1\/authorizationServers\/{authServerId}@
-- 
-- Success
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
updateAuthorizationServer
  :: (Consumes UpdateAuthorizationServer MimeJSON, MimeRender MimeJSON AuthorizationServer)
  => AuthorizationServer -- ^ "authorizationServer"
  -> AuthServerId -- ^ "authServerId"
  -> OktaRequest UpdateAuthorizationServer MimeJSON AuthorizationServer MimeJSON
updateAuthorizationServer authorizationServer (AuthServerId authServerId) =
  _mkRequest "PUT" ["/api/v1/authorizationServers/",toPath authServerId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` authorizationServer

data UpdateAuthorizationServer 
instance HasBodyParam UpdateAuthorizationServer AuthorizationServer 

-- | @application/json@
instance Consumes UpdateAuthorizationServer MimeJSON

-- | @application/json@
instance Produces UpdateAuthorizationServer MimeJSON


-- *** updateAuthorizationServerPolicy

-- | @PUT \/api\/v1\/authorizationServers\/{authServerId}\/policies\/{policyId}@
-- 
-- Success
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
updateAuthorizationServerPolicy
  :: (Consumes UpdateAuthorizationServerPolicy MimeJSON, MimeRender MimeJSON AuthorizationServerPolicy)
  => AuthorizationServerPolicy -- ^ "policy"
  -> AuthServerId -- ^ "authServerId"
  -> PolicyId -- ^ "policyId"
  -> OktaRequest UpdateAuthorizationServerPolicy MimeJSON AuthorizationServerPolicy MimeJSON
updateAuthorizationServerPolicy policy (AuthServerId authServerId) (PolicyId policyId) =
  _mkRequest "PUT" ["/api/v1/authorizationServers/",toPath authServerId,"/policies/",toPath policyId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` policy

data UpdateAuthorizationServerPolicy 
instance HasBodyParam UpdateAuthorizationServerPolicy AuthorizationServerPolicy 

-- | @application/json@
instance Consumes UpdateAuthorizationServerPolicy MimeJSON

-- | @application/json@
instance Produces UpdateAuthorizationServerPolicy MimeJSON


-- *** updateAuthorizationServerPolicyRule

-- | @PUT \/api\/v1\/authorizationServers\/{authServerId}\/policies\/{policyId}\/rules\/{ruleId}@
-- 
-- Updates the configuration of the Policy Rule defined in the specified Custom Authorization Server and Policy.
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
updateAuthorizationServerPolicyRule
  :: (Consumes UpdateAuthorizationServerPolicyRule MimeJSON, MimeRender MimeJSON AuthorizationServerPolicyRule)
  => AuthorizationServerPolicyRule -- ^ "policyRule"
  -> AuthServerId -- ^ "authServerId"
  -> PolicyId -- ^ "policyId"
  -> RuleId -- ^ "ruleId"
  -> OktaRequest UpdateAuthorizationServerPolicyRule MimeJSON AuthorizationServerPolicyRule MimeJSON
updateAuthorizationServerPolicyRule policyRule (AuthServerId authServerId) (PolicyId policyId) (RuleId ruleId) =
  _mkRequest "PUT" ["/api/v1/authorizationServers/",toPath authServerId,"/policies/",toPath policyId,"/rules/",toPath ruleId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` policyRule

data UpdateAuthorizationServerPolicyRule 
instance HasBodyParam UpdateAuthorizationServerPolicyRule AuthorizationServerPolicyRule 

-- | @application/json@
instance Consumes UpdateAuthorizationServerPolicyRule MimeJSON

-- | @application/json@
instance Produces UpdateAuthorizationServerPolicyRule MimeJSON


-- *** updateOAuth2Claim

-- | @PUT \/api\/v1\/authorizationServers\/{authServerId}\/claims\/{claimId}@
-- 
-- Success
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
updateOAuth2Claim
  :: (Consumes UpdateOAuth2Claim MimeJSON, MimeRender MimeJSON OAuth2Claim)
  => OAuth2Claim -- ^ "oAuth2Claim"
  -> AuthServerId -- ^ "authServerId"
  -> ClaimId -- ^ "claimId"
  -> OktaRequest UpdateOAuth2Claim MimeJSON OAuth2Claim MimeJSON
updateOAuth2Claim oAuth2Claim (AuthServerId authServerId) (ClaimId claimId) =
  _mkRequest "PUT" ["/api/v1/authorizationServers/",toPath authServerId,"/claims/",toPath claimId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` oAuth2Claim

data UpdateOAuth2Claim 
instance HasBodyParam UpdateOAuth2Claim OAuth2Claim 

-- | @application/json@
instance Consumes UpdateOAuth2Claim MimeJSON

-- | @application/json@
instance Produces UpdateOAuth2Claim MimeJSON


-- *** updateOAuth2Scope

-- | @PUT \/api\/v1\/authorizationServers\/{authServerId}\/scopes\/{scopeId}@
-- 
-- Success
-- 
-- AuthMethod: 'AuthApiKeyApiToken'
-- 
updateOAuth2Scope
  :: (Consumes UpdateOAuth2Scope MimeJSON, MimeRender MimeJSON OAuth2Scope)
  => OAuth2Scope -- ^ "oAuth2Scope"
  -> AuthServerId -- ^ "authServerId"
  -> ScopeId -- ^ "scopeId"
  -> OktaRequest UpdateOAuth2Scope MimeJSON OAuth2Scope MimeJSON
updateOAuth2Scope oAuth2Scope (AuthServerId authServerId) (ScopeId scopeId) =
  _mkRequest "PUT" ["/api/v1/authorizationServers/",toPath authServerId,"/scopes/",toPath scopeId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` oAuth2Scope

data UpdateOAuth2Scope 
instance HasBodyParam UpdateOAuth2Scope OAuth2Scope 

-- | @application/json@
instance Consumes UpdateOAuth2Scope MimeJSON

-- | @application/json@
instance Produces UpdateOAuth2Scope MimeJSON

