{-
   Okta API

   Allows customers to easily access the Okta API

   OpenAPI Version: 3.0.1
   Okta API API version: 1.0.0
   Contact: devex-public@okta.com
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : Okta.Lens
-}

{-# LANGUAGE KindSignatures #-}
{-# LANGUAGE NamedFieldPuns #-}
{-# LANGUAGE RankNTypes #-}
{-# LANGUAGE RecordWildCards #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-matches -fno-warn-unused-binds -fno-warn-unused-imports #-}

module Okta.ModelLens where

import qualified Data.Aeson as A
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Data, Typeable)
import qualified Data.Map as Map
import qualified Data.Set as Set
import qualified Data.Time as TI

import Data.Text (Text)

import Prelude (($), (.),(<$>),(<*>),(=<<),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

import Okta.Model
import Okta.Core


-- * AccessPolicyConstraint

-- | 'accessPolicyConstraintTypes' Lens
accessPolicyConstraintTypesL :: Lens_' AccessPolicyConstraint (Maybe [Text])
accessPolicyConstraintTypesL f AccessPolicyConstraint{..} = (\accessPolicyConstraintTypes -> AccessPolicyConstraint { accessPolicyConstraintTypes, ..} ) <$> f accessPolicyConstraintTypes
{-# INLINE accessPolicyConstraintTypesL #-}

-- | 'accessPolicyConstraintMethods' Lens
accessPolicyConstraintMethodsL :: Lens_' AccessPolicyConstraint (Maybe [Text])
accessPolicyConstraintMethodsL f AccessPolicyConstraint{..} = (\accessPolicyConstraintMethods -> AccessPolicyConstraint { accessPolicyConstraintMethods, ..} ) <$> f accessPolicyConstraintMethods
{-# INLINE accessPolicyConstraintMethodsL #-}

-- | 'accessPolicyConstraintReauthenticateIn' Lens
accessPolicyConstraintReauthenticateInL :: Lens_' AccessPolicyConstraint (Maybe Text)
accessPolicyConstraintReauthenticateInL f AccessPolicyConstraint{..} = (\accessPolicyConstraintReauthenticateIn -> AccessPolicyConstraint { accessPolicyConstraintReauthenticateIn, ..} ) <$> f accessPolicyConstraintReauthenticateIn
{-# INLINE accessPolicyConstraintReauthenticateInL #-}



-- * AccessPolicyConstraints

-- | 'accessPolicyConstraintsKnowledge' Lens
accessPolicyConstraintsKnowledgeL :: Lens_' AccessPolicyConstraints (Maybe A.Value)
accessPolicyConstraintsKnowledgeL f AccessPolicyConstraints{..} = (\accessPolicyConstraintsKnowledge -> AccessPolicyConstraints { accessPolicyConstraintsKnowledge, ..} ) <$> f accessPolicyConstraintsKnowledge
{-# INLINE accessPolicyConstraintsKnowledgeL #-}

-- | 'accessPolicyConstraintsPossession' Lens
accessPolicyConstraintsPossessionL :: Lens_' AccessPolicyConstraints (Maybe PossessionConstraint)
accessPolicyConstraintsPossessionL f AccessPolicyConstraints{..} = (\accessPolicyConstraintsPossession -> AccessPolicyConstraints { accessPolicyConstraintsPossession, ..} ) <$> f accessPolicyConstraintsPossession
{-# INLINE accessPolicyConstraintsPossessionL #-}



-- * AccessPolicyRule

-- | 'accessPolicyRuleActions' Lens
accessPolicyRuleActionsL :: Lens_' AccessPolicyRule (Maybe AccessPolicyRuleActions)
accessPolicyRuleActionsL f AccessPolicyRule{..} = (\accessPolicyRuleActions -> AccessPolicyRule { accessPolicyRuleActions, ..} ) <$> f accessPolicyRuleActions
{-# INLINE accessPolicyRuleActionsL #-}

-- | 'accessPolicyRuleConditions' Lens
accessPolicyRuleConditionsL :: Lens_' AccessPolicyRule (Maybe AccessPolicyRuleConditions)
accessPolicyRuleConditionsL f AccessPolicyRule{..} = (\accessPolicyRuleConditions -> AccessPolicyRule { accessPolicyRuleConditions, ..} ) <$> f accessPolicyRuleConditions
{-# INLINE accessPolicyRuleConditionsL #-}

-- | 'accessPolicyRuleName' Lens
accessPolicyRuleNameL :: Lens_' AccessPolicyRule (Maybe Text)
accessPolicyRuleNameL f AccessPolicyRule{..} = (\accessPolicyRuleName -> AccessPolicyRule { accessPolicyRuleName, ..} ) <$> f accessPolicyRuleName
{-# INLINE accessPolicyRuleNameL #-}



-- * AccessPolicyRuleActions

-- | 'accessPolicyRuleActionsAppSignOn' Lens
accessPolicyRuleActionsAppSignOnL :: Lens_' AccessPolicyRuleActions (Maybe AccessPolicyRuleApplicationSignOn)
accessPolicyRuleActionsAppSignOnL f AccessPolicyRuleActions{..} = (\accessPolicyRuleActionsAppSignOn -> AccessPolicyRuleActions { accessPolicyRuleActionsAppSignOn, ..} ) <$> f accessPolicyRuleActionsAppSignOn
{-# INLINE accessPolicyRuleActionsAppSignOnL #-}



-- * AccessPolicyRuleApplicationSignOn

-- | 'accessPolicyRuleApplicationSignOnAccess' Lens
accessPolicyRuleApplicationSignOnAccessL :: Lens_' AccessPolicyRuleApplicationSignOn (Maybe Text)
accessPolicyRuleApplicationSignOnAccessL f AccessPolicyRuleApplicationSignOn{..} = (\accessPolicyRuleApplicationSignOnAccess -> AccessPolicyRuleApplicationSignOn { accessPolicyRuleApplicationSignOnAccess, ..} ) <$> f accessPolicyRuleApplicationSignOnAccess
{-# INLINE accessPolicyRuleApplicationSignOnAccessL #-}

-- | 'accessPolicyRuleApplicationSignOnVerificationMethod' Lens
accessPolicyRuleApplicationSignOnVerificationMethodL :: Lens_' AccessPolicyRuleApplicationSignOn (Maybe VerificationMethod)
accessPolicyRuleApplicationSignOnVerificationMethodL f AccessPolicyRuleApplicationSignOn{..} = (\accessPolicyRuleApplicationSignOnVerificationMethod -> AccessPolicyRuleApplicationSignOn { accessPolicyRuleApplicationSignOnVerificationMethod, ..} ) <$> f accessPolicyRuleApplicationSignOnVerificationMethod
{-# INLINE accessPolicyRuleApplicationSignOnVerificationMethodL #-}



-- * AccessPolicyRuleConditions

-- | 'accessPolicyRuleConditionsUserType' Lens
accessPolicyRuleConditionsUserTypeL :: Lens_' AccessPolicyRuleConditions (Maybe UserTypeCondition)
accessPolicyRuleConditionsUserTypeL f AccessPolicyRuleConditions{..} = (\accessPolicyRuleConditionsUserType -> AccessPolicyRuleConditions { accessPolicyRuleConditionsUserType, ..} ) <$> f accessPolicyRuleConditionsUserType
{-# INLINE accessPolicyRuleConditionsUserTypeL #-}

-- | 'accessPolicyRuleConditionsElCondition' Lens
accessPolicyRuleConditionsElConditionL :: Lens_' AccessPolicyRuleConditions (Maybe AccessPolicyRuleCustomCondition)
accessPolicyRuleConditionsElConditionL f AccessPolicyRuleConditions{..} = (\accessPolicyRuleConditionsElCondition -> AccessPolicyRuleConditions { accessPolicyRuleConditionsElCondition, ..} ) <$> f accessPolicyRuleConditionsElCondition
{-# INLINE accessPolicyRuleConditionsElConditionL #-}

-- | 'accessPolicyRuleConditionsDevice' Lens
accessPolicyRuleConditionsDeviceL :: Lens_' AccessPolicyRuleConditions (Maybe DeviceAccessPolicyRuleCondition)
accessPolicyRuleConditionsDeviceL f AccessPolicyRuleConditions{..} = (\accessPolicyRuleConditionsDevice -> AccessPolicyRuleConditions { accessPolicyRuleConditionsDevice, ..} ) <$> f accessPolicyRuleConditionsDevice
{-# INLINE accessPolicyRuleConditionsDeviceL #-}



-- * AccessPolicyRuleCustomCondition

-- | 'accessPolicyRuleCustomConditionCondition' Lens
accessPolicyRuleCustomConditionConditionL :: Lens_' AccessPolicyRuleCustomCondition (Maybe Text)
accessPolicyRuleCustomConditionConditionL f AccessPolicyRuleCustomCondition{..} = (\accessPolicyRuleCustomConditionCondition -> AccessPolicyRuleCustomCondition { accessPolicyRuleCustomConditionCondition, ..} ) <$> f accessPolicyRuleCustomConditionCondition
{-# INLINE accessPolicyRuleCustomConditionConditionL #-}



-- * AcsEndpoint

-- | 'acsEndpointUrl' Lens
acsEndpointUrlL :: Lens_' AcsEndpoint (Maybe Text)
acsEndpointUrlL f AcsEndpoint{..} = (\acsEndpointUrl -> AcsEndpoint { acsEndpointUrl, ..} ) <$> f acsEndpointUrl
{-# INLINE acsEndpointUrlL #-}

-- | 'acsEndpointIndex' Lens
acsEndpointIndexL :: Lens_' AcsEndpoint (Maybe Int)
acsEndpointIndexL f AcsEndpoint{..} = (\acsEndpointIndex -> AcsEndpoint { acsEndpointIndex, ..} ) <$> f acsEndpointIndex
{-# INLINE acsEndpointIndexL #-}



-- * ActivateFactorRequest

-- | 'activateFactorRequestAttestation' Lens
activateFactorRequestAttestationL :: Lens_' ActivateFactorRequest (Maybe Text)
activateFactorRequestAttestationL f ActivateFactorRequest{..} = (\activateFactorRequestAttestation -> ActivateFactorRequest { activateFactorRequestAttestation, ..} ) <$> f activateFactorRequestAttestation
{-# INLINE activateFactorRequestAttestationL #-}

-- | 'activateFactorRequestClientData' Lens
activateFactorRequestClientDataL :: Lens_' ActivateFactorRequest (Maybe Text)
activateFactorRequestClientDataL f ActivateFactorRequest{..} = (\activateFactorRequestClientData -> ActivateFactorRequest { activateFactorRequestClientData, ..} ) <$> f activateFactorRequestClientData
{-# INLINE activateFactorRequestClientDataL #-}

-- | 'activateFactorRequestPassCode' Lens
activateFactorRequestPassCodeL :: Lens_' ActivateFactorRequest (Maybe Text)
activateFactorRequestPassCodeL f ActivateFactorRequest{..} = (\activateFactorRequestPassCode -> ActivateFactorRequest { activateFactorRequestPassCode, ..} ) <$> f activateFactorRequestPassCode
{-# INLINE activateFactorRequestPassCodeL #-}

-- | 'activateFactorRequestRegistrationData' Lens
activateFactorRequestRegistrationDataL :: Lens_' ActivateFactorRequest (Maybe Text)
activateFactorRequestRegistrationDataL f ActivateFactorRequest{..} = (\activateFactorRequestRegistrationData -> ActivateFactorRequest { activateFactorRequestRegistrationData, ..} ) <$> f activateFactorRequestRegistrationData
{-# INLINE activateFactorRequestRegistrationDataL #-}

-- | 'activateFactorRequestStateToken' Lens
activateFactorRequestStateTokenL :: Lens_' ActivateFactorRequest (Maybe Text)
activateFactorRequestStateTokenL f ActivateFactorRequest{..} = (\activateFactorRequestStateToken -> ActivateFactorRequest { activateFactorRequestStateToken, ..} ) <$> f activateFactorRequestStateToken
{-# INLINE activateFactorRequestStateTokenL #-}



-- * AllowedForEnum



-- * AppAndInstanceConditionEvaluatorAppOrInstance

-- | 'appAndInstanceConditionEvaluatorAppOrInstanceId' Lens
appAndInstanceConditionEvaluatorAppOrInstanceIdL :: Lens_' AppAndInstanceConditionEvaluatorAppOrInstance (Maybe Text)
appAndInstanceConditionEvaluatorAppOrInstanceIdL f AppAndInstanceConditionEvaluatorAppOrInstance{..} = (\appAndInstanceConditionEvaluatorAppOrInstanceId -> AppAndInstanceConditionEvaluatorAppOrInstance { appAndInstanceConditionEvaluatorAppOrInstanceId, ..} ) <$> f appAndInstanceConditionEvaluatorAppOrInstanceId
{-# INLINE appAndInstanceConditionEvaluatorAppOrInstanceIdL #-}

-- | 'appAndInstanceConditionEvaluatorAppOrInstanceName' Lens
appAndInstanceConditionEvaluatorAppOrInstanceNameL :: Lens_' AppAndInstanceConditionEvaluatorAppOrInstance (Maybe Text)
appAndInstanceConditionEvaluatorAppOrInstanceNameL f AppAndInstanceConditionEvaluatorAppOrInstance{..} = (\appAndInstanceConditionEvaluatorAppOrInstanceName -> AppAndInstanceConditionEvaluatorAppOrInstance { appAndInstanceConditionEvaluatorAppOrInstanceName, ..} ) <$> f appAndInstanceConditionEvaluatorAppOrInstanceName
{-# INLINE appAndInstanceConditionEvaluatorAppOrInstanceNameL #-}

-- | 'appAndInstanceConditionEvaluatorAppOrInstanceType' Lens
appAndInstanceConditionEvaluatorAppOrInstanceTypeL :: Lens_' AppAndInstanceConditionEvaluatorAppOrInstance (Maybe E'Type)
appAndInstanceConditionEvaluatorAppOrInstanceTypeL f AppAndInstanceConditionEvaluatorAppOrInstance{..} = (\appAndInstanceConditionEvaluatorAppOrInstanceType -> AppAndInstanceConditionEvaluatorAppOrInstance { appAndInstanceConditionEvaluatorAppOrInstanceType, ..} ) <$> f appAndInstanceConditionEvaluatorAppOrInstanceType
{-# INLINE appAndInstanceConditionEvaluatorAppOrInstanceTypeL #-}



-- * AppAndInstancePolicyRuleCondition

-- | 'appAndInstancePolicyRuleConditionExclude' Lens
appAndInstancePolicyRuleConditionExcludeL :: Lens_' AppAndInstancePolicyRuleCondition (Maybe [AppAndInstanceConditionEvaluatorAppOrInstance])
appAndInstancePolicyRuleConditionExcludeL f AppAndInstancePolicyRuleCondition{..} = (\appAndInstancePolicyRuleConditionExclude -> AppAndInstancePolicyRuleCondition { appAndInstancePolicyRuleConditionExclude, ..} ) <$> f appAndInstancePolicyRuleConditionExclude
{-# INLINE appAndInstancePolicyRuleConditionExcludeL #-}

-- | 'appAndInstancePolicyRuleConditionInclude' Lens
appAndInstancePolicyRuleConditionIncludeL :: Lens_' AppAndInstancePolicyRuleCondition (Maybe [AppAndInstanceConditionEvaluatorAppOrInstance])
appAndInstancePolicyRuleConditionIncludeL f AppAndInstancePolicyRuleCondition{..} = (\appAndInstancePolicyRuleConditionInclude -> AppAndInstancePolicyRuleCondition { appAndInstancePolicyRuleConditionInclude, ..} ) <$> f appAndInstancePolicyRuleConditionInclude
{-# INLINE appAndInstancePolicyRuleConditionIncludeL #-}



-- * AppInstancePolicyRuleCondition

-- | 'appInstancePolicyRuleConditionExclude' Lens
appInstancePolicyRuleConditionExcludeL :: Lens_' AppInstancePolicyRuleCondition (Maybe [Text])
appInstancePolicyRuleConditionExcludeL f AppInstancePolicyRuleCondition{..} = (\appInstancePolicyRuleConditionExclude -> AppInstancePolicyRuleCondition { appInstancePolicyRuleConditionExclude, ..} ) <$> f appInstancePolicyRuleConditionExclude
{-# INLINE appInstancePolicyRuleConditionExcludeL #-}

-- | 'appInstancePolicyRuleConditionInclude' Lens
appInstancePolicyRuleConditionIncludeL :: Lens_' AppInstancePolicyRuleCondition (Maybe [Text])
appInstancePolicyRuleConditionIncludeL f AppInstancePolicyRuleCondition{..} = (\appInstancePolicyRuleConditionInclude -> AppInstancePolicyRuleCondition { appInstancePolicyRuleConditionInclude, ..} ) <$> f appInstancePolicyRuleConditionInclude
{-# INLINE appInstancePolicyRuleConditionIncludeL #-}



-- * AppLink

-- | 'appLinkAppAssignmentId' Lens
appLinkAppAssignmentIdL :: Lens_' AppLink (Maybe Text)
appLinkAppAssignmentIdL f AppLink{..} = (\appLinkAppAssignmentId -> AppLink { appLinkAppAssignmentId, ..} ) <$> f appLinkAppAssignmentId
{-# INLINE appLinkAppAssignmentIdL #-}

-- | 'appLinkAppInstanceId' Lens
appLinkAppInstanceIdL :: Lens_' AppLink (Maybe Text)
appLinkAppInstanceIdL f AppLink{..} = (\appLinkAppInstanceId -> AppLink { appLinkAppInstanceId, ..} ) <$> f appLinkAppInstanceId
{-# INLINE appLinkAppInstanceIdL #-}

-- | 'appLinkAppName' Lens
appLinkAppNameL :: Lens_' AppLink (Maybe Text)
appLinkAppNameL f AppLink{..} = (\appLinkAppName -> AppLink { appLinkAppName, ..} ) <$> f appLinkAppName
{-# INLINE appLinkAppNameL #-}

-- | 'appLinkCredentialsSetup' Lens
appLinkCredentialsSetupL :: Lens_' AppLink (Maybe Bool)
appLinkCredentialsSetupL f AppLink{..} = (\appLinkCredentialsSetup -> AppLink { appLinkCredentialsSetup, ..} ) <$> f appLinkCredentialsSetup
{-# INLINE appLinkCredentialsSetupL #-}

-- | 'appLinkHidden' Lens
appLinkHiddenL :: Lens_' AppLink (Maybe Bool)
appLinkHiddenL f AppLink{..} = (\appLinkHidden -> AppLink { appLinkHidden, ..} ) <$> f appLinkHidden
{-# INLINE appLinkHiddenL #-}

-- | 'appLinkId' Lens
appLinkIdL :: Lens_' AppLink (Maybe Text)
appLinkIdL f AppLink{..} = (\appLinkId -> AppLink { appLinkId, ..} ) <$> f appLinkId
{-# INLINE appLinkIdL #-}

-- | 'appLinkLabel' Lens
appLinkLabelL :: Lens_' AppLink (Maybe Text)
appLinkLabelL f AppLink{..} = (\appLinkLabel -> AppLink { appLinkLabel, ..} ) <$> f appLinkLabel
{-# INLINE appLinkLabelL #-}

-- | 'appLinkLinkUrl' Lens
appLinkLinkUrlL :: Lens_' AppLink (Maybe Text)
appLinkLinkUrlL f AppLink{..} = (\appLinkLinkUrl -> AppLink { appLinkLinkUrl, ..} ) <$> f appLinkLinkUrl
{-# INLINE appLinkLinkUrlL #-}

-- | 'appLinkLogoUrl' Lens
appLinkLogoUrlL :: Lens_' AppLink (Maybe Text)
appLinkLogoUrlL f AppLink{..} = (\appLinkLogoUrl -> AppLink { appLinkLogoUrl, ..} ) <$> f appLinkLogoUrl
{-# INLINE appLinkLogoUrlL #-}

-- | 'appLinkSortOrder' Lens
appLinkSortOrderL :: Lens_' AppLink (Maybe Int)
appLinkSortOrderL f AppLink{..} = (\appLinkSortOrder -> AppLink { appLinkSortOrder, ..} ) <$> f appLinkSortOrder
{-# INLINE appLinkSortOrderL #-}



-- * AppUser

-- | 'appUserEmbedded' Lens
appUserEmbeddedL :: Lens_' AppUser (Maybe (Map.Map String A.Value))
appUserEmbeddedL f AppUser{..} = (\appUserEmbedded -> AppUser { appUserEmbedded, ..} ) <$> f appUserEmbedded
{-# INLINE appUserEmbeddedL #-}

-- | 'appUserLinks' Lens
appUserLinksL :: Lens_' AppUser (Maybe (Map.Map String A.Value))
appUserLinksL f AppUser{..} = (\appUserLinks -> AppUser { appUserLinks, ..} ) <$> f appUserLinks
{-# INLINE appUserLinksL #-}

-- | 'appUserCreated' Lens
appUserCreatedL :: Lens_' AppUser (Maybe DateTime)
appUserCreatedL f AppUser{..} = (\appUserCreated -> AppUser { appUserCreated, ..} ) <$> f appUserCreated
{-# INLINE appUserCreatedL #-}

-- | 'appUserCredentials' Lens
appUserCredentialsL :: Lens_' AppUser (Maybe AppUserCredentials)
appUserCredentialsL f AppUser{..} = (\appUserCredentials -> AppUser { appUserCredentials, ..} ) <$> f appUserCredentials
{-# INLINE appUserCredentialsL #-}

-- | 'appUserExternalId' Lens
appUserExternalIdL :: Lens_' AppUser (Maybe Text)
appUserExternalIdL f AppUser{..} = (\appUserExternalId -> AppUser { appUserExternalId, ..} ) <$> f appUserExternalId
{-# INLINE appUserExternalIdL #-}

-- | 'appUserId' Lens
appUserIdL :: Lens_' AppUser (Maybe Text)
appUserIdL f AppUser{..} = (\appUserId -> AppUser { appUserId, ..} ) <$> f appUserId
{-# INLINE appUserIdL #-}

-- | 'appUserLastSync' Lens
appUserLastSyncL :: Lens_' AppUser (Maybe DateTime)
appUserLastSyncL f AppUser{..} = (\appUserLastSync -> AppUser { appUserLastSync, ..} ) <$> f appUserLastSync
{-# INLINE appUserLastSyncL #-}

-- | 'appUserLastUpdated' Lens
appUserLastUpdatedL :: Lens_' AppUser (Maybe DateTime)
appUserLastUpdatedL f AppUser{..} = (\appUserLastUpdated -> AppUser { appUserLastUpdated, ..} ) <$> f appUserLastUpdated
{-# INLINE appUserLastUpdatedL #-}

-- | 'appUserPasswordChanged' Lens
appUserPasswordChangedL :: Lens_' AppUser (Maybe DateTime)
appUserPasswordChangedL f AppUser{..} = (\appUserPasswordChanged -> AppUser { appUserPasswordChanged, ..} ) <$> f appUserPasswordChanged
{-# INLINE appUserPasswordChangedL #-}

-- | 'appUserProfile' Lens
appUserProfileL :: Lens_' AppUser (Maybe (Map.Map String A.Value))
appUserProfileL f AppUser{..} = (\appUserProfile -> AppUser { appUserProfile, ..} ) <$> f appUserProfile
{-# INLINE appUserProfileL #-}

-- | 'appUserScope' Lens
appUserScopeL :: Lens_' AppUser (Maybe Text)
appUserScopeL f AppUser{..} = (\appUserScope -> AppUser { appUserScope, ..} ) <$> f appUserScope
{-# INLINE appUserScopeL #-}

-- | 'appUserStatus' Lens
appUserStatusL :: Lens_' AppUser (Maybe Text)
appUserStatusL f AppUser{..} = (\appUserStatus -> AppUser { appUserStatus, ..} ) <$> f appUserStatus
{-# INLINE appUserStatusL #-}

-- | 'appUserStatusChanged' Lens
appUserStatusChangedL :: Lens_' AppUser (Maybe DateTime)
appUserStatusChangedL f AppUser{..} = (\appUserStatusChanged -> AppUser { appUserStatusChanged, ..} ) <$> f appUserStatusChanged
{-# INLINE appUserStatusChangedL #-}

-- | 'appUserSyncState' Lens
appUserSyncStateL :: Lens_' AppUser (Maybe Text)
appUserSyncStateL f AppUser{..} = (\appUserSyncState -> AppUser { appUserSyncState, ..} ) <$> f appUserSyncState
{-# INLINE appUserSyncStateL #-}



-- * AppUserCredentials

-- | 'appUserCredentialsPassword' Lens
appUserCredentialsPasswordL :: Lens_' AppUserCredentials (Maybe AppUserPasswordCredential)
appUserCredentialsPasswordL f AppUserCredentials{..} = (\appUserCredentialsPassword -> AppUserCredentials { appUserCredentialsPassword, ..} ) <$> f appUserCredentialsPassword
{-# INLINE appUserCredentialsPasswordL #-}

-- | 'appUserCredentialsUserName' Lens
appUserCredentialsUserNameL :: Lens_' AppUserCredentials (Maybe Text)
appUserCredentialsUserNameL f AppUserCredentials{..} = (\appUserCredentialsUserName -> AppUserCredentials { appUserCredentialsUserName, ..} ) <$> f appUserCredentialsUserName
{-# INLINE appUserCredentialsUserNameL #-}



-- * AppUserPasswordCredential

-- | 'appUserPasswordCredentialValue' Lens
appUserPasswordCredentialValueL :: Lens_' AppUserPasswordCredential (Maybe Text)
appUserPasswordCredentialValueL f AppUserPasswordCredential{..} = (\appUserPasswordCredentialValue -> AppUserPasswordCredential { appUserPasswordCredentialValue, ..} ) <$> f appUserPasswordCredentialValue
{-# INLINE appUserPasswordCredentialValueL #-}



-- * Application

-- | 'applicationEmbedded' Lens
applicationEmbeddedL :: Lens_' Application (Maybe (Map.Map String A.Value))
applicationEmbeddedL f Application{..} = (\applicationEmbedded -> Application { applicationEmbedded, ..} ) <$> f applicationEmbedded
{-# INLINE applicationEmbeddedL #-}

-- | 'applicationLinks' Lens
applicationLinksL :: Lens_' Application (Maybe (Map.Map String A.Value))
applicationLinksL f Application{..} = (\applicationLinks -> Application { applicationLinks, ..} ) <$> f applicationLinks
{-# INLINE applicationLinksL #-}

-- | 'applicationAccessibility' Lens
applicationAccessibilityL :: Lens_' Application (Maybe ApplicationAccessibility)
applicationAccessibilityL f Application{..} = (\applicationAccessibility -> Application { applicationAccessibility, ..} ) <$> f applicationAccessibility
{-# INLINE applicationAccessibilityL #-}

-- | 'applicationCreated' Lens
applicationCreatedL :: Lens_' Application (Maybe DateTime)
applicationCreatedL f Application{..} = (\applicationCreated -> Application { applicationCreated, ..} ) <$> f applicationCreated
{-# INLINE applicationCreatedL #-}

-- | 'applicationCredentials' Lens
applicationCredentialsL :: Lens_' Application (Maybe ApplicationCredentials)
applicationCredentialsL f Application{..} = (\applicationCredentials -> Application { applicationCredentials, ..} ) <$> f applicationCredentials
{-# INLINE applicationCredentialsL #-}

-- | 'applicationFeatures' Lens
applicationFeaturesL :: Lens_' Application (Maybe [Text])
applicationFeaturesL f Application{..} = (\applicationFeatures -> Application { applicationFeatures, ..} ) <$> f applicationFeatures
{-# INLINE applicationFeaturesL #-}

-- | 'applicationId' Lens
applicationIdL :: Lens_' Application (Maybe Text)
applicationIdL f Application{..} = (\applicationId -> Application { applicationId, ..} ) <$> f applicationId
{-# INLINE applicationIdL #-}

-- | 'applicationLabel' Lens
applicationLabelL :: Lens_' Application (Maybe Text)
applicationLabelL f Application{..} = (\applicationLabel -> Application { applicationLabel, ..} ) <$> f applicationLabel
{-# INLINE applicationLabelL #-}

-- | 'applicationLastUpdated' Lens
applicationLastUpdatedL :: Lens_' Application (Maybe DateTime)
applicationLastUpdatedL f Application{..} = (\applicationLastUpdated -> Application { applicationLastUpdated, ..} ) <$> f applicationLastUpdated
{-# INLINE applicationLastUpdatedL #-}

-- | 'applicationLicensing' Lens
applicationLicensingL :: Lens_' Application (Maybe ApplicationLicensing)
applicationLicensingL f Application{..} = (\applicationLicensing -> Application { applicationLicensing, ..} ) <$> f applicationLicensing
{-# INLINE applicationLicensingL #-}

-- | 'applicationName' Lens
applicationNameL :: Lens_' Application (Maybe Text)
applicationNameL f Application{..} = (\applicationName -> Application { applicationName, ..} ) <$> f applicationName
{-# INLINE applicationNameL #-}

-- | 'applicationProfile' Lens
applicationProfileL :: Lens_' Application (Maybe (Map.Map String A.Value))
applicationProfileL f Application{..} = (\applicationProfile -> Application { applicationProfile, ..} ) <$> f applicationProfile
{-# INLINE applicationProfileL #-}

-- | 'applicationSettings' Lens
applicationSettingsL :: Lens_' Application (Maybe ApplicationSettings)
applicationSettingsL f Application{..} = (\applicationSettings -> Application { applicationSettings, ..} ) <$> f applicationSettings
{-# INLINE applicationSettingsL #-}

-- | 'applicationSignOnMode' Lens
applicationSignOnModeL :: Lens_' Application (Maybe ApplicationSignOnMode)
applicationSignOnModeL f Application{..} = (\applicationSignOnMode -> Application { applicationSignOnMode, ..} ) <$> f applicationSignOnMode
{-# INLINE applicationSignOnModeL #-}

-- | 'applicationStatus' Lens
applicationStatusL :: Lens_' Application (Maybe E'Status)
applicationStatusL f Application{..} = (\applicationStatus -> Application { applicationStatus, ..} ) <$> f applicationStatus
{-# INLINE applicationStatusL #-}

-- | 'applicationVisibility' Lens
applicationVisibilityL :: Lens_' Application (Maybe ApplicationVisibility)
applicationVisibilityL f Application{..} = (\applicationVisibility -> Application { applicationVisibility, ..} ) <$> f applicationVisibility
{-# INLINE applicationVisibilityL #-}



-- * ApplicationAccessibility

-- | 'applicationAccessibilityErrorRedirectUrl' Lens
applicationAccessibilityErrorRedirectUrlL :: Lens_' ApplicationAccessibility (Maybe Text)
applicationAccessibilityErrorRedirectUrlL f ApplicationAccessibility{..} = (\applicationAccessibilityErrorRedirectUrl -> ApplicationAccessibility { applicationAccessibilityErrorRedirectUrl, ..} ) <$> f applicationAccessibilityErrorRedirectUrl
{-# INLINE applicationAccessibilityErrorRedirectUrlL #-}

-- | 'applicationAccessibilityLoginRedirectUrl' Lens
applicationAccessibilityLoginRedirectUrlL :: Lens_' ApplicationAccessibility (Maybe Text)
applicationAccessibilityLoginRedirectUrlL f ApplicationAccessibility{..} = (\applicationAccessibilityLoginRedirectUrl -> ApplicationAccessibility { applicationAccessibilityLoginRedirectUrl, ..} ) <$> f applicationAccessibilityLoginRedirectUrl
{-# INLINE applicationAccessibilityLoginRedirectUrlL #-}

-- | 'applicationAccessibilitySelfService' Lens
applicationAccessibilitySelfServiceL :: Lens_' ApplicationAccessibility (Maybe Bool)
applicationAccessibilitySelfServiceL f ApplicationAccessibility{..} = (\applicationAccessibilitySelfService -> ApplicationAccessibility { applicationAccessibilitySelfService, ..} ) <$> f applicationAccessibilitySelfService
{-# INLINE applicationAccessibilitySelfServiceL #-}



-- * ApplicationCredentials

-- | 'applicationCredentialsSigning' Lens
applicationCredentialsSigningL :: Lens_' ApplicationCredentials (Maybe ApplicationCredentialsSigning)
applicationCredentialsSigningL f ApplicationCredentials{..} = (\applicationCredentialsSigning -> ApplicationCredentials { applicationCredentialsSigning, ..} ) <$> f applicationCredentialsSigning
{-# INLINE applicationCredentialsSigningL #-}

-- | 'applicationCredentialsUserNameTemplate' Lens
applicationCredentialsUserNameTemplateL :: Lens_' ApplicationCredentials (Maybe ApplicationCredentialsUsernameTemplate)
applicationCredentialsUserNameTemplateL f ApplicationCredentials{..} = (\applicationCredentialsUserNameTemplate -> ApplicationCredentials { applicationCredentialsUserNameTemplate, ..} ) <$> f applicationCredentialsUserNameTemplate
{-# INLINE applicationCredentialsUserNameTemplateL #-}



-- * ApplicationCredentialsOAuthClient

-- | 'applicationCredentialsOAuthClientAutoKeyRotation' Lens
applicationCredentialsOAuthClientAutoKeyRotationL :: Lens_' ApplicationCredentialsOAuthClient (Maybe Bool)
applicationCredentialsOAuthClientAutoKeyRotationL f ApplicationCredentialsOAuthClient{..} = (\applicationCredentialsOAuthClientAutoKeyRotation -> ApplicationCredentialsOAuthClient { applicationCredentialsOAuthClientAutoKeyRotation, ..} ) <$> f applicationCredentialsOAuthClientAutoKeyRotation
{-# INLINE applicationCredentialsOAuthClientAutoKeyRotationL #-}

-- | 'applicationCredentialsOAuthClientClientId' Lens
applicationCredentialsOAuthClientClientIdL :: Lens_' ApplicationCredentialsOAuthClient (Maybe Text)
applicationCredentialsOAuthClientClientIdL f ApplicationCredentialsOAuthClient{..} = (\applicationCredentialsOAuthClientClientId -> ApplicationCredentialsOAuthClient { applicationCredentialsOAuthClientClientId, ..} ) <$> f applicationCredentialsOAuthClientClientId
{-# INLINE applicationCredentialsOAuthClientClientIdL #-}

-- | 'applicationCredentialsOAuthClientClientSecret' Lens
applicationCredentialsOAuthClientClientSecretL :: Lens_' ApplicationCredentialsOAuthClient (Maybe Text)
applicationCredentialsOAuthClientClientSecretL f ApplicationCredentialsOAuthClient{..} = (\applicationCredentialsOAuthClientClientSecret -> ApplicationCredentialsOAuthClient { applicationCredentialsOAuthClientClientSecret, ..} ) <$> f applicationCredentialsOAuthClientClientSecret
{-# INLINE applicationCredentialsOAuthClientClientSecretL #-}

-- | 'applicationCredentialsOAuthClientTokenEndpointAuthMethod' Lens
applicationCredentialsOAuthClientTokenEndpointAuthMethodL :: Lens_' ApplicationCredentialsOAuthClient (Maybe OAuthEndpointAuthenticationMethod)
applicationCredentialsOAuthClientTokenEndpointAuthMethodL f ApplicationCredentialsOAuthClient{..} = (\applicationCredentialsOAuthClientTokenEndpointAuthMethod -> ApplicationCredentialsOAuthClient { applicationCredentialsOAuthClientTokenEndpointAuthMethod, ..} ) <$> f applicationCredentialsOAuthClientTokenEndpointAuthMethod
{-# INLINE applicationCredentialsOAuthClientTokenEndpointAuthMethodL #-}



-- * ApplicationCredentialsScheme



-- * ApplicationCredentialsSigning

-- | 'applicationCredentialsSigningKid' Lens
applicationCredentialsSigningKidL :: Lens_' ApplicationCredentialsSigning (Maybe Text)
applicationCredentialsSigningKidL f ApplicationCredentialsSigning{..} = (\applicationCredentialsSigningKid -> ApplicationCredentialsSigning { applicationCredentialsSigningKid, ..} ) <$> f applicationCredentialsSigningKid
{-# INLINE applicationCredentialsSigningKidL #-}

-- | 'applicationCredentialsSigningLastRotated' Lens
applicationCredentialsSigningLastRotatedL :: Lens_' ApplicationCredentialsSigning (Maybe DateTime)
applicationCredentialsSigningLastRotatedL f ApplicationCredentialsSigning{..} = (\applicationCredentialsSigningLastRotated -> ApplicationCredentialsSigning { applicationCredentialsSigningLastRotated, ..} ) <$> f applicationCredentialsSigningLastRotated
{-# INLINE applicationCredentialsSigningLastRotatedL #-}

-- | 'applicationCredentialsSigningNextRotation' Lens
applicationCredentialsSigningNextRotationL :: Lens_' ApplicationCredentialsSigning (Maybe DateTime)
applicationCredentialsSigningNextRotationL f ApplicationCredentialsSigning{..} = (\applicationCredentialsSigningNextRotation -> ApplicationCredentialsSigning { applicationCredentialsSigningNextRotation, ..} ) <$> f applicationCredentialsSigningNextRotation
{-# INLINE applicationCredentialsSigningNextRotationL #-}

-- | 'applicationCredentialsSigningRotationMode' Lens
applicationCredentialsSigningRotationModeL :: Lens_' ApplicationCredentialsSigning (Maybe Text)
applicationCredentialsSigningRotationModeL f ApplicationCredentialsSigning{..} = (\applicationCredentialsSigningRotationMode -> ApplicationCredentialsSigning { applicationCredentialsSigningRotationMode, ..} ) <$> f applicationCredentialsSigningRotationMode
{-# INLINE applicationCredentialsSigningRotationModeL #-}

-- | 'applicationCredentialsSigningUse' Lens
applicationCredentialsSigningUseL :: Lens_' ApplicationCredentialsSigning (Maybe ApplicationCredentialsSigningUse)
applicationCredentialsSigningUseL f ApplicationCredentialsSigning{..} = (\applicationCredentialsSigningUse -> ApplicationCredentialsSigning { applicationCredentialsSigningUse, ..} ) <$> f applicationCredentialsSigningUse
{-# INLINE applicationCredentialsSigningUseL #-}



-- * ApplicationCredentialsSigningUse



-- * ApplicationCredentialsUsernameTemplate

-- | 'applicationCredentialsUsernameTemplateSuffix' Lens
applicationCredentialsUsernameTemplateSuffixL :: Lens_' ApplicationCredentialsUsernameTemplate (Maybe Text)
applicationCredentialsUsernameTemplateSuffixL f ApplicationCredentialsUsernameTemplate{..} = (\applicationCredentialsUsernameTemplateSuffix -> ApplicationCredentialsUsernameTemplate { applicationCredentialsUsernameTemplateSuffix, ..} ) <$> f applicationCredentialsUsernameTemplateSuffix
{-# INLINE applicationCredentialsUsernameTemplateSuffixL #-}

-- | 'applicationCredentialsUsernameTemplateTemplate' Lens
applicationCredentialsUsernameTemplateTemplateL :: Lens_' ApplicationCredentialsUsernameTemplate (Maybe Text)
applicationCredentialsUsernameTemplateTemplateL f ApplicationCredentialsUsernameTemplate{..} = (\applicationCredentialsUsernameTemplateTemplate -> ApplicationCredentialsUsernameTemplate { applicationCredentialsUsernameTemplateTemplate, ..} ) <$> f applicationCredentialsUsernameTemplateTemplate
{-# INLINE applicationCredentialsUsernameTemplateTemplateL #-}

-- | 'applicationCredentialsUsernameTemplateType' Lens
applicationCredentialsUsernameTemplateTypeL :: Lens_' ApplicationCredentialsUsernameTemplate (Maybe Text)
applicationCredentialsUsernameTemplateTypeL f ApplicationCredentialsUsernameTemplate{..} = (\applicationCredentialsUsernameTemplateType -> ApplicationCredentialsUsernameTemplate { applicationCredentialsUsernameTemplateType, ..} ) <$> f applicationCredentialsUsernameTemplateType
{-# INLINE applicationCredentialsUsernameTemplateTypeL #-}

-- | 'applicationCredentialsUsernameTemplatePushStatus' Lens
applicationCredentialsUsernameTemplatePushStatusL :: Lens_' ApplicationCredentialsUsernameTemplate (Maybe Text)
applicationCredentialsUsernameTemplatePushStatusL f ApplicationCredentialsUsernameTemplate{..} = (\applicationCredentialsUsernameTemplatePushStatus -> ApplicationCredentialsUsernameTemplate { applicationCredentialsUsernameTemplatePushStatus, ..} ) <$> f applicationCredentialsUsernameTemplatePushStatus
{-# INLINE applicationCredentialsUsernameTemplatePushStatusL #-}



-- * ApplicationFeature

-- | 'applicationFeatureCapabilities' Lens
applicationFeatureCapabilitiesL :: Lens_' ApplicationFeature (Maybe CapabilitiesObject)
applicationFeatureCapabilitiesL f ApplicationFeature{..} = (\applicationFeatureCapabilities -> ApplicationFeature { applicationFeatureCapabilities, ..} ) <$> f applicationFeatureCapabilities
{-# INLINE applicationFeatureCapabilitiesL #-}

-- | 'applicationFeatureDescription' Lens
applicationFeatureDescriptionL :: Lens_' ApplicationFeature (Maybe Text)
applicationFeatureDescriptionL f ApplicationFeature{..} = (\applicationFeatureDescription -> ApplicationFeature { applicationFeatureDescription, ..} ) <$> f applicationFeatureDescription
{-# INLINE applicationFeatureDescriptionL #-}

-- | 'applicationFeatureLinks' Lens
applicationFeatureLinksL :: Lens_' ApplicationFeature (Maybe (Map.Map String A.Value))
applicationFeatureLinksL f ApplicationFeature{..} = (\applicationFeatureLinks -> ApplicationFeature { applicationFeatureLinks, ..} ) <$> f applicationFeatureLinks
{-# INLINE applicationFeatureLinksL #-}

-- | 'applicationFeatureName' Lens
applicationFeatureNameL :: Lens_' ApplicationFeature (Maybe Text)
applicationFeatureNameL f ApplicationFeature{..} = (\applicationFeatureName -> ApplicationFeature { applicationFeatureName, ..} ) <$> f applicationFeatureName
{-# INLINE applicationFeatureNameL #-}

-- | 'applicationFeatureStatus' Lens
applicationFeatureStatusL :: Lens_' ApplicationFeature (Maybe EnabledStatus)
applicationFeatureStatusL f ApplicationFeature{..} = (\applicationFeatureStatus -> ApplicationFeature { applicationFeatureStatus, ..} ) <$> f applicationFeatureStatus
{-# INLINE applicationFeatureStatusL #-}



-- * ApplicationGroupAssignment

-- | 'applicationGroupAssignmentEmbedded' Lens
applicationGroupAssignmentEmbeddedL :: Lens_' ApplicationGroupAssignment (Maybe (Map.Map String A.Value))
applicationGroupAssignmentEmbeddedL f ApplicationGroupAssignment{..} = (\applicationGroupAssignmentEmbedded -> ApplicationGroupAssignment { applicationGroupAssignmentEmbedded, ..} ) <$> f applicationGroupAssignmentEmbedded
{-# INLINE applicationGroupAssignmentEmbeddedL #-}

-- | 'applicationGroupAssignmentLinks' Lens
applicationGroupAssignmentLinksL :: Lens_' ApplicationGroupAssignment (Maybe (Map.Map String A.Value))
applicationGroupAssignmentLinksL f ApplicationGroupAssignment{..} = (\applicationGroupAssignmentLinks -> ApplicationGroupAssignment { applicationGroupAssignmentLinks, ..} ) <$> f applicationGroupAssignmentLinks
{-# INLINE applicationGroupAssignmentLinksL #-}

-- | 'applicationGroupAssignmentId' Lens
applicationGroupAssignmentIdL :: Lens_' ApplicationGroupAssignment (Maybe Text)
applicationGroupAssignmentIdL f ApplicationGroupAssignment{..} = (\applicationGroupAssignmentId -> ApplicationGroupAssignment { applicationGroupAssignmentId, ..} ) <$> f applicationGroupAssignmentId
{-# INLINE applicationGroupAssignmentIdL #-}

-- | 'applicationGroupAssignmentLastUpdated' Lens
applicationGroupAssignmentLastUpdatedL :: Lens_' ApplicationGroupAssignment (Maybe DateTime)
applicationGroupAssignmentLastUpdatedL f ApplicationGroupAssignment{..} = (\applicationGroupAssignmentLastUpdated -> ApplicationGroupAssignment { applicationGroupAssignmentLastUpdated, ..} ) <$> f applicationGroupAssignmentLastUpdated
{-# INLINE applicationGroupAssignmentLastUpdatedL #-}

-- | 'applicationGroupAssignmentPriority' Lens
applicationGroupAssignmentPriorityL :: Lens_' ApplicationGroupAssignment (Maybe Int)
applicationGroupAssignmentPriorityL f ApplicationGroupAssignment{..} = (\applicationGroupAssignmentPriority -> ApplicationGroupAssignment { applicationGroupAssignmentPriority, ..} ) <$> f applicationGroupAssignmentPriority
{-# INLINE applicationGroupAssignmentPriorityL #-}

-- | 'applicationGroupAssignmentProfile' Lens
applicationGroupAssignmentProfileL :: Lens_' ApplicationGroupAssignment (Maybe (Map.Map String A.Value))
applicationGroupAssignmentProfileL f ApplicationGroupAssignment{..} = (\applicationGroupAssignmentProfile -> ApplicationGroupAssignment { applicationGroupAssignmentProfile, ..} ) <$> f applicationGroupAssignmentProfile
{-# INLINE applicationGroupAssignmentProfileL #-}



-- * ApplicationLicensing

-- | 'applicationLicensingSeatCount' Lens
applicationLicensingSeatCountL :: Lens_' ApplicationLicensing (Maybe Int)
applicationLicensingSeatCountL f ApplicationLicensing{..} = (\applicationLicensingSeatCount -> ApplicationLicensing { applicationLicensingSeatCount, ..} ) <$> f applicationLicensingSeatCount
{-# INLINE applicationLicensingSeatCountL #-}



-- * ApplicationSettings

-- | 'applicationSettingsApp' Lens
applicationSettingsAppL :: Lens_' ApplicationSettings (Maybe A.Value)
applicationSettingsAppL f ApplicationSettings{..} = (\applicationSettingsApp -> ApplicationSettings { applicationSettingsApp, ..} ) <$> f applicationSettingsApp
{-# INLINE applicationSettingsAppL #-}

-- | 'applicationSettingsImplicitAssignment' Lens
applicationSettingsImplicitAssignmentL :: Lens_' ApplicationSettings (Maybe Bool)
applicationSettingsImplicitAssignmentL f ApplicationSettings{..} = (\applicationSettingsImplicitAssignment -> ApplicationSettings { applicationSettingsImplicitAssignment, ..} ) <$> f applicationSettingsImplicitAssignment
{-# INLINE applicationSettingsImplicitAssignmentL #-}

-- | 'applicationSettingsInlineHookId' Lens
applicationSettingsInlineHookIdL :: Lens_' ApplicationSettings (Maybe Text)
applicationSettingsInlineHookIdL f ApplicationSettings{..} = (\applicationSettingsInlineHookId -> ApplicationSettings { applicationSettingsInlineHookId, ..} ) <$> f applicationSettingsInlineHookId
{-# INLINE applicationSettingsInlineHookIdL #-}

-- | 'applicationSettingsNotifications' Lens
applicationSettingsNotificationsL :: Lens_' ApplicationSettings (Maybe ApplicationSettingsNotifications)
applicationSettingsNotificationsL f ApplicationSettings{..} = (\applicationSettingsNotifications -> ApplicationSettings { applicationSettingsNotifications, ..} ) <$> f applicationSettingsNotifications
{-# INLINE applicationSettingsNotificationsL #-}

-- | 'applicationSettingsNotes' Lens
applicationSettingsNotesL :: Lens_' ApplicationSettings (Maybe ApplicationSettingsNotes)
applicationSettingsNotesL f ApplicationSettings{..} = (\applicationSettingsNotes -> ApplicationSettings { applicationSettingsNotes, ..} ) <$> f applicationSettingsNotes
{-# INLINE applicationSettingsNotesL #-}



-- * ApplicationSettingsNotes

-- | 'applicationSettingsNotesAdmin' Lens
applicationSettingsNotesAdminL :: Lens_' ApplicationSettingsNotes (Maybe Text)
applicationSettingsNotesAdminL f ApplicationSettingsNotes{..} = (\applicationSettingsNotesAdmin -> ApplicationSettingsNotes { applicationSettingsNotesAdmin, ..} ) <$> f applicationSettingsNotesAdmin
{-# INLINE applicationSettingsNotesAdminL #-}

-- | 'applicationSettingsNotesEnduser' Lens
applicationSettingsNotesEnduserL :: Lens_' ApplicationSettingsNotes (Maybe Text)
applicationSettingsNotesEnduserL f ApplicationSettingsNotes{..} = (\applicationSettingsNotesEnduser -> ApplicationSettingsNotes { applicationSettingsNotesEnduser, ..} ) <$> f applicationSettingsNotesEnduser
{-# INLINE applicationSettingsNotesEnduserL #-}



-- * ApplicationSettingsNotifications

-- | 'applicationSettingsNotificationsVpn' Lens
applicationSettingsNotificationsVpnL :: Lens_' ApplicationSettingsNotifications (Maybe ApplicationSettingsNotificationsVpn)
applicationSettingsNotificationsVpnL f ApplicationSettingsNotifications{..} = (\applicationSettingsNotificationsVpn -> ApplicationSettingsNotifications { applicationSettingsNotificationsVpn, ..} ) <$> f applicationSettingsNotificationsVpn
{-# INLINE applicationSettingsNotificationsVpnL #-}



-- * ApplicationSettingsNotificationsVpn

-- | 'applicationSettingsNotificationsVpnHelpUrl' Lens
applicationSettingsNotificationsVpnHelpUrlL :: Lens_' ApplicationSettingsNotificationsVpn (Maybe Text)
applicationSettingsNotificationsVpnHelpUrlL f ApplicationSettingsNotificationsVpn{..} = (\applicationSettingsNotificationsVpnHelpUrl -> ApplicationSettingsNotificationsVpn { applicationSettingsNotificationsVpnHelpUrl, ..} ) <$> f applicationSettingsNotificationsVpnHelpUrl
{-# INLINE applicationSettingsNotificationsVpnHelpUrlL #-}

-- | 'applicationSettingsNotificationsVpnMessage' Lens
applicationSettingsNotificationsVpnMessageL :: Lens_' ApplicationSettingsNotificationsVpn (Maybe Text)
applicationSettingsNotificationsVpnMessageL f ApplicationSettingsNotificationsVpn{..} = (\applicationSettingsNotificationsVpnMessage -> ApplicationSettingsNotificationsVpn { applicationSettingsNotificationsVpnMessage, ..} ) <$> f applicationSettingsNotificationsVpnMessage
{-# INLINE applicationSettingsNotificationsVpnMessageL #-}

-- | 'applicationSettingsNotificationsVpnNetwork' Lens
applicationSettingsNotificationsVpnNetworkL :: Lens_' ApplicationSettingsNotificationsVpn (Maybe ApplicationSettingsNotificationsVpnNetwork)
applicationSettingsNotificationsVpnNetworkL f ApplicationSettingsNotificationsVpn{..} = (\applicationSettingsNotificationsVpnNetwork -> ApplicationSettingsNotificationsVpn { applicationSettingsNotificationsVpnNetwork, ..} ) <$> f applicationSettingsNotificationsVpnNetwork
{-# INLINE applicationSettingsNotificationsVpnNetworkL #-}



-- * ApplicationSettingsNotificationsVpnNetwork

-- | 'applicationSettingsNotificationsVpnNetworkConnection' Lens
applicationSettingsNotificationsVpnNetworkConnectionL :: Lens_' ApplicationSettingsNotificationsVpnNetwork (Maybe Text)
applicationSettingsNotificationsVpnNetworkConnectionL f ApplicationSettingsNotificationsVpnNetwork{..} = (\applicationSettingsNotificationsVpnNetworkConnection -> ApplicationSettingsNotificationsVpnNetwork { applicationSettingsNotificationsVpnNetworkConnection, ..} ) <$> f applicationSettingsNotificationsVpnNetworkConnection
{-# INLINE applicationSettingsNotificationsVpnNetworkConnectionL #-}

-- | 'applicationSettingsNotificationsVpnNetworkExclude' Lens
applicationSettingsNotificationsVpnNetworkExcludeL :: Lens_' ApplicationSettingsNotificationsVpnNetwork (Maybe [Text])
applicationSettingsNotificationsVpnNetworkExcludeL f ApplicationSettingsNotificationsVpnNetwork{..} = (\applicationSettingsNotificationsVpnNetworkExclude -> ApplicationSettingsNotificationsVpnNetwork { applicationSettingsNotificationsVpnNetworkExclude, ..} ) <$> f applicationSettingsNotificationsVpnNetworkExclude
{-# INLINE applicationSettingsNotificationsVpnNetworkExcludeL #-}

-- | 'applicationSettingsNotificationsVpnNetworkInclude' Lens
applicationSettingsNotificationsVpnNetworkIncludeL :: Lens_' ApplicationSettingsNotificationsVpnNetwork (Maybe [Text])
applicationSettingsNotificationsVpnNetworkIncludeL f ApplicationSettingsNotificationsVpnNetwork{..} = (\applicationSettingsNotificationsVpnNetworkInclude -> ApplicationSettingsNotificationsVpnNetwork { applicationSettingsNotificationsVpnNetworkInclude, ..} ) <$> f applicationSettingsNotificationsVpnNetworkInclude
{-# INLINE applicationSettingsNotificationsVpnNetworkIncludeL #-}



-- * ApplicationSignOnMode



-- * ApplicationVisibility

-- | 'applicationVisibilityAutoLaunch' Lens
applicationVisibilityAutoLaunchL :: Lens_' ApplicationVisibility (Maybe Bool)
applicationVisibilityAutoLaunchL f ApplicationVisibility{..} = (\applicationVisibilityAutoLaunch -> ApplicationVisibility { applicationVisibilityAutoLaunch, ..} ) <$> f applicationVisibilityAutoLaunch
{-# INLINE applicationVisibilityAutoLaunchL #-}

-- | 'applicationVisibilityAppLinks' Lens
applicationVisibilityAppLinksL :: Lens_' ApplicationVisibility (Maybe (Map.Map String Bool))
applicationVisibilityAppLinksL f ApplicationVisibility{..} = (\applicationVisibilityAppLinks -> ApplicationVisibility { applicationVisibilityAppLinks, ..} ) <$> f applicationVisibilityAppLinks
{-# INLINE applicationVisibilityAppLinksL #-}

-- | 'applicationVisibilityAutoSubmitToolbar' Lens
applicationVisibilityAutoSubmitToolbarL :: Lens_' ApplicationVisibility (Maybe Bool)
applicationVisibilityAutoSubmitToolbarL f ApplicationVisibility{..} = (\applicationVisibilityAutoSubmitToolbar -> ApplicationVisibility { applicationVisibilityAutoSubmitToolbar, ..} ) <$> f applicationVisibilityAutoSubmitToolbar
{-# INLINE applicationVisibilityAutoSubmitToolbarL #-}

-- | 'applicationVisibilityHide' Lens
applicationVisibilityHideL :: Lens_' ApplicationVisibility (Maybe ApplicationVisibilityHide)
applicationVisibilityHideL f ApplicationVisibility{..} = (\applicationVisibilityHide -> ApplicationVisibility { applicationVisibilityHide, ..} ) <$> f applicationVisibilityHide
{-# INLINE applicationVisibilityHideL #-}



-- * ApplicationVisibilityHide

-- | 'applicationVisibilityHideIOs' Lens
applicationVisibilityHideIOsL :: Lens_' ApplicationVisibilityHide (Maybe Bool)
applicationVisibilityHideIOsL f ApplicationVisibilityHide{..} = (\applicationVisibilityHideIOs -> ApplicationVisibilityHide { applicationVisibilityHideIOs, ..} ) <$> f applicationVisibilityHideIOs
{-# INLINE applicationVisibilityHideIOsL #-}

-- | 'applicationVisibilityHideWeb' Lens
applicationVisibilityHideWebL :: Lens_' ApplicationVisibilityHide (Maybe Bool)
applicationVisibilityHideWebL f ApplicationVisibilityHide{..} = (\applicationVisibilityHideWeb -> ApplicationVisibilityHide { applicationVisibilityHideWeb, ..} ) <$> f applicationVisibilityHideWeb
{-# INLINE applicationVisibilityHideWebL #-}



-- * AssignRoleRequest

-- | 'assignRoleRequestType' Lens
assignRoleRequestTypeL :: Lens_' AssignRoleRequest (Maybe RoleType)
assignRoleRequestTypeL f AssignRoleRequest{..} = (\assignRoleRequestType -> AssignRoleRequest { assignRoleRequestType, ..} ) <$> f assignRoleRequestType
{-# INLINE assignRoleRequestTypeL #-}



-- * AuthenticationProvider

-- | 'authenticationProviderName' Lens
authenticationProviderNameL :: Lens_' AuthenticationProvider (Maybe Text)
authenticationProviderNameL f AuthenticationProvider{..} = (\authenticationProviderName -> AuthenticationProvider { authenticationProviderName, ..} ) <$> f authenticationProviderName
{-# INLINE authenticationProviderNameL #-}

-- | 'authenticationProviderType' Lens
authenticationProviderTypeL :: Lens_' AuthenticationProvider (Maybe AuthenticationProviderType)
authenticationProviderTypeL f AuthenticationProvider{..} = (\authenticationProviderType -> AuthenticationProvider { authenticationProviderType, ..} ) <$> f authenticationProviderType
{-# INLINE authenticationProviderTypeL #-}



-- * AuthenticationProviderType



-- * Authenticator

-- | 'authenticatorLinks' Lens
authenticatorLinksL :: Lens_' Authenticator (Maybe (Map.Map String A.Value))
authenticatorLinksL f Authenticator{..} = (\authenticatorLinks -> Authenticator { authenticatorLinks, ..} ) <$> f authenticatorLinks
{-# INLINE authenticatorLinksL #-}

-- | 'authenticatorCreated' Lens
authenticatorCreatedL :: Lens_' Authenticator (Maybe DateTime)
authenticatorCreatedL f Authenticator{..} = (\authenticatorCreated -> Authenticator { authenticatorCreated, ..} ) <$> f authenticatorCreated
{-# INLINE authenticatorCreatedL #-}

-- | 'authenticatorId' Lens
authenticatorIdL :: Lens_' Authenticator (Maybe Text)
authenticatorIdL f Authenticator{..} = (\authenticatorId -> Authenticator { authenticatorId, ..} ) <$> f authenticatorId
{-# INLINE authenticatorIdL #-}

-- | 'authenticatorKey' Lens
authenticatorKeyL :: Lens_' Authenticator (Maybe Text)
authenticatorKeyL f Authenticator{..} = (\authenticatorKey -> Authenticator { authenticatorKey, ..} ) <$> f authenticatorKey
{-# INLINE authenticatorKeyL #-}

-- | 'authenticatorStatus' Lens
authenticatorStatusL :: Lens_' Authenticator (Maybe AuthenticatorStatus)
authenticatorStatusL f Authenticator{..} = (\authenticatorStatus -> Authenticator { authenticatorStatus, ..} ) <$> f authenticatorStatus
{-# INLINE authenticatorStatusL #-}

-- | 'authenticatorLastUpdated' Lens
authenticatorLastUpdatedL :: Lens_' Authenticator (Maybe DateTime)
authenticatorLastUpdatedL f Authenticator{..} = (\authenticatorLastUpdated -> Authenticator { authenticatorLastUpdated, ..} ) <$> f authenticatorLastUpdated
{-# INLINE authenticatorLastUpdatedL #-}

-- | 'authenticatorName' Lens
authenticatorNameL :: Lens_' Authenticator (Maybe Text)
authenticatorNameL f Authenticator{..} = (\authenticatorName -> Authenticator { authenticatorName, ..} ) <$> f authenticatorName
{-# INLINE authenticatorNameL #-}

-- | 'authenticatorType' Lens
authenticatorTypeL :: Lens_' Authenticator (Maybe AuthenticatorType)
authenticatorTypeL f Authenticator{..} = (\authenticatorType -> Authenticator { authenticatorType, ..} ) <$> f authenticatorType
{-# INLINE authenticatorTypeL #-}

-- | 'authenticatorSettings' Lens
authenticatorSettingsL :: Lens_' Authenticator (Maybe AuthenticatorSettings)
authenticatorSettingsL f Authenticator{..} = (\authenticatorSettings -> Authenticator { authenticatorSettings, ..} ) <$> f authenticatorSettings
{-# INLINE authenticatorSettingsL #-}

-- | 'authenticatorProvider' Lens
authenticatorProviderL :: Lens_' Authenticator (Maybe AuthenticatorProvider)
authenticatorProviderL f Authenticator{..} = (\authenticatorProvider -> Authenticator { authenticatorProvider, ..} ) <$> f authenticatorProvider
{-# INLINE authenticatorProviderL #-}



-- * AuthenticatorProvider

-- | 'authenticatorProviderType' Lens
authenticatorProviderTypeL :: Lens_' AuthenticatorProvider (Maybe Text)
authenticatorProviderTypeL f AuthenticatorProvider{..} = (\authenticatorProviderType -> AuthenticatorProvider { authenticatorProviderType, ..} ) <$> f authenticatorProviderType
{-# INLINE authenticatorProviderTypeL #-}

-- | 'authenticatorProviderConfiguration' Lens
authenticatorProviderConfigurationL :: Lens_' AuthenticatorProvider (Maybe AuthenticatorProviderConfiguration)
authenticatorProviderConfigurationL f AuthenticatorProvider{..} = (\authenticatorProviderConfiguration -> AuthenticatorProvider { authenticatorProviderConfiguration, ..} ) <$> f authenticatorProviderConfiguration
{-# INLINE authenticatorProviderConfigurationL #-}



-- * AuthenticatorProviderConfiguration

-- | 'authenticatorProviderConfigurationHostName' Lens
authenticatorProviderConfigurationHostNameL :: Lens_' AuthenticatorProviderConfiguration (Maybe Text)
authenticatorProviderConfigurationHostNameL f AuthenticatorProviderConfiguration{..} = (\authenticatorProviderConfigurationHostName -> AuthenticatorProviderConfiguration { authenticatorProviderConfigurationHostName, ..} ) <$> f authenticatorProviderConfigurationHostName
{-# INLINE authenticatorProviderConfigurationHostNameL #-}

-- | 'authenticatorProviderConfigurationAuthPort' Lens
authenticatorProviderConfigurationAuthPortL :: Lens_' AuthenticatorProviderConfiguration (Maybe Int)
authenticatorProviderConfigurationAuthPortL f AuthenticatorProviderConfiguration{..} = (\authenticatorProviderConfigurationAuthPort -> AuthenticatorProviderConfiguration { authenticatorProviderConfigurationAuthPort, ..} ) <$> f authenticatorProviderConfigurationAuthPort
{-# INLINE authenticatorProviderConfigurationAuthPortL #-}

-- | 'authenticatorProviderConfigurationInstanceId' Lens
authenticatorProviderConfigurationInstanceIdL :: Lens_' AuthenticatorProviderConfiguration (Maybe Text)
authenticatorProviderConfigurationInstanceIdL f AuthenticatorProviderConfiguration{..} = (\authenticatorProviderConfigurationInstanceId -> AuthenticatorProviderConfiguration { authenticatorProviderConfigurationInstanceId, ..} ) <$> f authenticatorProviderConfigurationInstanceId
{-# INLINE authenticatorProviderConfigurationInstanceIdL #-}

-- | 'authenticatorProviderConfigurationSharedSecret' Lens
authenticatorProviderConfigurationSharedSecretL :: Lens_' AuthenticatorProviderConfiguration (Maybe Text)
authenticatorProviderConfigurationSharedSecretL f AuthenticatorProviderConfiguration{..} = (\authenticatorProviderConfigurationSharedSecret -> AuthenticatorProviderConfiguration { authenticatorProviderConfigurationSharedSecret, ..} ) <$> f authenticatorProviderConfigurationSharedSecret
{-# INLINE authenticatorProviderConfigurationSharedSecretL #-}

-- | 'authenticatorProviderConfigurationUserNameTemplate' Lens
authenticatorProviderConfigurationUserNameTemplateL :: Lens_' AuthenticatorProviderConfiguration (Maybe AuthenticatorProviderConfigurationUserNamePlate)
authenticatorProviderConfigurationUserNameTemplateL f AuthenticatorProviderConfiguration{..} = (\authenticatorProviderConfigurationUserNameTemplate -> AuthenticatorProviderConfiguration { authenticatorProviderConfigurationUserNameTemplate, ..} ) <$> f authenticatorProviderConfigurationUserNameTemplate
{-# INLINE authenticatorProviderConfigurationUserNameTemplateL #-}

-- | 'authenticatorProviderConfigurationHost' Lens
authenticatorProviderConfigurationHostL :: Lens_' AuthenticatorProviderConfiguration (Maybe Text)
authenticatorProviderConfigurationHostL f AuthenticatorProviderConfiguration{..} = (\authenticatorProviderConfigurationHost -> AuthenticatorProviderConfiguration { authenticatorProviderConfigurationHost, ..} ) <$> f authenticatorProviderConfigurationHost
{-# INLINE authenticatorProviderConfigurationHostL #-}

-- | 'authenticatorProviderConfigurationSecretKey' Lens
authenticatorProviderConfigurationSecretKeyL :: Lens_' AuthenticatorProviderConfiguration (Maybe Text)
authenticatorProviderConfigurationSecretKeyL f AuthenticatorProviderConfiguration{..} = (\authenticatorProviderConfigurationSecretKey -> AuthenticatorProviderConfiguration { authenticatorProviderConfigurationSecretKey, ..} ) <$> f authenticatorProviderConfigurationSecretKey
{-# INLINE authenticatorProviderConfigurationSecretKeyL #-}

-- | 'authenticatorProviderConfigurationIntegrationKey' Lens
authenticatorProviderConfigurationIntegrationKeyL :: Lens_' AuthenticatorProviderConfiguration (Maybe Text)
authenticatorProviderConfigurationIntegrationKeyL f AuthenticatorProviderConfiguration{..} = (\authenticatorProviderConfigurationIntegrationKey -> AuthenticatorProviderConfiguration { authenticatorProviderConfigurationIntegrationKey, ..} ) <$> f authenticatorProviderConfigurationIntegrationKey
{-# INLINE authenticatorProviderConfigurationIntegrationKeyL #-}



-- * AuthenticatorProviderConfigurationUserNamePlate

-- | 'authenticatorProviderConfigurationUserNamePlateTemplate' Lens
authenticatorProviderConfigurationUserNamePlateTemplateL :: Lens_' AuthenticatorProviderConfigurationUserNamePlate (Maybe Text)
authenticatorProviderConfigurationUserNamePlateTemplateL f AuthenticatorProviderConfigurationUserNamePlate{..} = (\authenticatorProviderConfigurationUserNamePlateTemplate -> AuthenticatorProviderConfigurationUserNamePlate { authenticatorProviderConfigurationUserNamePlateTemplate, ..} ) <$> f authenticatorProviderConfigurationUserNamePlateTemplate
{-# INLINE authenticatorProviderConfigurationUserNamePlateTemplateL #-}



-- * AuthenticatorSettings

-- | 'authenticatorSettingsAllowedFor' Lens
authenticatorSettingsAllowedForL :: Lens_' AuthenticatorSettings (Maybe AllowedForEnum)
authenticatorSettingsAllowedForL f AuthenticatorSettings{..} = (\authenticatorSettingsAllowedFor -> AuthenticatorSettings { authenticatorSettingsAllowedFor, ..} ) <$> f authenticatorSettingsAllowedFor
{-# INLINE authenticatorSettingsAllowedForL #-}

-- | 'authenticatorSettingsTokenLifetimeInMinutes' Lens
authenticatorSettingsTokenLifetimeInMinutesL :: Lens_' AuthenticatorSettings (Maybe Int)
authenticatorSettingsTokenLifetimeInMinutesL f AuthenticatorSettings{..} = (\authenticatorSettingsTokenLifetimeInMinutes -> AuthenticatorSettings { authenticatorSettingsTokenLifetimeInMinutes, ..} ) <$> f authenticatorSettingsTokenLifetimeInMinutes
{-# INLINE authenticatorSettingsTokenLifetimeInMinutesL #-}

-- | 'authenticatorSettingsAppInstanceId' Lens
authenticatorSettingsAppInstanceIdL :: Lens_' AuthenticatorSettings (Maybe Text)
authenticatorSettingsAppInstanceIdL f AuthenticatorSettings{..} = (\authenticatorSettingsAppInstanceId -> AuthenticatorSettings { authenticatorSettingsAppInstanceId, ..} ) <$> f authenticatorSettingsAppInstanceId
{-# INLINE authenticatorSettingsAppInstanceIdL #-}

-- | 'authenticatorSettingsChannelBinding' Lens
authenticatorSettingsChannelBindingL :: Lens_' AuthenticatorSettings (Maybe ChannelBinding)
authenticatorSettingsChannelBindingL f AuthenticatorSettings{..} = (\authenticatorSettingsChannelBinding -> AuthenticatorSettings { authenticatorSettingsChannelBinding, ..} ) <$> f authenticatorSettingsChannelBinding
{-# INLINE authenticatorSettingsChannelBindingL #-}

-- | 'authenticatorSettingsCompliance' Lens
authenticatorSettingsComplianceL :: Lens_' AuthenticatorSettings (Maybe Compliance)
authenticatorSettingsComplianceL f AuthenticatorSettings{..} = (\authenticatorSettingsCompliance -> AuthenticatorSettings { authenticatorSettingsCompliance, ..} ) <$> f authenticatorSettingsCompliance
{-# INLINE authenticatorSettingsComplianceL #-}

-- | 'authenticatorSettingsUserVerification' Lens
authenticatorSettingsUserVerificationL :: Lens_' AuthenticatorSettings (Maybe UserVerificationEnum)
authenticatorSettingsUserVerificationL f AuthenticatorSettings{..} = (\authenticatorSettingsUserVerification -> AuthenticatorSettings { authenticatorSettingsUserVerification, ..} ) <$> f authenticatorSettingsUserVerification
{-# INLINE authenticatorSettingsUserVerificationL #-}



-- * AuthenticatorStatus



-- * AuthenticatorType



-- * AuthorizationServer

-- | 'authorizationServerLinks' Lens
authorizationServerLinksL :: Lens_' AuthorizationServer (Maybe (Map.Map String A.Value))
authorizationServerLinksL f AuthorizationServer{..} = (\authorizationServerLinks -> AuthorizationServer { authorizationServerLinks, ..} ) <$> f authorizationServerLinks
{-# INLINE authorizationServerLinksL #-}

-- | 'authorizationServerAudiences' Lens
authorizationServerAudiencesL :: Lens_' AuthorizationServer (Maybe [Text])
authorizationServerAudiencesL f AuthorizationServer{..} = (\authorizationServerAudiences -> AuthorizationServer { authorizationServerAudiences, ..} ) <$> f authorizationServerAudiences
{-# INLINE authorizationServerAudiencesL #-}

-- | 'authorizationServerCreated' Lens
authorizationServerCreatedL :: Lens_' AuthorizationServer (Maybe DateTime)
authorizationServerCreatedL f AuthorizationServer{..} = (\authorizationServerCreated -> AuthorizationServer { authorizationServerCreated, ..} ) <$> f authorizationServerCreated
{-# INLINE authorizationServerCreatedL #-}

-- | 'authorizationServerCredentials' Lens
authorizationServerCredentialsL :: Lens_' AuthorizationServer (Maybe AuthorizationServerCredentials)
authorizationServerCredentialsL f AuthorizationServer{..} = (\authorizationServerCredentials -> AuthorizationServer { authorizationServerCredentials, ..} ) <$> f authorizationServerCredentials
{-# INLINE authorizationServerCredentialsL #-}

-- | 'authorizationServerDescription' Lens
authorizationServerDescriptionL :: Lens_' AuthorizationServer (Maybe Text)
authorizationServerDescriptionL f AuthorizationServer{..} = (\authorizationServerDescription -> AuthorizationServer { authorizationServerDescription, ..} ) <$> f authorizationServerDescription
{-# INLINE authorizationServerDescriptionL #-}

-- | 'authorizationServerId' Lens
authorizationServerIdL :: Lens_' AuthorizationServer (Maybe Text)
authorizationServerIdL f AuthorizationServer{..} = (\authorizationServerId -> AuthorizationServer { authorizationServerId, ..} ) <$> f authorizationServerId
{-# INLINE authorizationServerIdL #-}

-- | 'authorizationServerIssuer' Lens
authorizationServerIssuerL :: Lens_' AuthorizationServer (Maybe Text)
authorizationServerIssuerL f AuthorizationServer{..} = (\authorizationServerIssuer -> AuthorizationServer { authorizationServerIssuer, ..} ) <$> f authorizationServerIssuer
{-# INLINE authorizationServerIssuerL #-}

-- | 'authorizationServerIssuerMode' Lens
authorizationServerIssuerModeL :: Lens_' AuthorizationServer (Maybe E'IssuerMode)
authorizationServerIssuerModeL f AuthorizationServer{..} = (\authorizationServerIssuerMode -> AuthorizationServer { authorizationServerIssuerMode, ..} ) <$> f authorizationServerIssuerMode
{-# INLINE authorizationServerIssuerModeL #-}

-- | 'authorizationServerLastUpdated' Lens
authorizationServerLastUpdatedL :: Lens_' AuthorizationServer (Maybe DateTime)
authorizationServerLastUpdatedL f AuthorizationServer{..} = (\authorizationServerLastUpdated -> AuthorizationServer { authorizationServerLastUpdated, ..} ) <$> f authorizationServerLastUpdated
{-# INLINE authorizationServerLastUpdatedL #-}

-- | 'authorizationServerName' Lens
authorizationServerNameL :: Lens_' AuthorizationServer (Maybe Text)
authorizationServerNameL f AuthorizationServer{..} = (\authorizationServerName -> AuthorizationServer { authorizationServerName, ..} ) <$> f authorizationServerName
{-# INLINE authorizationServerNameL #-}

-- | 'authorizationServerStatus' Lens
authorizationServerStatusL :: Lens_' AuthorizationServer (Maybe E'Status2)
authorizationServerStatusL f AuthorizationServer{..} = (\authorizationServerStatus -> AuthorizationServer { authorizationServerStatus, ..} ) <$> f authorizationServerStatus
{-# INLINE authorizationServerStatusL #-}



-- * AuthorizationServerCredentials

-- | 'authorizationServerCredentialsSigning' Lens
authorizationServerCredentialsSigningL :: Lens_' AuthorizationServerCredentials (Maybe AuthorizationServerCredentialsSigningConfig)
authorizationServerCredentialsSigningL f AuthorizationServerCredentials{..} = (\authorizationServerCredentialsSigning -> AuthorizationServerCredentials { authorizationServerCredentialsSigning, ..} ) <$> f authorizationServerCredentialsSigning
{-# INLINE authorizationServerCredentialsSigningL #-}



-- * AuthorizationServerCredentialsRotationMode



-- * AuthorizationServerCredentialsSigningConfig

-- | 'authorizationServerCredentialsSigningConfigKid' Lens
authorizationServerCredentialsSigningConfigKidL :: Lens_' AuthorizationServerCredentialsSigningConfig (Maybe Text)
authorizationServerCredentialsSigningConfigKidL f AuthorizationServerCredentialsSigningConfig{..} = (\authorizationServerCredentialsSigningConfigKid -> AuthorizationServerCredentialsSigningConfig { authorizationServerCredentialsSigningConfigKid, ..} ) <$> f authorizationServerCredentialsSigningConfigKid
{-# INLINE authorizationServerCredentialsSigningConfigKidL #-}

-- | 'authorizationServerCredentialsSigningConfigLastRotated' Lens
authorizationServerCredentialsSigningConfigLastRotatedL :: Lens_' AuthorizationServerCredentialsSigningConfig (Maybe DateTime)
authorizationServerCredentialsSigningConfigLastRotatedL f AuthorizationServerCredentialsSigningConfig{..} = (\authorizationServerCredentialsSigningConfigLastRotated -> AuthorizationServerCredentialsSigningConfig { authorizationServerCredentialsSigningConfigLastRotated, ..} ) <$> f authorizationServerCredentialsSigningConfigLastRotated
{-# INLINE authorizationServerCredentialsSigningConfigLastRotatedL #-}

-- | 'authorizationServerCredentialsSigningConfigNextRotation' Lens
authorizationServerCredentialsSigningConfigNextRotationL :: Lens_' AuthorizationServerCredentialsSigningConfig (Maybe DateTime)
authorizationServerCredentialsSigningConfigNextRotationL f AuthorizationServerCredentialsSigningConfig{..} = (\authorizationServerCredentialsSigningConfigNextRotation -> AuthorizationServerCredentialsSigningConfig { authorizationServerCredentialsSigningConfigNextRotation, ..} ) <$> f authorizationServerCredentialsSigningConfigNextRotation
{-# INLINE authorizationServerCredentialsSigningConfigNextRotationL #-}

-- | 'authorizationServerCredentialsSigningConfigRotationMode' Lens
authorizationServerCredentialsSigningConfigRotationModeL :: Lens_' AuthorizationServerCredentialsSigningConfig (Maybe AuthorizationServerCredentialsRotationMode)
authorizationServerCredentialsSigningConfigRotationModeL f AuthorizationServerCredentialsSigningConfig{..} = (\authorizationServerCredentialsSigningConfigRotationMode -> AuthorizationServerCredentialsSigningConfig { authorizationServerCredentialsSigningConfigRotationMode, ..} ) <$> f authorizationServerCredentialsSigningConfigRotationMode
{-# INLINE authorizationServerCredentialsSigningConfigRotationModeL #-}

-- | 'authorizationServerCredentialsSigningConfigUse' Lens
authorizationServerCredentialsSigningConfigUseL :: Lens_' AuthorizationServerCredentialsSigningConfig (Maybe AuthorizationServerCredentialsUse)
authorizationServerCredentialsSigningConfigUseL f AuthorizationServerCredentialsSigningConfig{..} = (\authorizationServerCredentialsSigningConfigUse -> AuthorizationServerCredentialsSigningConfig { authorizationServerCredentialsSigningConfigUse, ..} ) <$> f authorizationServerCredentialsSigningConfigUse
{-# INLINE authorizationServerCredentialsSigningConfigUseL #-}



-- * AuthorizationServerCredentialsUse



-- * AuthorizationServerPolicy

-- | 'authorizationServerPolicyEmbedded' Lens
authorizationServerPolicyEmbeddedL :: Lens_' AuthorizationServerPolicy (Maybe (Map.Map String A.Value))
authorizationServerPolicyEmbeddedL f AuthorizationServerPolicy{..} = (\authorizationServerPolicyEmbedded -> AuthorizationServerPolicy { authorizationServerPolicyEmbedded, ..} ) <$> f authorizationServerPolicyEmbedded
{-# INLINE authorizationServerPolicyEmbeddedL #-}

-- | 'authorizationServerPolicyLinks' Lens
authorizationServerPolicyLinksL :: Lens_' AuthorizationServerPolicy (Maybe (Map.Map String A.Value))
authorizationServerPolicyLinksL f AuthorizationServerPolicy{..} = (\authorizationServerPolicyLinks -> AuthorizationServerPolicy { authorizationServerPolicyLinks, ..} ) <$> f authorizationServerPolicyLinks
{-# INLINE authorizationServerPolicyLinksL #-}

-- | 'authorizationServerPolicyConditions' Lens
authorizationServerPolicyConditionsL :: Lens_' AuthorizationServerPolicy (Maybe PolicyRuleConditions)
authorizationServerPolicyConditionsL f AuthorizationServerPolicy{..} = (\authorizationServerPolicyConditions -> AuthorizationServerPolicy { authorizationServerPolicyConditions, ..} ) <$> f authorizationServerPolicyConditions
{-# INLINE authorizationServerPolicyConditionsL #-}

-- | 'authorizationServerPolicyCreated' Lens
authorizationServerPolicyCreatedL :: Lens_' AuthorizationServerPolicy (Maybe DateTime)
authorizationServerPolicyCreatedL f AuthorizationServerPolicy{..} = (\authorizationServerPolicyCreated -> AuthorizationServerPolicy { authorizationServerPolicyCreated, ..} ) <$> f authorizationServerPolicyCreated
{-# INLINE authorizationServerPolicyCreatedL #-}

-- | 'authorizationServerPolicyDescription' Lens
authorizationServerPolicyDescriptionL :: Lens_' AuthorizationServerPolicy (Maybe Text)
authorizationServerPolicyDescriptionL f AuthorizationServerPolicy{..} = (\authorizationServerPolicyDescription -> AuthorizationServerPolicy { authorizationServerPolicyDescription, ..} ) <$> f authorizationServerPolicyDescription
{-# INLINE authorizationServerPolicyDescriptionL #-}

-- | 'authorizationServerPolicyId' Lens
authorizationServerPolicyIdL :: Lens_' AuthorizationServerPolicy (Maybe Text)
authorizationServerPolicyIdL f AuthorizationServerPolicy{..} = (\authorizationServerPolicyId -> AuthorizationServerPolicy { authorizationServerPolicyId, ..} ) <$> f authorizationServerPolicyId
{-# INLINE authorizationServerPolicyIdL #-}

-- | 'authorizationServerPolicyLastUpdated' Lens
authorizationServerPolicyLastUpdatedL :: Lens_' AuthorizationServerPolicy (Maybe DateTime)
authorizationServerPolicyLastUpdatedL f AuthorizationServerPolicy{..} = (\authorizationServerPolicyLastUpdated -> AuthorizationServerPolicy { authorizationServerPolicyLastUpdated, ..} ) <$> f authorizationServerPolicyLastUpdated
{-# INLINE authorizationServerPolicyLastUpdatedL #-}

-- | 'authorizationServerPolicyName' Lens
authorizationServerPolicyNameL :: Lens_' AuthorizationServerPolicy (Maybe Text)
authorizationServerPolicyNameL f AuthorizationServerPolicy{..} = (\authorizationServerPolicyName -> AuthorizationServerPolicy { authorizationServerPolicyName, ..} ) <$> f authorizationServerPolicyName
{-# INLINE authorizationServerPolicyNameL #-}

-- | 'authorizationServerPolicyPriority' Lens
authorizationServerPolicyPriorityL :: Lens_' AuthorizationServerPolicy (Maybe Int)
authorizationServerPolicyPriorityL f AuthorizationServerPolicy{..} = (\authorizationServerPolicyPriority -> AuthorizationServerPolicy { authorizationServerPolicyPriority, ..} ) <$> f authorizationServerPolicyPriority
{-# INLINE authorizationServerPolicyPriorityL #-}

-- | 'authorizationServerPolicyStatus' Lens
authorizationServerPolicyStatusL :: Lens_' AuthorizationServerPolicy (Maybe E'Status2)
authorizationServerPolicyStatusL f AuthorizationServerPolicy{..} = (\authorizationServerPolicyStatus -> AuthorizationServerPolicy { authorizationServerPolicyStatus, ..} ) <$> f authorizationServerPolicyStatus
{-# INLINE authorizationServerPolicyStatusL #-}

-- | 'authorizationServerPolicySystem' Lens
authorizationServerPolicySystemL :: Lens_' AuthorizationServerPolicy (Maybe Bool)
authorizationServerPolicySystemL f AuthorizationServerPolicy{..} = (\authorizationServerPolicySystem -> AuthorizationServerPolicy { authorizationServerPolicySystem, ..} ) <$> f authorizationServerPolicySystem
{-# INLINE authorizationServerPolicySystemL #-}

-- | 'authorizationServerPolicyType' Lens
authorizationServerPolicyTypeL :: Lens_' AuthorizationServerPolicy (Maybe PolicyType)
authorizationServerPolicyTypeL f AuthorizationServerPolicy{..} = (\authorizationServerPolicyType -> AuthorizationServerPolicy { authorizationServerPolicyType, ..} ) <$> f authorizationServerPolicyType
{-# INLINE authorizationServerPolicyTypeL #-}



-- * AuthorizationServerPolicyRule

-- | 'authorizationServerPolicyRuleCreated' Lens
authorizationServerPolicyRuleCreatedL :: Lens_' AuthorizationServerPolicyRule (Maybe DateTime)
authorizationServerPolicyRuleCreatedL f AuthorizationServerPolicyRule{..} = (\authorizationServerPolicyRuleCreated -> AuthorizationServerPolicyRule { authorizationServerPolicyRuleCreated, ..} ) <$> f authorizationServerPolicyRuleCreated
{-# INLINE authorizationServerPolicyRuleCreatedL #-}

-- | 'authorizationServerPolicyRuleId' Lens
authorizationServerPolicyRuleIdL :: Lens_' AuthorizationServerPolicyRule (Maybe Text)
authorizationServerPolicyRuleIdL f AuthorizationServerPolicyRule{..} = (\authorizationServerPolicyRuleId -> AuthorizationServerPolicyRule { authorizationServerPolicyRuleId, ..} ) <$> f authorizationServerPolicyRuleId
{-# INLINE authorizationServerPolicyRuleIdL #-}

-- | 'authorizationServerPolicyRuleName' Lens
authorizationServerPolicyRuleNameL :: Lens_' AuthorizationServerPolicyRule (Maybe Text)
authorizationServerPolicyRuleNameL f AuthorizationServerPolicyRule{..} = (\authorizationServerPolicyRuleName -> AuthorizationServerPolicyRule { authorizationServerPolicyRuleName, ..} ) <$> f authorizationServerPolicyRuleName
{-# INLINE authorizationServerPolicyRuleNameL #-}

-- | 'authorizationServerPolicyRuleLastUpdated' Lens
authorizationServerPolicyRuleLastUpdatedL :: Lens_' AuthorizationServerPolicyRule (Maybe DateTime)
authorizationServerPolicyRuleLastUpdatedL f AuthorizationServerPolicyRule{..} = (\authorizationServerPolicyRuleLastUpdated -> AuthorizationServerPolicyRule { authorizationServerPolicyRuleLastUpdated, ..} ) <$> f authorizationServerPolicyRuleLastUpdated
{-# INLINE authorizationServerPolicyRuleLastUpdatedL #-}

-- | 'authorizationServerPolicyRulePriority' Lens
authorizationServerPolicyRulePriorityL :: Lens_' AuthorizationServerPolicyRule (Maybe Int)
authorizationServerPolicyRulePriorityL f AuthorizationServerPolicyRule{..} = (\authorizationServerPolicyRulePriority -> AuthorizationServerPolicyRule { authorizationServerPolicyRulePriority, ..} ) <$> f authorizationServerPolicyRulePriority
{-# INLINE authorizationServerPolicyRulePriorityL #-}

-- | 'authorizationServerPolicyRuleStatus' Lens
authorizationServerPolicyRuleStatusL :: Lens_' AuthorizationServerPolicyRule (Maybe E'Status2)
authorizationServerPolicyRuleStatusL f AuthorizationServerPolicyRule{..} = (\authorizationServerPolicyRuleStatus -> AuthorizationServerPolicyRule { authorizationServerPolicyRuleStatus, ..} ) <$> f authorizationServerPolicyRuleStatus
{-# INLINE authorizationServerPolicyRuleStatusL #-}

-- | 'authorizationServerPolicyRuleSystem' Lens
authorizationServerPolicyRuleSystemL :: Lens_' AuthorizationServerPolicyRule (Maybe Bool)
authorizationServerPolicyRuleSystemL f AuthorizationServerPolicyRule{..} = (\authorizationServerPolicyRuleSystem -> AuthorizationServerPolicyRule { authorizationServerPolicyRuleSystem, ..} ) <$> f authorizationServerPolicyRuleSystem
{-# INLINE authorizationServerPolicyRuleSystemL #-}

-- | 'authorizationServerPolicyRuleType' Lens
authorizationServerPolicyRuleTypeL :: Lens_' AuthorizationServerPolicyRule (Maybe E'Type5)
authorizationServerPolicyRuleTypeL f AuthorizationServerPolicyRule{..} = (\authorizationServerPolicyRuleType -> AuthorizationServerPolicyRule { authorizationServerPolicyRuleType, ..} ) <$> f authorizationServerPolicyRuleType
{-# INLINE authorizationServerPolicyRuleTypeL #-}

-- | 'authorizationServerPolicyRuleConditions' Lens
authorizationServerPolicyRuleConditionsL :: Lens_' AuthorizationServerPolicyRule (Maybe AuthorizationServerPolicyRuleConditions)
authorizationServerPolicyRuleConditionsL f AuthorizationServerPolicyRule{..} = (\authorizationServerPolicyRuleConditions -> AuthorizationServerPolicyRule { authorizationServerPolicyRuleConditions, ..} ) <$> f authorizationServerPolicyRuleConditions
{-# INLINE authorizationServerPolicyRuleConditionsL #-}

-- | 'authorizationServerPolicyRuleActions' Lens
authorizationServerPolicyRuleActionsL :: Lens_' AuthorizationServerPolicyRule (Maybe AuthorizationServerPolicyRuleActions)
authorizationServerPolicyRuleActionsL f AuthorizationServerPolicyRule{..} = (\authorizationServerPolicyRuleActions -> AuthorizationServerPolicyRule { authorizationServerPolicyRuleActions, ..} ) <$> f authorizationServerPolicyRuleActions
{-# INLINE authorizationServerPolicyRuleActionsL #-}



-- * AuthorizationServerPolicyRuleActions

-- | 'authorizationServerPolicyRuleActionsToken' Lens
authorizationServerPolicyRuleActionsTokenL :: Lens_' AuthorizationServerPolicyRuleActions (Maybe TokenAuthorizationServerPolicyRuleAction)
authorizationServerPolicyRuleActionsTokenL f AuthorizationServerPolicyRuleActions{..} = (\authorizationServerPolicyRuleActionsToken -> AuthorizationServerPolicyRuleActions { authorizationServerPolicyRuleActionsToken, ..} ) <$> f authorizationServerPolicyRuleActionsToken
{-# INLINE authorizationServerPolicyRuleActionsTokenL #-}



-- * AuthorizationServerPolicyRuleConditions

-- | 'authorizationServerPolicyRuleConditionsPeople' Lens
authorizationServerPolicyRuleConditionsPeopleL :: Lens_' AuthorizationServerPolicyRuleConditions (Maybe PolicyPeopleCondition)
authorizationServerPolicyRuleConditionsPeopleL f AuthorizationServerPolicyRuleConditions{..} = (\authorizationServerPolicyRuleConditionsPeople -> AuthorizationServerPolicyRuleConditions { authorizationServerPolicyRuleConditionsPeople, ..} ) <$> f authorizationServerPolicyRuleConditionsPeople
{-# INLINE authorizationServerPolicyRuleConditionsPeopleL #-}

-- | 'authorizationServerPolicyRuleConditionsClients' Lens
authorizationServerPolicyRuleConditionsClientsL :: Lens_' AuthorizationServerPolicyRuleConditions (Maybe ClientPolicyCondition)
authorizationServerPolicyRuleConditionsClientsL f AuthorizationServerPolicyRuleConditions{..} = (\authorizationServerPolicyRuleConditionsClients -> AuthorizationServerPolicyRuleConditions { authorizationServerPolicyRuleConditionsClients, ..} ) <$> f authorizationServerPolicyRuleConditionsClients
{-# INLINE authorizationServerPolicyRuleConditionsClientsL #-}

-- | 'authorizationServerPolicyRuleConditionsGrantTypes' Lens
authorizationServerPolicyRuleConditionsGrantTypesL :: Lens_' AuthorizationServerPolicyRuleConditions (Maybe GrantTypePolicyRuleCondition)
authorizationServerPolicyRuleConditionsGrantTypesL f AuthorizationServerPolicyRuleConditions{..} = (\authorizationServerPolicyRuleConditionsGrantTypes -> AuthorizationServerPolicyRuleConditions { authorizationServerPolicyRuleConditionsGrantTypes, ..} ) <$> f authorizationServerPolicyRuleConditionsGrantTypes
{-# INLINE authorizationServerPolicyRuleConditionsGrantTypesL #-}

-- | 'authorizationServerPolicyRuleConditionsScopes' Lens
authorizationServerPolicyRuleConditionsScopesL :: Lens_' AuthorizationServerPolicyRuleConditions (Maybe OAuth2ScopesMediationPolicyRuleCondition)
authorizationServerPolicyRuleConditionsScopesL f AuthorizationServerPolicyRuleConditions{..} = (\authorizationServerPolicyRuleConditionsScopes -> AuthorizationServerPolicyRuleConditions { authorizationServerPolicyRuleConditionsScopes, ..} ) <$> f authorizationServerPolicyRuleConditionsScopes
{-# INLINE authorizationServerPolicyRuleConditionsScopesL #-}



-- * AutoLoginApplication

-- | 'autoLoginApplicationCredentials' Lens
autoLoginApplicationCredentialsL :: Lens_' AutoLoginApplication (Maybe SchemeApplicationCredentials)
autoLoginApplicationCredentialsL f AutoLoginApplication{..} = (\autoLoginApplicationCredentials -> AutoLoginApplication { autoLoginApplicationCredentials, ..} ) <$> f autoLoginApplicationCredentials
{-# INLINE autoLoginApplicationCredentialsL #-}

-- | 'autoLoginApplicationSettings' Lens
autoLoginApplicationSettingsL :: Lens_' AutoLoginApplication (Maybe AutoLoginApplicationSettings)
autoLoginApplicationSettingsL f AutoLoginApplication{..} = (\autoLoginApplicationSettings -> AutoLoginApplication { autoLoginApplicationSettings, ..} ) <$> f autoLoginApplicationSettings
{-# INLINE autoLoginApplicationSettingsL #-}



-- * AutoLoginApplicationSettings

-- | 'autoLoginApplicationSettingsSignOn' Lens
autoLoginApplicationSettingsSignOnL :: Lens_' AutoLoginApplicationSettings (Maybe AutoLoginApplicationSettingsSignOn)
autoLoginApplicationSettingsSignOnL f AutoLoginApplicationSettings{..} = (\autoLoginApplicationSettingsSignOn -> AutoLoginApplicationSettings { autoLoginApplicationSettingsSignOn, ..} ) <$> f autoLoginApplicationSettingsSignOn
{-# INLINE autoLoginApplicationSettingsSignOnL #-}



-- * AutoLoginApplicationSettingsSignOn

-- | 'autoLoginApplicationSettingsSignOnLoginUrl' Lens
autoLoginApplicationSettingsSignOnLoginUrlL :: Lens_' AutoLoginApplicationSettingsSignOn (Maybe Text)
autoLoginApplicationSettingsSignOnLoginUrlL f AutoLoginApplicationSettingsSignOn{..} = (\autoLoginApplicationSettingsSignOnLoginUrl -> AutoLoginApplicationSettingsSignOn { autoLoginApplicationSettingsSignOnLoginUrl, ..} ) <$> f autoLoginApplicationSettingsSignOnLoginUrl
{-# INLINE autoLoginApplicationSettingsSignOnLoginUrlL #-}

-- | 'autoLoginApplicationSettingsSignOnRedirectUrl' Lens
autoLoginApplicationSettingsSignOnRedirectUrlL :: Lens_' AutoLoginApplicationSettingsSignOn (Maybe Text)
autoLoginApplicationSettingsSignOnRedirectUrlL f AutoLoginApplicationSettingsSignOn{..} = (\autoLoginApplicationSettingsSignOnRedirectUrl -> AutoLoginApplicationSettingsSignOn { autoLoginApplicationSettingsSignOnRedirectUrl, ..} ) <$> f autoLoginApplicationSettingsSignOnRedirectUrl
{-# INLINE autoLoginApplicationSettingsSignOnRedirectUrlL #-}



-- * BasicApplicationSettings

-- | 'basicApplicationSettingsApp' Lens
basicApplicationSettingsAppL :: Lens_' BasicApplicationSettings (Maybe BasicApplicationSettingsApplication)
basicApplicationSettingsAppL f BasicApplicationSettings{..} = (\basicApplicationSettingsApp -> BasicApplicationSettings { basicApplicationSettingsApp, ..} ) <$> f basicApplicationSettingsApp
{-# INLINE basicApplicationSettingsAppL #-}



-- * BasicApplicationSettingsApplication

-- | 'basicApplicationSettingsApplicationAuthUrl' Lens
basicApplicationSettingsApplicationAuthUrlL :: Lens_' BasicApplicationSettingsApplication (Maybe Text)
basicApplicationSettingsApplicationAuthUrlL f BasicApplicationSettingsApplication{..} = (\basicApplicationSettingsApplicationAuthUrl -> BasicApplicationSettingsApplication { basicApplicationSettingsApplicationAuthUrl, ..} ) <$> f basicApplicationSettingsApplicationAuthUrl
{-# INLINE basicApplicationSettingsApplicationAuthUrlL #-}

-- | 'basicApplicationSettingsApplicationUrl' Lens
basicApplicationSettingsApplicationUrlL :: Lens_' BasicApplicationSettingsApplication (Maybe Text)
basicApplicationSettingsApplicationUrlL f BasicApplicationSettingsApplication{..} = (\basicApplicationSettingsApplicationUrl -> BasicApplicationSettingsApplication { basicApplicationSettingsApplicationUrl, ..} ) <$> f basicApplicationSettingsApplicationUrl
{-# INLINE basicApplicationSettingsApplicationUrlL #-}



-- * BasicAuthApplication

-- | 'basicAuthApplicationCredentials' Lens
basicAuthApplicationCredentialsL :: Lens_' BasicAuthApplication (Maybe SchemeApplicationCredentials)
basicAuthApplicationCredentialsL f BasicAuthApplication{..} = (\basicAuthApplicationCredentials -> BasicAuthApplication { basicAuthApplicationCredentials, ..} ) <$> f basicAuthApplicationCredentials
{-# INLINE basicAuthApplicationCredentialsL #-}

-- | 'basicAuthApplicationName' Lens
basicAuthApplicationNameL :: Lens_' BasicAuthApplication (Maybe A.Value)
basicAuthApplicationNameL f BasicAuthApplication{..} = (\basicAuthApplicationName -> BasicAuthApplication { basicAuthApplicationName, ..} ) <$> f basicAuthApplicationName
{-# INLINE basicAuthApplicationNameL #-}

-- | 'basicAuthApplicationSettings' Lens
basicAuthApplicationSettingsL :: Lens_' BasicAuthApplication (Maybe BasicApplicationSettings)
basicAuthApplicationSettingsL f BasicAuthApplication{..} = (\basicAuthApplicationSettings -> BasicAuthApplication { basicAuthApplicationSettings, ..} ) <$> f basicAuthApplicationSettings
{-# INLINE basicAuthApplicationSettingsL #-}



-- * BeforeScheduledActionPolicyRuleCondition

-- | 'beforeScheduledActionPolicyRuleConditionDuration' Lens
beforeScheduledActionPolicyRuleConditionDurationL :: Lens_' BeforeScheduledActionPolicyRuleCondition (Maybe Duration)
beforeScheduledActionPolicyRuleConditionDurationL f BeforeScheduledActionPolicyRuleCondition{..} = (\beforeScheduledActionPolicyRuleConditionDuration -> BeforeScheduledActionPolicyRuleCondition { beforeScheduledActionPolicyRuleConditionDuration, ..} ) <$> f beforeScheduledActionPolicyRuleConditionDuration
{-# INLINE beforeScheduledActionPolicyRuleConditionDurationL #-}

-- | 'beforeScheduledActionPolicyRuleConditionLifecycleAction' Lens
beforeScheduledActionPolicyRuleConditionLifecycleActionL :: Lens_' BeforeScheduledActionPolicyRuleCondition (Maybe ScheduledUserLifecycleAction)
beforeScheduledActionPolicyRuleConditionLifecycleActionL f BeforeScheduledActionPolicyRuleCondition{..} = (\beforeScheduledActionPolicyRuleConditionLifecycleAction -> BeforeScheduledActionPolicyRuleCondition { beforeScheduledActionPolicyRuleConditionLifecycleAction, ..} ) <$> f beforeScheduledActionPolicyRuleConditionLifecycleAction
{-# INLINE beforeScheduledActionPolicyRuleConditionLifecycleActionL #-}



-- * BookmarkApplication

-- | 'bookmarkApplicationName' Lens
bookmarkApplicationNameL :: Lens_' BookmarkApplication (Maybe A.Value)
bookmarkApplicationNameL f BookmarkApplication{..} = (\bookmarkApplicationName -> BookmarkApplication { bookmarkApplicationName, ..} ) <$> f bookmarkApplicationName
{-# INLINE bookmarkApplicationNameL #-}

-- | 'bookmarkApplicationSettings' Lens
bookmarkApplicationSettingsL :: Lens_' BookmarkApplication (Maybe BookmarkApplicationSettings)
bookmarkApplicationSettingsL f BookmarkApplication{..} = (\bookmarkApplicationSettings -> BookmarkApplication { bookmarkApplicationSettings, ..} ) <$> f bookmarkApplicationSettings
{-# INLINE bookmarkApplicationSettingsL #-}



-- * BookmarkApplicationSettings

-- | 'bookmarkApplicationSettingsApp' Lens
bookmarkApplicationSettingsAppL :: Lens_' BookmarkApplicationSettings (Maybe BookmarkApplicationSettingsApplication)
bookmarkApplicationSettingsAppL f BookmarkApplicationSettings{..} = (\bookmarkApplicationSettingsApp -> BookmarkApplicationSettings { bookmarkApplicationSettingsApp, ..} ) <$> f bookmarkApplicationSettingsApp
{-# INLINE bookmarkApplicationSettingsAppL #-}



-- * BookmarkApplicationSettingsApplication

-- | 'bookmarkApplicationSettingsApplicationRequestIntegration' Lens
bookmarkApplicationSettingsApplicationRequestIntegrationL :: Lens_' BookmarkApplicationSettingsApplication (Maybe Bool)
bookmarkApplicationSettingsApplicationRequestIntegrationL f BookmarkApplicationSettingsApplication{..} = (\bookmarkApplicationSettingsApplicationRequestIntegration -> BookmarkApplicationSettingsApplication { bookmarkApplicationSettingsApplicationRequestIntegration, ..} ) <$> f bookmarkApplicationSettingsApplicationRequestIntegration
{-# INLINE bookmarkApplicationSettingsApplicationRequestIntegrationL #-}

-- | 'bookmarkApplicationSettingsApplicationUrl' Lens
bookmarkApplicationSettingsApplicationUrlL :: Lens_' BookmarkApplicationSettingsApplication (Maybe Text)
bookmarkApplicationSettingsApplicationUrlL f BookmarkApplicationSettingsApplication{..} = (\bookmarkApplicationSettingsApplicationUrl -> BookmarkApplicationSettingsApplication { bookmarkApplicationSettingsApplicationUrl, ..} ) <$> f bookmarkApplicationSettingsApplicationUrl
{-# INLINE bookmarkApplicationSettingsApplicationUrlL #-}



-- * Brand

-- | 'brandId' Lens
brandIdL :: Lens_' Brand (Maybe Text)
brandIdL f Brand{..} = (\brandId -> Brand { brandId, ..} ) <$> f brandId
{-# INLINE brandIdL #-}

-- | 'brandAgreeToCustomPrivacyPolicy' Lens
brandAgreeToCustomPrivacyPolicyL :: Lens_' Brand (Maybe Bool)
brandAgreeToCustomPrivacyPolicyL f Brand{..} = (\brandAgreeToCustomPrivacyPolicy -> Brand { brandAgreeToCustomPrivacyPolicy, ..} ) <$> f brandAgreeToCustomPrivacyPolicy
{-# INLINE brandAgreeToCustomPrivacyPolicyL #-}

-- | 'brandCustomPrivacyPolicyUrl' Lens
brandCustomPrivacyPolicyUrlL :: Lens_' Brand (Maybe Text)
brandCustomPrivacyPolicyUrlL f Brand{..} = (\brandCustomPrivacyPolicyUrl -> Brand { brandCustomPrivacyPolicyUrl, ..} ) <$> f brandCustomPrivacyPolicyUrl
{-# INLINE brandCustomPrivacyPolicyUrlL #-}

-- | 'brandRemovePoweredByOkta' Lens
brandRemovePoweredByOktaL :: Lens_' Brand (Maybe Bool)
brandRemovePoweredByOktaL f Brand{..} = (\brandRemovePoweredByOkta -> Brand { brandRemovePoweredByOkta, ..} ) <$> f brandRemovePoweredByOkta
{-# INLINE brandRemovePoweredByOktaL #-}

-- | 'brandLinks' Lens
brandLinksL :: Lens_' Brand (Maybe (Map.Map String A.Value))
brandLinksL f Brand{..} = (\brandLinks -> Brand { brandLinks, ..} ) <$> f brandLinks
{-# INLINE brandLinksL #-}



-- * BrowserPluginApplication

-- | 'browserPluginApplicationCredentials' Lens
browserPluginApplicationCredentialsL :: Lens_' BrowserPluginApplication (Maybe SchemeApplicationCredentials)
browserPluginApplicationCredentialsL f BrowserPluginApplication{..} = (\browserPluginApplicationCredentials -> BrowserPluginApplication { browserPluginApplicationCredentials, ..} ) <$> f browserPluginApplicationCredentials
{-# INLINE browserPluginApplicationCredentialsL #-}



-- * CallUserFactor

-- | 'callUserFactorProfile' Lens
callUserFactorProfileL :: Lens_' CallUserFactor (Maybe CallUserFactorProfile)
callUserFactorProfileL f CallUserFactor{..} = (\callUserFactorProfile -> CallUserFactor { callUserFactorProfile, ..} ) <$> f callUserFactorProfile
{-# INLINE callUserFactorProfileL #-}



-- * CallUserFactorProfile

-- | 'callUserFactorProfilePhoneExtension' Lens
callUserFactorProfilePhoneExtensionL :: Lens_' CallUserFactorProfile (Maybe Text)
callUserFactorProfilePhoneExtensionL f CallUserFactorProfile{..} = (\callUserFactorProfilePhoneExtension -> CallUserFactorProfile { callUserFactorProfilePhoneExtension, ..} ) <$> f callUserFactorProfilePhoneExtension
{-# INLINE callUserFactorProfilePhoneExtensionL #-}

-- | 'callUserFactorProfilePhoneNumber' Lens
callUserFactorProfilePhoneNumberL :: Lens_' CallUserFactorProfile (Maybe Text)
callUserFactorProfilePhoneNumberL f CallUserFactorProfile{..} = (\callUserFactorProfilePhoneNumber -> CallUserFactorProfile { callUserFactorProfilePhoneNumber, ..} ) <$> f callUserFactorProfilePhoneNumber
{-# INLINE callUserFactorProfilePhoneNumberL #-}



-- * CapabilitiesCreateObject

-- | 'capabilitiesCreateObjectLifecycleCreate' Lens
capabilitiesCreateObjectLifecycleCreateL :: Lens_' CapabilitiesCreateObject (Maybe LifecycleCreateSettingObject)
capabilitiesCreateObjectLifecycleCreateL f CapabilitiesCreateObject{..} = (\capabilitiesCreateObjectLifecycleCreate -> CapabilitiesCreateObject { capabilitiesCreateObjectLifecycleCreate, ..} ) <$> f capabilitiesCreateObjectLifecycleCreate
{-# INLINE capabilitiesCreateObjectLifecycleCreateL #-}



-- * CapabilitiesObject

-- | 'capabilitiesObjectCreate' Lens
capabilitiesObjectCreateL :: Lens_' CapabilitiesObject (Maybe CapabilitiesCreateObject)
capabilitiesObjectCreateL f CapabilitiesObject{..} = (\capabilitiesObjectCreate -> CapabilitiesObject { capabilitiesObjectCreate, ..} ) <$> f capabilitiesObjectCreate
{-# INLINE capabilitiesObjectCreateL #-}

-- | 'capabilitiesObjectUpdate' Lens
capabilitiesObjectUpdateL :: Lens_' CapabilitiesObject (Maybe CapabilitiesUpdateObject)
capabilitiesObjectUpdateL f CapabilitiesObject{..} = (\capabilitiesObjectUpdate -> CapabilitiesObject { capabilitiesObjectUpdate, ..} ) <$> f capabilitiesObjectUpdate
{-# INLINE capabilitiesObjectUpdateL #-}



-- * CapabilitiesUpdateObject

-- | 'capabilitiesUpdateObjectLifecycleDeactivate' Lens
capabilitiesUpdateObjectLifecycleDeactivateL :: Lens_' CapabilitiesUpdateObject (Maybe LifecycleDeactivateSettingObject)
capabilitiesUpdateObjectLifecycleDeactivateL f CapabilitiesUpdateObject{..} = (\capabilitiesUpdateObjectLifecycleDeactivate -> CapabilitiesUpdateObject { capabilitiesUpdateObjectLifecycleDeactivate, ..} ) <$> f capabilitiesUpdateObjectLifecycleDeactivate
{-# INLINE capabilitiesUpdateObjectLifecycleDeactivateL #-}

-- | 'capabilitiesUpdateObjectPassword' Lens
capabilitiesUpdateObjectPasswordL :: Lens_' CapabilitiesUpdateObject (Maybe PasswordSettingObject)
capabilitiesUpdateObjectPasswordL f CapabilitiesUpdateObject{..} = (\capabilitiesUpdateObjectPassword -> CapabilitiesUpdateObject { capabilitiesUpdateObjectPassword, ..} ) <$> f capabilitiesUpdateObjectPassword
{-# INLINE capabilitiesUpdateObjectPasswordL #-}

-- | 'capabilitiesUpdateObjectProfile' Lens
capabilitiesUpdateObjectProfileL :: Lens_' CapabilitiesUpdateObject (Maybe ProfileSettingObject)
capabilitiesUpdateObjectProfileL f CapabilitiesUpdateObject{..} = (\capabilitiesUpdateObjectProfile -> CapabilitiesUpdateObject { capabilitiesUpdateObjectProfile, ..} ) <$> f capabilitiesUpdateObjectProfile
{-# INLINE capabilitiesUpdateObjectProfileL #-}



-- * CatalogApplication

-- | 'catalogApplicationId' Lens
catalogApplicationIdL :: Lens_' CatalogApplication (Maybe Text)
catalogApplicationIdL f CatalogApplication{..} = (\catalogApplicationId -> CatalogApplication { catalogApplicationId, ..} ) <$> f catalogApplicationId
{-# INLINE catalogApplicationIdL #-}

-- | 'catalogApplicationName' Lens
catalogApplicationNameL :: Lens_' CatalogApplication (Maybe Text)
catalogApplicationNameL f CatalogApplication{..} = (\catalogApplicationName -> CatalogApplication { catalogApplicationName, ..} ) <$> f catalogApplicationName
{-# INLINE catalogApplicationNameL #-}

-- | 'catalogApplicationDisplayName' Lens
catalogApplicationDisplayNameL :: Lens_' CatalogApplication (Maybe Text)
catalogApplicationDisplayNameL f CatalogApplication{..} = (\catalogApplicationDisplayName -> CatalogApplication { catalogApplicationDisplayName, ..} ) <$> f catalogApplicationDisplayName
{-# INLINE catalogApplicationDisplayNameL #-}

-- | 'catalogApplicationDescription' Lens
catalogApplicationDescriptionL :: Lens_' CatalogApplication (Maybe Text)
catalogApplicationDescriptionL f CatalogApplication{..} = (\catalogApplicationDescription -> CatalogApplication { catalogApplicationDescription, ..} ) <$> f catalogApplicationDescription
{-# INLINE catalogApplicationDescriptionL #-}

-- | 'catalogApplicationStatus' Lens
catalogApplicationStatusL :: Lens_' CatalogApplication (Maybe CatalogApplicationStatus)
catalogApplicationStatusL f CatalogApplication{..} = (\catalogApplicationStatus -> CatalogApplication { catalogApplicationStatus, ..} ) <$> f catalogApplicationStatus
{-# INLINE catalogApplicationStatusL #-}

-- | 'catalogApplicationLastUpdated' Lens
catalogApplicationLastUpdatedL :: Lens_' CatalogApplication (Maybe DateTime)
catalogApplicationLastUpdatedL f CatalogApplication{..} = (\catalogApplicationLastUpdated -> CatalogApplication { catalogApplicationLastUpdated, ..} ) <$> f catalogApplicationLastUpdated
{-# INLINE catalogApplicationLastUpdatedL #-}

-- | 'catalogApplicationCategory' Lens
catalogApplicationCategoryL :: Lens_' CatalogApplication (Maybe Text)
catalogApplicationCategoryL f CatalogApplication{..} = (\catalogApplicationCategory -> CatalogApplication { catalogApplicationCategory, ..} ) <$> f catalogApplicationCategory
{-# INLINE catalogApplicationCategoryL #-}

-- | 'catalogApplicationVerificationStatus' Lens
catalogApplicationVerificationStatusL :: Lens_' CatalogApplication (Maybe Text)
catalogApplicationVerificationStatusL f CatalogApplication{..} = (\catalogApplicationVerificationStatus -> CatalogApplication { catalogApplicationVerificationStatus, ..} ) <$> f catalogApplicationVerificationStatus
{-# INLINE catalogApplicationVerificationStatusL #-}

-- | 'catalogApplicationWebsite' Lens
catalogApplicationWebsiteL :: Lens_' CatalogApplication (Maybe Text)
catalogApplicationWebsiteL f CatalogApplication{..} = (\catalogApplicationWebsite -> CatalogApplication { catalogApplicationWebsite, ..} ) <$> f catalogApplicationWebsite
{-# INLINE catalogApplicationWebsiteL #-}

-- | 'catalogApplicationSignOnModes' Lens
catalogApplicationSignOnModesL :: Lens_' CatalogApplication (Maybe [Text])
catalogApplicationSignOnModesL f CatalogApplication{..} = (\catalogApplicationSignOnModes -> CatalogApplication { catalogApplicationSignOnModes, ..} ) <$> f catalogApplicationSignOnModes
{-# INLINE catalogApplicationSignOnModesL #-}

-- | 'catalogApplicationFeatures' Lens
catalogApplicationFeaturesL :: Lens_' CatalogApplication (Maybe [Text])
catalogApplicationFeaturesL f CatalogApplication{..} = (\catalogApplicationFeatures -> CatalogApplication { catalogApplicationFeatures, ..} ) <$> f catalogApplicationFeatures
{-# INLINE catalogApplicationFeaturesL #-}

-- | 'catalogApplicationLinks' Lens
catalogApplicationLinksL :: Lens_' CatalogApplication (Maybe (Map.Map String A.Value))
catalogApplicationLinksL f CatalogApplication{..} = (\catalogApplicationLinks -> CatalogApplication { catalogApplicationLinks, ..} ) <$> f catalogApplicationLinks
{-# INLINE catalogApplicationLinksL #-}



-- * CatalogApplicationStatus



-- * ChangeEnum



-- * ChangePasswordRequest

-- | 'changePasswordRequestNewPassword' Lens
changePasswordRequestNewPasswordL :: Lens_' ChangePasswordRequest (Maybe PasswordCredential)
changePasswordRequestNewPasswordL f ChangePasswordRequest{..} = (\changePasswordRequestNewPassword -> ChangePasswordRequest { changePasswordRequestNewPassword, ..} ) <$> f changePasswordRequestNewPassword
{-# INLINE changePasswordRequestNewPasswordL #-}

-- | 'changePasswordRequestOldPassword' Lens
changePasswordRequestOldPasswordL :: Lens_' ChangePasswordRequest (Maybe PasswordCredential)
changePasswordRequestOldPasswordL f ChangePasswordRequest{..} = (\changePasswordRequestOldPassword -> ChangePasswordRequest { changePasswordRequestOldPassword, ..} ) <$> f changePasswordRequestOldPassword
{-# INLINE changePasswordRequestOldPasswordL #-}



-- * ChannelBinding

-- | 'channelBindingStyle' Lens
channelBindingStyleL :: Lens_' ChannelBinding (Maybe Text)
channelBindingStyleL f ChannelBinding{..} = (\channelBindingStyle -> ChannelBinding { channelBindingStyle, ..} ) <$> f channelBindingStyle
{-# INLINE channelBindingStyleL #-}

-- | 'channelBindingRequired' Lens
channelBindingRequiredL :: Lens_' ChannelBinding (Maybe RequiredEnum)
channelBindingRequiredL f ChannelBinding{..} = (\channelBindingRequired -> ChannelBinding { channelBindingRequired, ..} ) <$> f channelBindingRequired
{-# INLINE channelBindingRequiredL #-}



-- * ClientPolicyCondition

-- | 'clientPolicyConditionInclude' Lens
clientPolicyConditionIncludeL :: Lens_' ClientPolicyCondition (Maybe [Text])
clientPolicyConditionIncludeL f ClientPolicyCondition{..} = (\clientPolicyConditionInclude -> ClientPolicyCondition { clientPolicyConditionInclude, ..} ) <$> f clientPolicyConditionInclude
{-# INLINE clientPolicyConditionIncludeL #-}



-- * Compliance

-- | 'complianceFips' Lens
complianceFipsL :: Lens_' Compliance (Maybe FipsEnum)
complianceFipsL f Compliance{..} = (\complianceFips -> Compliance { complianceFips, ..} ) <$> f complianceFips
{-# INLINE complianceFipsL #-}



-- * ContextPolicyRuleCondition

-- | 'contextPolicyRuleConditionExpression' Lens
contextPolicyRuleConditionExpressionL :: Lens_' ContextPolicyRuleCondition (Maybe Text)
contextPolicyRuleConditionExpressionL f ContextPolicyRuleCondition{..} = (\contextPolicyRuleConditionExpression -> ContextPolicyRuleCondition { contextPolicyRuleConditionExpression, ..} ) <$> f contextPolicyRuleConditionExpression
{-# INLINE contextPolicyRuleConditionExpressionL #-}



-- * CreateSessionRequest

-- | 'createSessionRequestSessionToken' Lens
createSessionRequestSessionTokenL :: Lens_' CreateSessionRequest (Maybe Text)
createSessionRequestSessionTokenL f CreateSessionRequest{..} = (\createSessionRequestSessionToken -> CreateSessionRequest { createSessionRequestSessionToken, ..} ) <$> f createSessionRequestSessionToken
{-# INLINE createSessionRequestSessionTokenL #-}



-- * CreateUserRequest

-- | 'createUserRequestCredentials' Lens
createUserRequestCredentialsL :: Lens_' CreateUserRequest (Maybe UserCredentials)
createUserRequestCredentialsL f CreateUserRequest{..} = (\createUserRequestCredentials -> CreateUserRequest { createUserRequestCredentials, ..} ) <$> f createUserRequestCredentials
{-# INLINE createUserRequestCredentialsL #-}

-- | 'createUserRequestGroupIds' Lens
createUserRequestGroupIdsL :: Lens_' CreateUserRequest (Maybe [Text])
createUserRequestGroupIdsL f CreateUserRequest{..} = (\createUserRequestGroupIds -> CreateUserRequest { createUserRequestGroupIds, ..} ) <$> f createUserRequestGroupIds
{-# INLINE createUserRequestGroupIdsL #-}

-- | 'createUserRequestProfile' Lens
createUserRequestProfileL :: Lens_' CreateUserRequest (Maybe UserProfile)
createUserRequestProfileL f CreateUserRequest{..} = (\createUserRequestProfile -> CreateUserRequest { createUserRequestProfile, ..} ) <$> f createUserRequestProfile
{-# INLINE createUserRequestProfileL #-}

-- | 'createUserRequestType' Lens
createUserRequestTypeL :: Lens_' CreateUserRequest (Maybe UserType)
createUserRequestTypeL f CreateUserRequest{..} = (\createUserRequestType -> CreateUserRequest { createUserRequestType, ..} ) <$> f createUserRequestType
{-# INLINE createUserRequestTypeL #-}



-- * Csr

-- | 'csrCreated' Lens
csrCreatedL :: Lens_' Csr (Maybe DateTime)
csrCreatedL f Csr{..} = (\csrCreated -> Csr { csrCreated, ..} ) <$> f csrCreated
{-# INLINE csrCreatedL #-}

-- | 'csrCsr' Lens
csrCsrL :: Lens_' Csr (Maybe Text)
csrCsrL f Csr{..} = (\csrCsr -> Csr { csrCsr, ..} ) <$> f csrCsr
{-# INLINE csrCsrL #-}

-- | 'csrId' Lens
csrIdL :: Lens_' Csr (Maybe Text)
csrIdL f Csr{..} = (\csrId -> Csr { csrId, ..} ) <$> f csrId
{-# INLINE csrIdL #-}

-- | 'csrKty' Lens
csrKtyL :: Lens_' Csr (Maybe Text)
csrKtyL f Csr{..} = (\csrKty -> Csr { csrKty, ..} ) <$> f csrKty
{-# INLINE csrKtyL #-}



-- * CsrMetadata

-- | 'csrMetadataSubject' Lens
csrMetadataSubjectL :: Lens_' CsrMetadata (Maybe CsrMetadataSubject)
csrMetadataSubjectL f CsrMetadata{..} = (\csrMetadataSubject -> CsrMetadata { csrMetadataSubject, ..} ) <$> f csrMetadataSubject
{-# INLINE csrMetadataSubjectL #-}

-- | 'csrMetadataSubjectAltNames' Lens
csrMetadataSubjectAltNamesL :: Lens_' CsrMetadata (Maybe CsrMetadataSubjectAltNames)
csrMetadataSubjectAltNamesL f CsrMetadata{..} = (\csrMetadataSubjectAltNames -> CsrMetadata { csrMetadataSubjectAltNames, ..} ) <$> f csrMetadataSubjectAltNames
{-# INLINE csrMetadataSubjectAltNamesL #-}



-- * CsrMetadataSubject

-- | 'csrMetadataSubjectCommonName' Lens
csrMetadataSubjectCommonNameL :: Lens_' CsrMetadataSubject (Maybe Text)
csrMetadataSubjectCommonNameL f CsrMetadataSubject{..} = (\csrMetadataSubjectCommonName -> CsrMetadataSubject { csrMetadataSubjectCommonName, ..} ) <$> f csrMetadataSubjectCommonName
{-# INLINE csrMetadataSubjectCommonNameL #-}

-- | 'csrMetadataSubjectCountryName' Lens
csrMetadataSubjectCountryNameL :: Lens_' CsrMetadataSubject (Maybe Text)
csrMetadataSubjectCountryNameL f CsrMetadataSubject{..} = (\csrMetadataSubjectCountryName -> CsrMetadataSubject { csrMetadataSubjectCountryName, ..} ) <$> f csrMetadataSubjectCountryName
{-# INLINE csrMetadataSubjectCountryNameL #-}

-- | 'csrMetadataSubjectLocalityName' Lens
csrMetadataSubjectLocalityNameL :: Lens_' CsrMetadataSubject (Maybe Text)
csrMetadataSubjectLocalityNameL f CsrMetadataSubject{..} = (\csrMetadataSubjectLocalityName -> CsrMetadataSubject { csrMetadataSubjectLocalityName, ..} ) <$> f csrMetadataSubjectLocalityName
{-# INLINE csrMetadataSubjectLocalityNameL #-}

-- | 'csrMetadataSubjectOrganizationName' Lens
csrMetadataSubjectOrganizationNameL :: Lens_' CsrMetadataSubject (Maybe Text)
csrMetadataSubjectOrganizationNameL f CsrMetadataSubject{..} = (\csrMetadataSubjectOrganizationName -> CsrMetadataSubject { csrMetadataSubjectOrganizationName, ..} ) <$> f csrMetadataSubjectOrganizationName
{-# INLINE csrMetadataSubjectOrganizationNameL #-}

-- | 'csrMetadataSubjectOrganizationalUnitName' Lens
csrMetadataSubjectOrganizationalUnitNameL :: Lens_' CsrMetadataSubject (Maybe Text)
csrMetadataSubjectOrganizationalUnitNameL f CsrMetadataSubject{..} = (\csrMetadataSubjectOrganizationalUnitName -> CsrMetadataSubject { csrMetadataSubjectOrganizationalUnitName, ..} ) <$> f csrMetadataSubjectOrganizationalUnitName
{-# INLINE csrMetadataSubjectOrganizationalUnitNameL #-}

-- | 'csrMetadataSubjectStateOrProvinceName' Lens
csrMetadataSubjectStateOrProvinceNameL :: Lens_' CsrMetadataSubject (Maybe Text)
csrMetadataSubjectStateOrProvinceNameL f CsrMetadataSubject{..} = (\csrMetadataSubjectStateOrProvinceName -> CsrMetadataSubject { csrMetadataSubjectStateOrProvinceName, ..} ) <$> f csrMetadataSubjectStateOrProvinceName
{-# INLINE csrMetadataSubjectStateOrProvinceNameL #-}



-- * CsrMetadataSubjectAltNames

-- | 'csrMetadataSubjectAltNamesDnsNames' Lens
csrMetadataSubjectAltNamesDnsNamesL :: Lens_' CsrMetadataSubjectAltNames (Maybe [Text])
csrMetadataSubjectAltNamesDnsNamesL f CsrMetadataSubjectAltNames{..} = (\csrMetadataSubjectAltNamesDnsNames -> CsrMetadataSubjectAltNames { csrMetadataSubjectAltNamesDnsNames, ..} ) <$> f csrMetadataSubjectAltNamesDnsNames
{-# INLINE csrMetadataSubjectAltNamesDnsNamesL #-}



-- * CustomHotpUserFactor

-- | 'customHotpUserFactorFactorProfileId' Lens
customHotpUserFactorFactorProfileIdL :: Lens_' CustomHotpUserFactor (Maybe Text)
customHotpUserFactorFactorProfileIdL f CustomHotpUserFactor{..} = (\customHotpUserFactorFactorProfileId -> CustomHotpUserFactor { customHotpUserFactorFactorProfileId, ..} ) <$> f customHotpUserFactorFactorProfileId
{-# INLINE customHotpUserFactorFactorProfileIdL #-}

-- | 'customHotpUserFactorProfile' Lens
customHotpUserFactorProfileL :: Lens_' CustomHotpUserFactor (Maybe CustomHotpUserFactorProfile)
customHotpUserFactorProfileL f CustomHotpUserFactor{..} = (\customHotpUserFactorProfile -> CustomHotpUserFactor { customHotpUserFactorProfile, ..} ) <$> f customHotpUserFactorProfile
{-# INLINE customHotpUserFactorProfileL #-}



-- * CustomHotpUserFactorProfile

-- | 'customHotpUserFactorProfileSharedSecret' Lens
customHotpUserFactorProfileSharedSecretL :: Lens_' CustomHotpUserFactorProfile (Maybe Text)
customHotpUserFactorProfileSharedSecretL f CustomHotpUserFactorProfile{..} = (\customHotpUserFactorProfileSharedSecret -> CustomHotpUserFactorProfile { customHotpUserFactorProfileSharedSecret, ..} ) <$> f customHotpUserFactorProfileSharedSecret
{-# INLINE customHotpUserFactorProfileSharedSecretL #-}



-- * DNSRecord

-- | 'dNSRecordExpiration' Lens
dNSRecordExpirationL :: Lens_' DNSRecord (Maybe Text)
dNSRecordExpirationL f DNSRecord{..} = (\dNSRecordExpiration -> DNSRecord { dNSRecordExpiration, ..} ) <$> f dNSRecordExpiration
{-# INLINE dNSRecordExpirationL #-}

-- | 'dNSRecordFqdn' Lens
dNSRecordFqdnL :: Lens_' DNSRecord (Maybe Text)
dNSRecordFqdnL f DNSRecord{..} = (\dNSRecordFqdn -> DNSRecord { dNSRecordFqdn, ..} ) <$> f dNSRecordFqdn
{-# INLINE dNSRecordFqdnL #-}

-- | 'dNSRecordRecordType' Lens
dNSRecordRecordTypeL :: Lens_' DNSRecord (Maybe DNSRecordType)
dNSRecordRecordTypeL f DNSRecord{..} = (\dNSRecordRecordType -> DNSRecord { dNSRecordRecordType, ..} ) <$> f dNSRecordRecordType
{-# INLINE dNSRecordRecordTypeL #-}

-- | 'dNSRecordValues' Lens
dNSRecordValuesL :: Lens_' DNSRecord (Maybe [Text])
dNSRecordValuesL f DNSRecord{..} = (\dNSRecordValues -> DNSRecord { dNSRecordValues, ..} ) <$> f dNSRecordValues
{-# INLINE dNSRecordValuesL #-}



-- * DNSRecordType



-- * DeviceAccessPolicyRuleCondition

-- | 'deviceAccessPolicyRuleConditionRegistered' Lens
deviceAccessPolicyRuleConditionRegisteredL :: Lens_' DeviceAccessPolicyRuleCondition (Maybe Bool)
deviceAccessPolicyRuleConditionRegisteredL f DeviceAccessPolicyRuleCondition{..} = (\deviceAccessPolicyRuleConditionRegistered -> DeviceAccessPolicyRuleCondition { deviceAccessPolicyRuleConditionRegistered, ..} ) <$> f deviceAccessPolicyRuleConditionRegistered
{-# INLINE deviceAccessPolicyRuleConditionRegisteredL #-}

-- | 'deviceAccessPolicyRuleConditionManaged' Lens
deviceAccessPolicyRuleConditionManagedL :: Lens_' DeviceAccessPolicyRuleCondition (Maybe Bool)
deviceAccessPolicyRuleConditionManagedL f DeviceAccessPolicyRuleCondition{..} = (\deviceAccessPolicyRuleConditionManaged -> DeviceAccessPolicyRuleCondition { deviceAccessPolicyRuleConditionManaged, ..} ) <$> f deviceAccessPolicyRuleConditionManaged
{-# INLINE deviceAccessPolicyRuleConditionManagedL #-}



-- * DevicePolicyRuleCondition

-- | 'devicePolicyRuleConditionMigrated' Lens
devicePolicyRuleConditionMigratedL :: Lens_' DevicePolicyRuleCondition (Maybe Bool)
devicePolicyRuleConditionMigratedL f DevicePolicyRuleCondition{..} = (\devicePolicyRuleConditionMigrated -> DevicePolicyRuleCondition { devicePolicyRuleConditionMigrated, ..} ) <$> f devicePolicyRuleConditionMigrated
{-# INLINE devicePolicyRuleConditionMigratedL #-}

-- | 'devicePolicyRuleConditionPlatform' Lens
devicePolicyRuleConditionPlatformL :: Lens_' DevicePolicyRuleCondition (Maybe DevicePolicyRuleConditionPlatform)
devicePolicyRuleConditionPlatformL f DevicePolicyRuleCondition{..} = (\devicePolicyRuleConditionPlatform -> DevicePolicyRuleCondition { devicePolicyRuleConditionPlatform, ..} ) <$> f devicePolicyRuleConditionPlatform
{-# INLINE devicePolicyRuleConditionPlatformL #-}

-- | 'devicePolicyRuleConditionRooted' Lens
devicePolicyRuleConditionRootedL :: Lens_' DevicePolicyRuleCondition (Maybe Bool)
devicePolicyRuleConditionRootedL f DevicePolicyRuleCondition{..} = (\devicePolicyRuleConditionRooted -> DevicePolicyRuleCondition { devicePolicyRuleConditionRooted, ..} ) <$> f devicePolicyRuleConditionRooted
{-# INLINE devicePolicyRuleConditionRootedL #-}

-- | 'devicePolicyRuleConditionTrustLevel' Lens
devicePolicyRuleConditionTrustLevelL :: Lens_' DevicePolicyRuleCondition (Maybe E'TrustLevel)
devicePolicyRuleConditionTrustLevelL f DevicePolicyRuleCondition{..} = (\devicePolicyRuleConditionTrustLevel -> DevicePolicyRuleCondition { devicePolicyRuleConditionTrustLevel, ..} ) <$> f devicePolicyRuleConditionTrustLevel
{-# INLINE devicePolicyRuleConditionTrustLevelL #-}



-- * DevicePolicyRuleConditionPlatform

-- | 'devicePolicyRuleConditionPlatformSupportedMdmFrameworks' Lens
devicePolicyRuleConditionPlatformSupportedMdmFrameworksL :: Lens_' DevicePolicyRuleConditionPlatform (Maybe [E'SupportedMdmFrameworks])
devicePolicyRuleConditionPlatformSupportedMdmFrameworksL f DevicePolicyRuleConditionPlatform{..} = (\devicePolicyRuleConditionPlatformSupportedMdmFrameworks -> DevicePolicyRuleConditionPlatform { devicePolicyRuleConditionPlatformSupportedMdmFrameworks, ..} ) <$> f devicePolicyRuleConditionPlatformSupportedMdmFrameworks
{-# INLINE devicePolicyRuleConditionPlatformSupportedMdmFrameworksL #-}

-- | 'devicePolicyRuleConditionPlatformTypes' Lens
devicePolicyRuleConditionPlatformTypesL :: Lens_' DevicePolicyRuleConditionPlatform (Maybe [E'Types])
devicePolicyRuleConditionPlatformTypesL f DevicePolicyRuleConditionPlatform{..} = (\devicePolicyRuleConditionPlatformTypes -> DevicePolicyRuleConditionPlatform { devicePolicyRuleConditionPlatformTypes, ..} ) <$> f devicePolicyRuleConditionPlatformTypes
{-# INLINE devicePolicyRuleConditionPlatformTypesL #-}



-- * Domain

-- | 'domainId' Lens
domainIdL :: Lens_' Domain (Maybe Text)
domainIdL f Domain{..} = (\domainId -> Domain { domainId, ..} ) <$> f domainId
{-# INLINE domainIdL #-}

-- | 'domainCertificateSourceType' Lens
domainCertificateSourceTypeL :: Lens_' Domain (Maybe DomainCertificateSourceType)
domainCertificateSourceTypeL f Domain{..} = (\domainCertificateSourceType -> Domain { domainCertificateSourceType, ..} ) <$> f domainCertificateSourceType
{-# INLINE domainCertificateSourceTypeL #-}

-- | 'domainDomain' Lens
domainDomainL :: Lens_' Domain (Maybe Text)
domainDomainL f Domain{..} = (\domainDomain -> Domain { domainDomain, ..} ) <$> f domainDomain
{-# INLINE domainDomainL #-}

-- | 'domainDnsRecords' Lens
domainDnsRecordsL :: Lens_' Domain (Maybe [DNSRecord])
domainDnsRecordsL f Domain{..} = (\domainDnsRecords -> Domain { domainDnsRecords, ..} ) <$> f domainDnsRecords
{-# INLINE domainDnsRecordsL #-}

-- | 'domainPublicCertificate' Lens
domainPublicCertificateL :: Lens_' Domain (Maybe DomainCertificateMetadata)
domainPublicCertificateL f Domain{..} = (\domainPublicCertificate -> Domain { domainPublicCertificate, ..} ) <$> f domainPublicCertificate
{-# INLINE domainPublicCertificateL #-}

-- | 'domainValidationStatus' Lens
domainValidationStatusL :: Lens_' Domain (Maybe DomainValidationStatus)
domainValidationStatusL f Domain{..} = (\domainValidationStatus -> Domain { domainValidationStatus, ..} ) <$> f domainValidationStatus
{-# INLINE domainValidationStatusL #-}



-- * DomainCertificate

-- | 'domainCertificateCertificate' Lens
domainCertificateCertificateL :: Lens_' DomainCertificate (Maybe Text)
domainCertificateCertificateL f DomainCertificate{..} = (\domainCertificateCertificate -> DomainCertificate { domainCertificateCertificate, ..} ) <$> f domainCertificateCertificate
{-# INLINE domainCertificateCertificateL #-}

-- | 'domainCertificateCertificateChain' Lens
domainCertificateCertificateChainL :: Lens_' DomainCertificate (Maybe Text)
domainCertificateCertificateChainL f DomainCertificate{..} = (\domainCertificateCertificateChain -> DomainCertificate { domainCertificateCertificateChain, ..} ) <$> f domainCertificateCertificateChain
{-# INLINE domainCertificateCertificateChainL #-}

-- | 'domainCertificatePrivateKey' Lens
domainCertificatePrivateKeyL :: Lens_' DomainCertificate (Maybe Text)
domainCertificatePrivateKeyL f DomainCertificate{..} = (\domainCertificatePrivateKey -> DomainCertificate { domainCertificatePrivateKey, ..} ) <$> f domainCertificatePrivateKey
{-# INLINE domainCertificatePrivateKeyL #-}

-- | 'domainCertificateType' Lens
domainCertificateTypeL :: Lens_' DomainCertificate (Maybe DomainCertificateType)
domainCertificateTypeL f DomainCertificate{..} = (\domainCertificateType -> DomainCertificate { domainCertificateType, ..} ) <$> f domainCertificateType
{-# INLINE domainCertificateTypeL #-}



-- * DomainCertificateMetadata

-- | 'domainCertificateMetadataExpiration' Lens
domainCertificateMetadataExpirationL :: Lens_' DomainCertificateMetadata (Maybe Text)
domainCertificateMetadataExpirationL f DomainCertificateMetadata{..} = (\domainCertificateMetadataExpiration -> DomainCertificateMetadata { domainCertificateMetadataExpiration, ..} ) <$> f domainCertificateMetadataExpiration
{-# INLINE domainCertificateMetadataExpirationL #-}

-- | 'domainCertificateMetadataFingerprint' Lens
domainCertificateMetadataFingerprintL :: Lens_' DomainCertificateMetadata (Maybe Text)
domainCertificateMetadataFingerprintL f DomainCertificateMetadata{..} = (\domainCertificateMetadataFingerprint -> DomainCertificateMetadata { domainCertificateMetadataFingerprint, ..} ) <$> f domainCertificateMetadataFingerprint
{-# INLINE domainCertificateMetadataFingerprintL #-}

-- | 'domainCertificateMetadataSubject' Lens
domainCertificateMetadataSubjectL :: Lens_' DomainCertificateMetadata (Maybe Text)
domainCertificateMetadataSubjectL f DomainCertificateMetadata{..} = (\domainCertificateMetadataSubject -> DomainCertificateMetadata { domainCertificateMetadataSubject, ..} ) <$> f domainCertificateMetadataSubject
{-# INLINE domainCertificateMetadataSubjectL #-}



-- * DomainCertificateSourceType



-- * DomainCertificateType



-- * DomainListResponse

-- | 'domainListResponseDomains' Lens
domainListResponseDomainsL :: Lens_' DomainListResponse (Maybe [Domain])
domainListResponseDomainsL f DomainListResponse{..} = (\domainListResponseDomains -> DomainListResponse { domainListResponseDomains, ..} ) <$> f domainListResponseDomains
{-# INLINE domainListResponseDomainsL #-}



-- * DomainValidationStatus



-- * Duration

-- | 'durationNumber' Lens
durationNumberL :: Lens_' Duration (Maybe Int)
durationNumberL f Duration{..} = (\durationNumber -> Duration { durationNumber, ..} ) <$> f durationNumber
{-# INLINE durationNumberL #-}

-- | 'durationUnit' Lens
durationUnitL :: Lens_' Duration (Maybe Text)
durationUnitL f Duration{..} = (\durationUnit -> Duration { durationUnit, ..} ) <$> f durationUnit
{-# INLINE durationUnitL #-}



-- * EmailTemplate

-- | 'emailTemplateName' Lens
emailTemplateNameL :: Lens_' EmailTemplate (Maybe Text)
emailTemplateNameL f EmailTemplate{..} = (\emailTemplateName -> EmailTemplate { emailTemplateName, ..} ) <$> f emailTemplateName
{-# INLINE emailTemplateNameL #-}

-- | 'emailTemplateLinks' Lens
emailTemplateLinksL :: Lens_' EmailTemplate (Maybe (Map.Map String A.Value))
emailTemplateLinksL f EmailTemplate{..} = (\emailTemplateLinks -> EmailTemplate { emailTemplateLinks, ..} ) <$> f emailTemplateLinks
{-# INLINE emailTemplateLinksL #-}



-- * EmailTemplateContent

-- | 'emailTemplateContentBody' Lens
emailTemplateContentBodyL :: Lens_' EmailTemplateContent (Maybe Text)
emailTemplateContentBodyL f EmailTemplateContent{..} = (\emailTemplateContentBody -> EmailTemplateContent { emailTemplateContentBody, ..} ) <$> f emailTemplateContentBody
{-# INLINE emailTemplateContentBodyL #-}

-- | 'emailTemplateContentFromAddress' Lens
emailTemplateContentFromAddressL :: Lens_' EmailTemplateContent (Maybe Text)
emailTemplateContentFromAddressL f EmailTemplateContent{..} = (\emailTemplateContentFromAddress -> EmailTemplateContent { emailTemplateContentFromAddress, ..} ) <$> f emailTemplateContentFromAddress
{-# INLINE emailTemplateContentFromAddressL #-}

-- | 'emailTemplateContentFromName' Lens
emailTemplateContentFromNameL :: Lens_' EmailTemplateContent (Maybe Text)
emailTemplateContentFromNameL f EmailTemplateContent{..} = (\emailTemplateContentFromName -> EmailTemplateContent { emailTemplateContentFromName, ..} ) <$> f emailTemplateContentFromName
{-# INLINE emailTemplateContentFromNameL #-}

-- | 'emailTemplateContentSubject' Lens
emailTemplateContentSubjectL :: Lens_' EmailTemplateContent (Maybe Text)
emailTemplateContentSubjectL f EmailTemplateContent{..} = (\emailTemplateContentSubject -> EmailTemplateContent { emailTemplateContentSubject, ..} ) <$> f emailTemplateContentSubject
{-# INLINE emailTemplateContentSubjectL #-}

-- | 'emailTemplateContentLinks' Lens
emailTemplateContentLinksL :: Lens_' EmailTemplateContent (Maybe (Map.Map String A.Value))
emailTemplateContentLinksL f EmailTemplateContent{..} = (\emailTemplateContentLinks -> EmailTemplateContent { emailTemplateContentLinks, ..} ) <$> f emailTemplateContentLinks
{-# INLINE emailTemplateContentLinksL #-}



-- * EmailTemplateCustomization

-- | 'emailTemplateCustomizationBody' Lens
emailTemplateCustomizationBodyL :: Lens_' EmailTemplateCustomization (Maybe Text)
emailTemplateCustomizationBodyL f EmailTemplateCustomization{..} = (\emailTemplateCustomizationBody -> EmailTemplateCustomization { emailTemplateCustomizationBody, ..} ) <$> f emailTemplateCustomizationBody
{-# INLINE emailTemplateCustomizationBodyL #-}

-- | 'emailTemplateCustomizationLanguage' Lens
emailTemplateCustomizationLanguageL :: Lens_' EmailTemplateCustomization (Maybe Text)
emailTemplateCustomizationLanguageL f EmailTemplateCustomization{..} = (\emailTemplateCustomizationLanguage -> EmailTemplateCustomization { emailTemplateCustomizationLanguage, ..} ) <$> f emailTemplateCustomizationLanguage
{-# INLINE emailTemplateCustomizationLanguageL #-}

-- | 'emailTemplateCustomizationSubject' Lens
emailTemplateCustomizationSubjectL :: Lens_' EmailTemplateCustomization (Maybe Text)
emailTemplateCustomizationSubjectL f EmailTemplateCustomization{..} = (\emailTemplateCustomizationSubject -> EmailTemplateCustomization { emailTemplateCustomizationSubject, ..} ) <$> f emailTemplateCustomizationSubject
{-# INLINE emailTemplateCustomizationSubjectL #-}

-- | 'emailTemplateCustomizationId' Lens
emailTemplateCustomizationIdL :: Lens_' EmailTemplateCustomization (Maybe Text)
emailTemplateCustomizationIdL f EmailTemplateCustomization{..} = (\emailTemplateCustomizationId -> EmailTemplateCustomization { emailTemplateCustomizationId, ..} ) <$> f emailTemplateCustomizationId
{-# INLINE emailTemplateCustomizationIdL #-}

-- | 'emailTemplateCustomizationCreated' Lens
emailTemplateCustomizationCreatedL :: Lens_' EmailTemplateCustomization (Maybe DateTime)
emailTemplateCustomizationCreatedL f EmailTemplateCustomization{..} = (\emailTemplateCustomizationCreated -> EmailTemplateCustomization { emailTemplateCustomizationCreated, ..} ) <$> f emailTemplateCustomizationCreated
{-# INLINE emailTemplateCustomizationCreatedL #-}

-- | 'emailTemplateCustomizationIsDefault' Lens
emailTemplateCustomizationIsDefaultL :: Lens_' EmailTemplateCustomization (Maybe Bool)
emailTemplateCustomizationIsDefaultL f EmailTemplateCustomization{..} = (\emailTemplateCustomizationIsDefault -> EmailTemplateCustomization { emailTemplateCustomizationIsDefault, ..} ) <$> f emailTemplateCustomizationIsDefault
{-# INLINE emailTemplateCustomizationIsDefaultL #-}

-- | 'emailTemplateCustomizationLastUpdated' Lens
emailTemplateCustomizationLastUpdatedL :: Lens_' EmailTemplateCustomization (Maybe DateTime)
emailTemplateCustomizationLastUpdatedL f EmailTemplateCustomization{..} = (\emailTemplateCustomizationLastUpdated -> EmailTemplateCustomization { emailTemplateCustomizationLastUpdated, ..} ) <$> f emailTemplateCustomizationLastUpdated
{-# INLINE emailTemplateCustomizationLastUpdatedL #-}

-- | 'emailTemplateCustomizationLinks' Lens
emailTemplateCustomizationLinksL :: Lens_' EmailTemplateCustomization (Maybe (Map.Map String A.Value))
emailTemplateCustomizationLinksL f EmailTemplateCustomization{..} = (\emailTemplateCustomizationLinks -> EmailTemplateCustomization { emailTemplateCustomizationLinks, ..} ) <$> f emailTemplateCustomizationLinks
{-# INLINE emailTemplateCustomizationLinksL #-}



-- * EmailTemplateCustomizationRequest

-- | 'emailTemplateCustomizationRequestBody' Lens
emailTemplateCustomizationRequestBodyL :: Lens_' EmailTemplateCustomizationRequest (Maybe Text)
emailTemplateCustomizationRequestBodyL f EmailTemplateCustomizationRequest{..} = (\emailTemplateCustomizationRequestBody -> EmailTemplateCustomizationRequest { emailTemplateCustomizationRequestBody, ..} ) <$> f emailTemplateCustomizationRequestBody
{-# INLINE emailTemplateCustomizationRequestBodyL #-}

-- | 'emailTemplateCustomizationRequestLanguage' Lens
emailTemplateCustomizationRequestLanguageL :: Lens_' EmailTemplateCustomizationRequest (Maybe Text)
emailTemplateCustomizationRequestLanguageL f EmailTemplateCustomizationRequest{..} = (\emailTemplateCustomizationRequestLanguage -> EmailTemplateCustomizationRequest { emailTemplateCustomizationRequestLanguage, ..} ) <$> f emailTemplateCustomizationRequestLanguage
{-# INLINE emailTemplateCustomizationRequestLanguageL #-}

-- | 'emailTemplateCustomizationRequestSubject' Lens
emailTemplateCustomizationRequestSubjectL :: Lens_' EmailTemplateCustomizationRequest (Maybe Text)
emailTemplateCustomizationRequestSubjectL f EmailTemplateCustomizationRequest{..} = (\emailTemplateCustomizationRequestSubject -> EmailTemplateCustomizationRequest { emailTemplateCustomizationRequestSubject, ..} ) <$> f emailTemplateCustomizationRequestSubject
{-# INLINE emailTemplateCustomizationRequestSubjectL #-}

-- | 'emailTemplateCustomizationRequestIsDefault' Lens
emailTemplateCustomizationRequestIsDefaultL :: Lens_' EmailTemplateCustomizationRequest (Maybe Bool)
emailTemplateCustomizationRequestIsDefaultL f EmailTemplateCustomizationRequest{..} = (\emailTemplateCustomizationRequestIsDefault -> EmailTemplateCustomizationRequest { emailTemplateCustomizationRequestIsDefault, ..} ) <$> f emailTemplateCustomizationRequestIsDefault
{-# INLINE emailTemplateCustomizationRequestIsDefaultL #-}



-- * EmailTemplateTestRequest

-- | 'emailTemplateTestRequestCustomizationId' Lens
emailTemplateTestRequestCustomizationIdL :: Lens_' EmailTemplateTestRequest (Maybe Text)
emailTemplateTestRequestCustomizationIdL f EmailTemplateTestRequest{..} = (\emailTemplateTestRequestCustomizationId -> EmailTemplateTestRequest { emailTemplateTestRequestCustomizationId, ..} ) <$> f emailTemplateTestRequestCustomizationId
{-# INLINE emailTemplateTestRequestCustomizationIdL #-}



-- * EmailTemplateTouchPointVariant



-- * EmailUserFactor

-- | 'emailUserFactorProfile' Lens
emailUserFactorProfileL :: Lens_' EmailUserFactor (Maybe EmailUserFactorProfile)
emailUserFactorProfileL f EmailUserFactor{..} = (\emailUserFactorProfile -> EmailUserFactor { emailUserFactorProfile, ..} ) <$> f emailUserFactorProfile
{-# INLINE emailUserFactorProfileL #-}



-- * EmailUserFactorProfile

-- | 'emailUserFactorProfileEmail' Lens
emailUserFactorProfileEmailL :: Lens_' EmailUserFactorProfile (Maybe Text)
emailUserFactorProfileEmailL f EmailUserFactorProfile{..} = (\emailUserFactorProfileEmail -> EmailUserFactorProfile { emailUserFactorProfileEmail, ..} ) <$> f emailUserFactorProfileEmail
{-# INLINE emailUserFactorProfileEmailL #-}



-- * EnabledStatus



-- * EndUserDashboardTouchPointVariant



-- * ErrorPageTouchPointVariant



-- * EventHook

-- | 'eventHookLinks' Lens
eventHookLinksL :: Lens_' EventHook (Maybe (Map.Map String A.Value))
eventHookLinksL f EventHook{..} = (\eventHookLinks -> EventHook { eventHookLinks, ..} ) <$> f eventHookLinks
{-# INLINE eventHookLinksL #-}

-- | 'eventHookChannel' Lens
eventHookChannelL :: Lens_' EventHook (Maybe EventHookChannel)
eventHookChannelL f EventHook{..} = (\eventHookChannel -> EventHook { eventHookChannel, ..} ) <$> f eventHookChannel
{-# INLINE eventHookChannelL #-}

-- | 'eventHookCreated' Lens
eventHookCreatedL :: Lens_' EventHook (Maybe DateTime)
eventHookCreatedL f EventHook{..} = (\eventHookCreated -> EventHook { eventHookCreated, ..} ) <$> f eventHookCreated
{-# INLINE eventHookCreatedL #-}

-- | 'eventHookCreatedBy' Lens
eventHookCreatedByL :: Lens_' EventHook (Maybe Text)
eventHookCreatedByL f EventHook{..} = (\eventHookCreatedBy -> EventHook { eventHookCreatedBy, ..} ) <$> f eventHookCreatedBy
{-# INLINE eventHookCreatedByL #-}

-- | 'eventHookEvents' Lens
eventHookEventsL :: Lens_' EventHook (Maybe EventSubscriptions)
eventHookEventsL f EventHook{..} = (\eventHookEvents -> EventHook { eventHookEvents, ..} ) <$> f eventHookEvents
{-# INLINE eventHookEventsL #-}

-- | 'eventHookId' Lens
eventHookIdL :: Lens_' EventHook (Maybe Text)
eventHookIdL f EventHook{..} = (\eventHookId -> EventHook { eventHookId, ..} ) <$> f eventHookId
{-# INLINE eventHookIdL #-}

-- | 'eventHookLastUpdated' Lens
eventHookLastUpdatedL :: Lens_' EventHook (Maybe DateTime)
eventHookLastUpdatedL f EventHook{..} = (\eventHookLastUpdated -> EventHook { eventHookLastUpdated, ..} ) <$> f eventHookLastUpdated
{-# INLINE eventHookLastUpdatedL #-}

-- | 'eventHookName' Lens
eventHookNameL :: Lens_' EventHook (Maybe Text)
eventHookNameL f EventHook{..} = (\eventHookName -> EventHook { eventHookName, ..} ) <$> f eventHookName
{-# INLINE eventHookNameL #-}

-- | 'eventHookStatus' Lens
eventHookStatusL :: Lens_' EventHook (Maybe E'Status2)
eventHookStatusL f EventHook{..} = (\eventHookStatus -> EventHook { eventHookStatus, ..} ) <$> f eventHookStatus
{-# INLINE eventHookStatusL #-}

-- | 'eventHookVerificationStatus' Lens
eventHookVerificationStatusL :: Lens_' EventHook (Maybe E'VerificationStatus)
eventHookVerificationStatusL f EventHook{..} = (\eventHookVerificationStatus -> EventHook { eventHookVerificationStatus, ..} ) <$> f eventHookVerificationStatus
{-# INLINE eventHookVerificationStatusL #-}



-- * EventHookChannel

-- | 'eventHookChannelConfig' Lens
eventHookChannelConfigL :: Lens_' EventHookChannel (Maybe EventHookChannelConfig)
eventHookChannelConfigL f EventHookChannel{..} = (\eventHookChannelConfig -> EventHookChannel { eventHookChannelConfig, ..} ) <$> f eventHookChannelConfig
{-# INLINE eventHookChannelConfigL #-}

-- | 'eventHookChannelType' Lens
eventHookChannelTypeL :: Lens_' EventHookChannel (Maybe E'Type2)
eventHookChannelTypeL f EventHookChannel{..} = (\eventHookChannelType -> EventHookChannel { eventHookChannelType, ..} ) <$> f eventHookChannelType
{-# INLINE eventHookChannelTypeL #-}

-- | 'eventHookChannelVersion' Lens
eventHookChannelVersionL :: Lens_' EventHookChannel (Maybe Text)
eventHookChannelVersionL f EventHookChannel{..} = (\eventHookChannelVersion -> EventHookChannel { eventHookChannelVersion, ..} ) <$> f eventHookChannelVersion
{-# INLINE eventHookChannelVersionL #-}



-- * EventHookChannelConfig

-- | 'eventHookChannelConfigAuthScheme' Lens
eventHookChannelConfigAuthSchemeL :: Lens_' EventHookChannelConfig (Maybe EventHookChannelConfigAuthScheme)
eventHookChannelConfigAuthSchemeL f EventHookChannelConfig{..} = (\eventHookChannelConfigAuthScheme -> EventHookChannelConfig { eventHookChannelConfigAuthScheme, ..} ) <$> f eventHookChannelConfigAuthScheme
{-# INLINE eventHookChannelConfigAuthSchemeL #-}

-- | 'eventHookChannelConfigHeaders' Lens
eventHookChannelConfigHeadersL :: Lens_' EventHookChannelConfig (Maybe [EventHookChannelConfigHeader])
eventHookChannelConfigHeadersL f EventHookChannelConfig{..} = (\eventHookChannelConfigHeaders -> EventHookChannelConfig { eventHookChannelConfigHeaders, ..} ) <$> f eventHookChannelConfigHeaders
{-# INLINE eventHookChannelConfigHeadersL #-}

-- | 'eventHookChannelConfigUri' Lens
eventHookChannelConfigUriL :: Lens_' EventHookChannelConfig (Maybe Text)
eventHookChannelConfigUriL f EventHookChannelConfig{..} = (\eventHookChannelConfigUri -> EventHookChannelConfig { eventHookChannelConfigUri, ..} ) <$> f eventHookChannelConfigUri
{-# INLINE eventHookChannelConfigUriL #-}



-- * EventHookChannelConfigAuthScheme

-- | 'eventHookChannelConfigAuthSchemeKey' Lens
eventHookChannelConfigAuthSchemeKeyL :: Lens_' EventHookChannelConfigAuthScheme (Maybe Text)
eventHookChannelConfigAuthSchemeKeyL f EventHookChannelConfigAuthScheme{..} = (\eventHookChannelConfigAuthSchemeKey -> EventHookChannelConfigAuthScheme { eventHookChannelConfigAuthSchemeKey, ..} ) <$> f eventHookChannelConfigAuthSchemeKey
{-# INLINE eventHookChannelConfigAuthSchemeKeyL #-}

-- | 'eventHookChannelConfigAuthSchemeType' Lens
eventHookChannelConfigAuthSchemeTypeL :: Lens_' EventHookChannelConfigAuthScheme (Maybe EventHookChannelConfigAuthSchemeType)
eventHookChannelConfigAuthSchemeTypeL f EventHookChannelConfigAuthScheme{..} = (\eventHookChannelConfigAuthSchemeType -> EventHookChannelConfigAuthScheme { eventHookChannelConfigAuthSchemeType, ..} ) <$> f eventHookChannelConfigAuthSchemeType
{-# INLINE eventHookChannelConfigAuthSchemeTypeL #-}

-- | 'eventHookChannelConfigAuthSchemeValue' Lens
eventHookChannelConfigAuthSchemeValueL :: Lens_' EventHookChannelConfigAuthScheme (Maybe Text)
eventHookChannelConfigAuthSchemeValueL f EventHookChannelConfigAuthScheme{..} = (\eventHookChannelConfigAuthSchemeValue -> EventHookChannelConfigAuthScheme { eventHookChannelConfigAuthSchemeValue, ..} ) <$> f eventHookChannelConfigAuthSchemeValue
{-# INLINE eventHookChannelConfigAuthSchemeValueL #-}



-- * EventHookChannelConfigAuthSchemeType



-- * EventHookChannelConfigHeader

-- | 'eventHookChannelConfigHeaderKey' Lens
eventHookChannelConfigHeaderKeyL :: Lens_' EventHookChannelConfigHeader (Maybe Text)
eventHookChannelConfigHeaderKeyL f EventHookChannelConfigHeader{..} = (\eventHookChannelConfigHeaderKey -> EventHookChannelConfigHeader { eventHookChannelConfigHeaderKey, ..} ) <$> f eventHookChannelConfigHeaderKey
{-# INLINE eventHookChannelConfigHeaderKeyL #-}

-- | 'eventHookChannelConfigHeaderValue' Lens
eventHookChannelConfigHeaderValueL :: Lens_' EventHookChannelConfigHeader (Maybe Text)
eventHookChannelConfigHeaderValueL f EventHookChannelConfigHeader{..} = (\eventHookChannelConfigHeaderValue -> EventHookChannelConfigHeader { eventHookChannelConfigHeaderValue, ..} ) <$> f eventHookChannelConfigHeaderValue
{-# INLINE eventHookChannelConfigHeaderValueL #-}



-- * EventSubscriptions

-- | 'eventSubscriptionsItems' Lens
eventSubscriptionsItemsL :: Lens_' EventSubscriptions (Maybe [Text])
eventSubscriptionsItemsL f EventSubscriptions{..} = (\eventSubscriptionsItems -> EventSubscriptions { eventSubscriptionsItems, ..} ) <$> f eventSubscriptionsItems
{-# INLINE eventSubscriptionsItemsL #-}

-- | 'eventSubscriptionsType' Lens
eventSubscriptionsTypeL :: Lens_' EventSubscriptions (Maybe E'Type3)
eventSubscriptionsTypeL f EventSubscriptions{..} = (\eventSubscriptionsType -> EventSubscriptions { eventSubscriptionsType, ..} ) <$> f eventSubscriptionsType
{-# INLINE eventSubscriptionsTypeL #-}



-- * FactorProvider



-- * FactorResultType



-- * FactorStatus



-- * FactorType



-- * Feature

-- | 'featureLinks' Lens
featureLinksL :: Lens_' Feature (Maybe (Map.Map String A.Value))
featureLinksL f Feature{..} = (\featureLinks -> Feature { featureLinks, ..} ) <$> f featureLinks
{-# INLINE featureLinksL #-}

-- | 'featureDescription' Lens
featureDescriptionL :: Lens_' Feature (Maybe Text)
featureDescriptionL f Feature{..} = (\featureDescription -> Feature { featureDescription, ..} ) <$> f featureDescription
{-# INLINE featureDescriptionL #-}

-- | 'featureId' Lens
featureIdL :: Lens_' Feature (Maybe Text)
featureIdL f Feature{..} = (\featureId -> Feature { featureId, ..} ) <$> f featureId
{-# INLINE featureIdL #-}

-- | 'featureName' Lens
featureNameL :: Lens_' Feature (Maybe Text)
featureNameL f Feature{..} = (\featureName -> Feature { featureName, ..} ) <$> f featureName
{-# INLINE featureNameL #-}

-- | 'featureStage' Lens
featureStageL :: Lens_' Feature (Maybe FeatureStage)
featureStageL f Feature{..} = (\featureStage -> Feature { featureStage, ..} ) <$> f featureStage
{-# INLINE featureStageL #-}

-- | 'featureStatus' Lens
featureStatusL :: Lens_' Feature (Maybe EnabledStatus)
featureStatusL f Feature{..} = (\featureStatus -> Feature { featureStatus, ..} ) <$> f featureStatus
{-# INLINE featureStatusL #-}

-- | 'featureType' Lens
featureTypeL :: Lens_' Feature (Maybe FeatureType)
featureTypeL f Feature{..} = (\featureType -> Feature { featureType, ..} ) <$> f featureType
{-# INLINE featureTypeL #-}



-- * FeatureStage

-- | 'featureStageState' Lens
featureStageStateL :: Lens_' FeatureStage (Maybe FeatureStageState)
featureStageStateL f FeatureStage{..} = (\featureStageState -> FeatureStage { featureStageState, ..} ) <$> f featureStageState
{-# INLINE featureStageStateL #-}

-- | 'featureStageValue' Lens
featureStageValueL :: Lens_' FeatureStage (Maybe FeatureStageValue)
featureStageValueL f FeatureStage{..} = (\featureStageValue -> FeatureStage { featureStageValue, ..} ) <$> f featureStageValue
{-# INLINE featureStageValueL #-}



-- * FeatureStageState



-- * FeatureStageValue



-- * FeatureType



-- * FipsEnum



-- * ForgotPasswordResponse

-- | 'forgotPasswordResponseResetPasswordUrl' Lens
forgotPasswordResponseResetPasswordUrlL :: Lens_' ForgotPasswordResponse (Maybe Text)
forgotPasswordResponseResetPasswordUrlL f ForgotPasswordResponse{..} = (\forgotPasswordResponseResetPasswordUrl -> ForgotPasswordResponse { forgotPasswordResponseResetPasswordUrl, ..} ) <$> f forgotPasswordResponseResetPasswordUrl
{-# INLINE forgotPasswordResponseResetPasswordUrlL #-}



-- * GrantTypePolicyRuleCondition

-- | 'grantTypePolicyRuleConditionInclude' Lens
grantTypePolicyRuleConditionIncludeL :: Lens_' GrantTypePolicyRuleCondition (Maybe [Text])
grantTypePolicyRuleConditionIncludeL f GrantTypePolicyRuleCondition{..} = (\grantTypePolicyRuleConditionInclude -> GrantTypePolicyRuleCondition { grantTypePolicyRuleConditionInclude, ..} ) <$> f grantTypePolicyRuleConditionInclude
{-# INLINE grantTypePolicyRuleConditionIncludeL #-}



-- * Group

-- | 'groupEmbedded' Lens
groupEmbeddedL :: Lens_' Group (Maybe (Map.Map String A.Value))
groupEmbeddedL f Group{..} = (\groupEmbedded -> Group { groupEmbedded, ..} ) <$> f groupEmbedded
{-# INLINE groupEmbeddedL #-}

-- | 'groupLinks' Lens
groupLinksL :: Lens_' Group (Maybe (Map.Map String A.Value))
groupLinksL f Group{..} = (\groupLinks -> Group { groupLinks, ..} ) <$> f groupLinks
{-# INLINE groupLinksL #-}

-- | 'groupCreated' Lens
groupCreatedL :: Lens_' Group (Maybe DateTime)
groupCreatedL f Group{..} = (\groupCreated -> Group { groupCreated, ..} ) <$> f groupCreated
{-# INLINE groupCreatedL #-}

-- | 'groupId' Lens
groupIdL :: Lens_' Group (Maybe Text)
groupIdL f Group{..} = (\groupId -> Group { groupId, ..} ) <$> f groupId
{-# INLINE groupIdL #-}

-- | 'groupLastMembershipUpdated' Lens
groupLastMembershipUpdatedL :: Lens_' Group (Maybe DateTime)
groupLastMembershipUpdatedL f Group{..} = (\groupLastMembershipUpdated -> Group { groupLastMembershipUpdated, ..} ) <$> f groupLastMembershipUpdated
{-# INLINE groupLastMembershipUpdatedL #-}

-- | 'groupLastUpdated' Lens
groupLastUpdatedL :: Lens_' Group (Maybe DateTime)
groupLastUpdatedL f Group{..} = (\groupLastUpdated -> Group { groupLastUpdated, ..} ) <$> f groupLastUpdated
{-# INLINE groupLastUpdatedL #-}

-- | 'groupObjectClass' Lens
groupObjectClassL :: Lens_' Group (Maybe [Text])
groupObjectClassL f Group{..} = (\groupObjectClass -> Group { groupObjectClass, ..} ) <$> f groupObjectClass
{-# INLINE groupObjectClassL #-}

-- | 'groupProfile' Lens
groupProfileL :: Lens_' Group (Maybe GroupProfile)
groupProfileL f Group{..} = (\groupProfile -> Group { groupProfile, ..} ) <$> f groupProfile
{-# INLINE groupProfileL #-}

-- | 'groupType' Lens
groupTypeL :: Lens_' Group (Maybe GroupType)
groupTypeL f Group{..} = (\groupType -> Group { groupType, ..} ) <$> f groupType
{-# INLINE groupTypeL #-}



-- * GroupCondition

-- | 'groupConditionExclude' Lens
groupConditionExcludeL :: Lens_' GroupCondition (Maybe [Text])
groupConditionExcludeL f GroupCondition{..} = (\groupConditionExclude -> GroupCondition { groupConditionExclude, ..} ) <$> f groupConditionExclude
{-# INLINE groupConditionExcludeL #-}

-- | 'groupConditionInclude' Lens
groupConditionIncludeL :: Lens_' GroupCondition (Maybe [Text])
groupConditionIncludeL f GroupCondition{..} = (\groupConditionInclude -> GroupCondition { groupConditionInclude, ..} ) <$> f groupConditionInclude
{-# INLINE groupConditionIncludeL #-}



-- * GroupPolicyRuleCondition

-- | 'groupPolicyRuleConditionExclude' Lens
groupPolicyRuleConditionExcludeL :: Lens_' GroupPolicyRuleCondition (Maybe [Text])
groupPolicyRuleConditionExcludeL f GroupPolicyRuleCondition{..} = (\groupPolicyRuleConditionExclude -> GroupPolicyRuleCondition { groupPolicyRuleConditionExclude, ..} ) <$> f groupPolicyRuleConditionExclude
{-# INLINE groupPolicyRuleConditionExcludeL #-}

-- | 'groupPolicyRuleConditionInclude' Lens
groupPolicyRuleConditionIncludeL :: Lens_' GroupPolicyRuleCondition (Maybe [Text])
groupPolicyRuleConditionIncludeL f GroupPolicyRuleCondition{..} = (\groupPolicyRuleConditionInclude -> GroupPolicyRuleCondition { groupPolicyRuleConditionInclude, ..} ) <$> f groupPolicyRuleConditionInclude
{-# INLINE groupPolicyRuleConditionIncludeL #-}



-- * GroupProfile

-- | 'groupProfileDescription' Lens
groupProfileDescriptionL :: Lens_' GroupProfile (Maybe Text)
groupProfileDescriptionL f GroupProfile{..} = (\groupProfileDescription -> GroupProfile { groupProfileDescription, ..} ) <$> f groupProfileDescription
{-# INLINE groupProfileDescriptionL #-}

-- | 'groupProfileName' Lens
groupProfileNameL :: Lens_' GroupProfile (Maybe Text)
groupProfileNameL f GroupProfile{..} = (\groupProfileName -> GroupProfile { groupProfileName, ..} ) <$> f groupProfileName
{-# INLINE groupProfileNameL #-}



-- * GroupRule

-- | 'groupRuleActions' Lens
groupRuleActionsL :: Lens_' GroupRule (Maybe GroupRuleAction)
groupRuleActionsL f GroupRule{..} = (\groupRuleActions -> GroupRule { groupRuleActions, ..} ) <$> f groupRuleActions
{-# INLINE groupRuleActionsL #-}

-- | 'groupRuleConditions' Lens
groupRuleConditionsL :: Lens_' GroupRule (Maybe GroupRuleConditions)
groupRuleConditionsL f GroupRule{..} = (\groupRuleConditions -> GroupRule { groupRuleConditions, ..} ) <$> f groupRuleConditions
{-# INLINE groupRuleConditionsL #-}

-- | 'groupRuleCreated' Lens
groupRuleCreatedL :: Lens_' GroupRule (Maybe DateTime)
groupRuleCreatedL f GroupRule{..} = (\groupRuleCreated -> GroupRule { groupRuleCreated, ..} ) <$> f groupRuleCreated
{-# INLINE groupRuleCreatedL #-}

-- | 'groupRuleId' Lens
groupRuleIdL :: Lens_' GroupRule (Maybe Text)
groupRuleIdL f GroupRule{..} = (\groupRuleId -> GroupRule { groupRuleId, ..} ) <$> f groupRuleId
{-# INLINE groupRuleIdL #-}

-- | 'groupRuleLastUpdated' Lens
groupRuleLastUpdatedL :: Lens_' GroupRule (Maybe DateTime)
groupRuleLastUpdatedL f GroupRule{..} = (\groupRuleLastUpdated -> GroupRule { groupRuleLastUpdated, ..} ) <$> f groupRuleLastUpdated
{-# INLINE groupRuleLastUpdatedL #-}

-- | 'groupRuleName' Lens
groupRuleNameL :: Lens_' GroupRule (Maybe Text)
groupRuleNameL f GroupRule{..} = (\groupRuleName -> GroupRule { groupRuleName, ..} ) <$> f groupRuleName
{-# INLINE groupRuleNameL #-}

-- | 'groupRuleStatus' Lens
groupRuleStatusL :: Lens_' GroupRule (Maybe GroupRuleStatus)
groupRuleStatusL f GroupRule{..} = (\groupRuleStatus -> GroupRule { groupRuleStatus, ..} ) <$> f groupRuleStatus
{-# INLINE groupRuleStatusL #-}

-- | 'groupRuleType' Lens
groupRuleTypeL :: Lens_' GroupRule (Maybe Text)
groupRuleTypeL f GroupRule{..} = (\groupRuleType -> GroupRule { groupRuleType, ..} ) <$> f groupRuleType
{-# INLINE groupRuleTypeL #-}



-- * GroupRuleAction

-- | 'groupRuleActionAssignUserToGroups' Lens
groupRuleActionAssignUserToGroupsL :: Lens_' GroupRuleAction (Maybe GroupRuleGroupAssignment)
groupRuleActionAssignUserToGroupsL f GroupRuleAction{..} = (\groupRuleActionAssignUserToGroups -> GroupRuleAction { groupRuleActionAssignUserToGroups, ..} ) <$> f groupRuleActionAssignUserToGroups
{-# INLINE groupRuleActionAssignUserToGroupsL #-}



-- * GroupRuleConditions

-- | 'groupRuleConditionsExpression' Lens
groupRuleConditionsExpressionL :: Lens_' GroupRuleConditions (Maybe GroupRuleExpression)
groupRuleConditionsExpressionL f GroupRuleConditions{..} = (\groupRuleConditionsExpression -> GroupRuleConditions { groupRuleConditionsExpression, ..} ) <$> f groupRuleConditionsExpression
{-# INLINE groupRuleConditionsExpressionL #-}

-- | 'groupRuleConditionsPeople' Lens
groupRuleConditionsPeopleL :: Lens_' GroupRuleConditions (Maybe GroupRulePeopleCondition)
groupRuleConditionsPeopleL f GroupRuleConditions{..} = (\groupRuleConditionsPeople -> GroupRuleConditions { groupRuleConditionsPeople, ..} ) <$> f groupRuleConditionsPeople
{-# INLINE groupRuleConditionsPeopleL #-}



-- * GroupRuleExpression

-- | 'groupRuleExpressionType' Lens
groupRuleExpressionTypeL :: Lens_' GroupRuleExpression (Maybe Text)
groupRuleExpressionTypeL f GroupRuleExpression{..} = (\groupRuleExpressionType -> GroupRuleExpression { groupRuleExpressionType, ..} ) <$> f groupRuleExpressionType
{-# INLINE groupRuleExpressionTypeL #-}

-- | 'groupRuleExpressionValue' Lens
groupRuleExpressionValueL :: Lens_' GroupRuleExpression (Maybe Text)
groupRuleExpressionValueL f GroupRuleExpression{..} = (\groupRuleExpressionValue -> GroupRuleExpression { groupRuleExpressionValue, ..} ) <$> f groupRuleExpressionValue
{-# INLINE groupRuleExpressionValueL #-}



-- * GroupRuleGroupAssignment

-- | 'groupRuleGroupAssignmentGroupIds' Lens
groupRuleGroupAssignmentGroupIdsL :: Lens_' GroupRuleGroupAssignment (Maybe [Text])
groupRuleGroupAssignmentGroupIdsL f GroupRuleGroupAssignment{..} = (\groupRuleGroupAssignmentGroupIds -> GroupRuleGroupAssignment { groupRuleGroupAssignmentGroupIds, ..} ) <$> f groupRuleGroupAssignmentGroupIds
{-# INLINE groupRuleGroupAssignmentGroupIdsL #-}



-- * GroupRuleGroupCondition

-- | 'groupRuleGroupConditionExclude' Lens
groupRuleGroupConditionExcludeL :: Lens_' GroupRuleGroupCondition (Maybe [Text])
groupRuleGroupConditionExcludeL f GroupRuleGroupCondition{..} = (\groupRuleGroupConditionExclude -> GroupRuleGroupCondition { groupRuleGroupConditionExclude, ..} ) <$> f groupRuleGroupConditionExclude
{-# INLINE groupRuleGroupConditionExcludeL #-}

-- | 'groupRuleGroupConditionInclude' Lens
groupRuleGroupConditionIncludeL :: Lens_' GroupRuleGroupCondition (Maybe [Text])
groupRuleGroupConditionIncludeL f GroupRuleGroupCondition{..} = (\groupRuleGroupConditionInclude -> GroupRuleGroupCondition { groupRuleGroupConditionInclude, ..} ) <$> f groupRuleGroupConditionInclude
{-# INLINE groupRuleGroupConditionIncludeL #-}



-- * GroupRulePeopleCondition

-- | 'groupRulePeopleConditionGroups' Lens
groupRulePeopleConditionGroupsL :: Lens_' GroupRulePeopleCondition (Maybe GroupRuleGroupCondition)
groupRulePeopleConditionGroupsL f GroupRulePeopleCondition{..} = (\groupRulePeopleConditionGroups -> GroupRulePeopleCondition { groupRulePeopleConditionGroups, ..} ) <$> f groupRulePeopleConditionGroups
{-# INLINE groupRulePeopleConditionGroupsL #-}

-- | 'groupRulePeopleConditionUsers' Lens
groupRulePeopleConditionUsersL :: Lens_' GroupRulePeopleCondition (Maybe GroupRuleUserCondition)
groupRulePeopleConditionUsersL f GroupRulePeopleCondition{..} = (\groupRulePeopleConditionUsers -> GroupRulePeopleCondition { groupRulePeopleConditionUsers, ..} ) <$> f groupRulePeopleConditionUsers
{-# INLINE groupRulePeopleConditionUsersL #-}



-- * GroupRuleStatus



-- * GroupRuleUserCondition

-- | 'groupRuleUserConditionExclude' Lens
groupRuleUserConditionExcludeL :: Lens_' GroupRuleUserCondition (Maybe [Text])
groupRuleUserConditionExcludeL f GroupRuleUserCondition{..} = (\groupRuleUserConditionExclude -> GroupRuleUserCondition { groupRuleUserConditionExclude, ..} ) <$> f groupRuleUserConditionExclude
{-# INLINE groupRuleUserConditionExcludeL #-}

-- | 'groupRuleUserConditionInclude' Lens
groupRuleUserConditionIncludeL :: Lens_' GroupRuleUserCondition (Maybe [Text])
groupRuleUserConditionIncludeL f GroupRuleUserCondition{..} = (\groupRuleUserConditionInclude -> GroupRuleUserCondition { groupRuleUserConditionInclude, ..} ) <$> f groupRuleUserConditionInclude
{-# INLINE groupRuleUserConditionIncludeL #-}



-- * GroupSchema

-- | 'groupSchemaId' Lens
groupSchemaIdL :: Lens_' GroupSchema (Maybe Text)
groupSchemaIdL f GroupSchema{..} = (\groupSchemaId -> GroupSchema { groupSchemaId, ..} ) <$> f groupSchemaId
{-# INLINE groupSchemaIdL #-}

-- | 'groupSchemaSchema' Lens
groupSchemaSchemaL :: Lens_' GroupSchema (Maybe Text)
groupSchemaSchemaL f GroupSchema{..} = (\groupSchemaSchema -> GroupSchema { groupSchemaSchema, ..} ) <$> f groupSchemaSchema
{-# INLINE groupSchemaSchemaL #-}

-- | 'groupSchemaName' Lens
groupSchemaNameL :: Lens_' GroupSchema (Maybe Text)
groupSchemaNameL f GroupSchema{..} = (\groupSchemaName -> GroupSchema { groupSchemaName, ..} ) <$> f groupSchemaName
{-# INLINE groupSchemaNameL #-}

-- | 'groupSchemaTitle' Lens
groupSchemaTitleL :: Lens_' GroupSchema (Maybe Text)
groupSchemaTitleL f GroupSchema{..} = (\groupSchemaTitle -> GroupSchema { groupSchemaTitle, ..} ) <$> f groupSchemaTitle
{-# INLINE groupSchemaTitleL #-}

-- | 'groupSchemaLastUpdated' Lens
groupSchemaLastUpdatedL :: Lens_' GroupSchema (Maybe Text)
groupSchemaLastUpdatedL f GroupSchema{..} = (\groupSchemaLastUpdated -> GroupSchema { groupSchemaLastUpdated, ..} ) <$> f groupSchemaLastUpdated
{-# INLINE groupSchemaLastUpdatedL #-}

-- | 'groupSchemaDescription' Lens
groupSchemaDescriptionL :: Lens_' GroupSchema (Maybe Text)
groupSchemaDescriptionL f GroupSchema{..} = (\groupSchemaDescription -> GroupSchema { groupSchemaDescription, ..} ) <$> f groupSchemaDescription
{-# INLINE groupSchemaDescriptionL #-}

-- | 'groupSchemaCreated' Lens
groupSchemaCreatedL :: Lens_' GroupSchema (Maybe Text)
groupSchemaCreatedL f GroupSchema{..} = (\groupSchemaCreated -> GroupSchema { groupSchemaCreated, ..} ) <$> f groupSchemaCreated
{-# INLINE groupSchemaCreatedL #-}

-- | 'groupSchemaDefinitions' Lens
groupSchemaDefinitionsL :: Lens_' GroupSchema (Maybe GroupSchemaDefinitions)
groupSchemaDefinitionsL f GroupSchema{..} = (\groupSchemaDefinitions -> GroupSchema { groupSchemaDefinitions, ..} ) <$> f groupSchemaDefinitions
{-# INLINE groupSchemaDefinitionsL #-}

-- | 'groupSchemaType' Lens
groupSchemaTypeL :: Lens_' GroupSchema (Maybe Text)
groupSchemaTypeL f GroupSchema{..} = (\groupSchemaType -> GroupSchema { groupSchemaType, ..} ) <$> f groupSchemaType
{-# INLINE groupSchemaTypeL #-}

-- | 'groupSchemaProperties' Lens
groupSchemaPropertiesL :: Lens_' GroupSchema (Maybe UserSchemaProperties)
groupSchemaPropertiesL f GroupSchema{..} = (\groupSchemaProperties -> GroupSchema { groupSchemaProperties, ..} ) <$> f groupSchemaProperties
{-# INLINE groupSchemaPropertiesL #-}

-- | 'groupSchemaLinks' Lens
groupSchemaLinksL :: Lens_' GroupSchema (Maybe (Map.Map String A.Value))
groupSchemaLinksL f GroupSchema{..} = (\groupSchemaLinks -> GroupSchema { groupSchemaLinks, ..} ) <$> f groupSchemaLinks
{-# INLINE groupSchemaLinksL #-}



-- * GroupSchemaAttribute

-- | 'groupSchemaAttributeTitle' Lens
groupSchemaAttributeTitleL :: Lens_' GroupSchemaAttribute (Maybe Text)
groupSchemaAttributeTitleL f GroupSchemaAttribute{..} = (\groupSchemaAttributeTitle -> GroupSchemaAttribute { groupSchemaAttributeTitle, ..} ) <$> f groupSchemaAttributeTitle
{-# INLINE groupSchemaAttributeTitleL #-}

-- | 'groupSchemaAttributeType' Lens
groupSchemaAttributeTypeL :: Lens_' GroupSchemaAttribute (Maybe UserSchemaAttributeType)
groupSchemaAttributeTypeL f GroupSchemaAttribute{..} = (\groupSchemaAttributeType -> GroupSchemaAttribute { groupSchemaAttributeType, ..} ) <$> f groupSchemaAttributeType
{-# INLINE groupSchemaAttributeTypeL #-}

-- | 'groupSchemaAttributeRequired' Lens
groupSchemaAttributeRequiredL :: Lens_' GroupSchemaAttribute (Maybe Bool)
groupSchemaAttributeRequiredL f GroupSchemaAttribute{..} = (\groupSchemaAttributeRequired -> GroupSchemaAttribute { groupSchemaAttributeRequired, ..} ) <$> f groupSchemaAttributeRequired
{-# INLINE groupSchemaAttributeRequiredL #-}

-- | 'groupSchemaAttributeMutability' Lens
groupSchemaAttributeMutabilityL :: Lens_' GroupSchemaAttribute (Maybe Text)
groupSchemaAttributeMutabilityL f GroupSchemaAttribute{..} = (\groupSchemaAttributeMutability -> GroupSchemaAttribute { groupSchemaAttributeMutability, ..} ) <$> f groupSchemaAttributeMutability
{-# INLINE groupSchemaAttributeMutabilityL #-}

-- | 'groupSchemaAttributeScope' Lens
groupSchemaAttributeScopeL :: Lens_' GroupSchemaAttribute (Maybe UserSchemaAttributeScope)
groupSchemaAttributeScopeL f GroupSchemaAttribute{..} = (\groupSchemaAttributeScope -> GroupSchemaAttribute { groupSchemaAttributeScope, ..} ) <$> f groupSchemaAttributeScope
{-# INLINE groupSchemaAttributeScopeL #-}

-- | 'groupSchemaAttributeEnum' Lens
groupSchemaAttributeEnumL :: Lens_' GroupSchemaAttribute (Maybe [Text])
groupSchemaAttributeEnumL f GroupSchemaAttribute{..} = (\groupSchemaAttributeEnum -> GroupSchemaAttribute { groupSchemaAttributeEnum, ..} ) <$> f groupSchemaAttributeEnum
{-# INLINE groupSchemaAttributeEnumL #-}

-- | 'groupSchemaAttributeOneOf' Lens
groupSchemaAttributeOneOfL :: Lens_' GroupSchemaAttribute (Maybe [UserSchemaAttributeEnum])
groupSchemaAttributeOneOfL f GroupSchemaAttribute{..} = (\groupSchemaAttributeOneOf -> GroupSchemaAttribute { groupSchemaAttributeOneOf, ..} ) <$> f groupSchemaAttributeOneOf
{-# INLINE groupSchemaAttributeOneOfL #-}

-- | 'groupSchemaAttributeMinLength' Lens
groupSchemaAttributeMinLengthL :: Lens_' GroupSchemaAttribute (Maybe Int)
groupSchemaAttributeMinLengthL f GroupSchemaAttribute{..} = (\groupSchemaAttributeMinLength -> GroupSchemaAttribute { groupSchemaAttributeMinLength, ..} ) <$> f groupSchemaAttributeMinLength
{-# INLINE groupSchemaAttributeMinLengthL #-}

-- | 'groupSchemaAttributeMaxLength' Lens
groupSchemaAttributeMaxLengthL :: Lens_' GroupSchemaAttribute (Maybe Int)
groupSchemaAttributeMaxLengthL f GroupSchemaAttribute{..} = (\groupSchemaAttributeMaxLength -> GroupSchemaAttribute { groupSchemaAttributeMaxLength, ..} ) <$> f groupSchemaAttributeMaxLength
{-# INLINE groupSchemaAttributeMaxLengthL #-}

-- | 'groupSchemaAttributeDescription' Lens
groupSchemaAttributeDescriptionL :: Lens_' GroupSchemaAttribute (Maybe Text)
groupSchemaAttributeDescriptionL f GroupSchemaAttribute{..} = (\groupSchemaAttributeDescription -> GroupSchemaAttribute { groupSchemaAttributeDescription, ..} ) <$> f groupSchemaAttributeDescription
{-# INLINE groupSchemaAttributeDescriptionL #-}

-- | 'groupSchemaAttributePermissions' Lens
groupSchemaAttributePermissionsL :: Lens_' GroupSchemaAttribute (Maybe [UserSchemaAttributePermission])
groupSchemaAttributePermissionsL f GroupSchemaAttribute{..} = (\groupSchemaAttributePermissions -> GroupSchemaAttribute { groupSchemaAttributePermissions, ..} ) <$> f groupSchemaAttributePermissions
{-# INLINE groupSchemaAttributePermissionsL #-}

-- | 'groupSchemaAttributeMaster' Lens
groupSchemaAttributeMasterL :: Lens_' GroupSchemaAttribute (Maybe UserSchemaAttributeMaster)
groupSchemaAttributeMasterL f GroupSchemaAttribute{..} = (\groupSchemaAttributeMaster -> GroupSchemaAttribute { groupSchemaAttributeMaster, ..} ) <$> f groupSchemaAttributeMaster
{-# INLINE groupSchemaAttributeMasterL #-}

-- | 'groupSchemaAttributeUnion' Lens
groupSchemaAttributeUnionL :: Lens_' GroupSchemaAttribute (Maybe UserSchemaAttributeUnion)
groupSchemaAttributeUnionL f GroupSchemaAttribute{..} = (\groupSchemaAttributeUnion -> GroupSchemaAttribute { groupSchemaAttributeUnion, ..} ) <$> f groupSchemaAttributeUnion
{-# INLINE groupSchemaAttributeUnionL #-}

-- | 'groupSchemaAttributeItems' Lens
groupSchemaAttributeItemsL :: Lens_' GroupSchemaAttribute (Maybe UserSchemaAttributeItems)
groupSchemaAttributeItemsL f GroupSchemaAttribute{..} = (\groupSchemaAttributeItems -> GroupSchemaAttribute { groupSchemaAttributeItems, ..} ) <$> f groupSchemaAttributeItems
{-# INLINE groupSchemaAttributeItemsL #-}

-- | 'groupSchemaAttributeUnique' Lens
groupSchemaAttributeUniqueL :: Lens_' GroupSchemaAttribute (Maybe Text)
groupSchemaAttributeUniqueL f GroupSchemaAttribute{..} = (\groupSchemaAttributeUnique -> GroupSchemaAttribute { groupSchemaAttributeUnique, ..} ) <$> f groupSchemaAttributeUnique
{-# INLINE groupSchemaAttributeUniqueL #-}

-- | 'groupSchemaAttributeExternalName' Lens
groupSchemaAttributeExternalNameL :: Lens_' GroupSchemaAttribute (Maybe Text)
groupSchemaAttributeExternalNameL f GroupSchemaAttribute{..} = (\groupSchemaAttributeExternalName -> GroupSchemaAttribute { groupSchemaAttributeExternalName, ..} ) <$> f groupSchemaAttributeExternalName
{-# INLINE groupSchemaAttributeExternalNameL #-}

-- | 'groupSchemaAttributeExternalNamespace' Lens
groupSchemaAttributeExternalNamespaceL :: Lens_' GroupSchemaAttribute (Maybe Text)
groupSchemaAttributeExternalNamespaceL f GroupSchemaAttribute{..} = (\groupSchemaAttributeExternalNamespace -> GroupSchemaAttribute { groupSchemaAttributeExternalNamespace, ..} ) <$> f groupSchemaAttributeExternalNamespace
{-# INLINE groupSchemaAttributeExternalNamespaceL #-}



-- * GroupSchemaBase

-- | 'groupSchemaBaseId' Lens
groupSchemaBaseIdL :: Lens_' GroupSchemaBase (Maybe Text)
groupSchemaBaseIdL f GroupSchemaBase{..} = (\groupSchemaBaseId -> GroupSchemaBase { groupSchemaBaseId, ..} ) <$> f groupSchemaBaseId
{-# INLINE groupSchemaBaseIdL #-}

-- | 'groupSchemaBaseType' Lens
groupSchemaBaseTypeL :: Lens_' GroupSchemaBase (Maybe Text)
groupSchemaBaseTypeL f GroupSchemaBase{..} = (\groupSchemaBaseType -> GroupSchemaBase { groupSchemaBaseType, ..} ) <$> f groupSchemaBaseType
{-# INLINE groupSchemaBaseTypeL #-}

-- | 'groupSchemaBaseProperties' Lens
groupSchemaBasePropertiesL :: Lens_' GroupSchemaBase (Maybe GroupSchemaBaseProperties)
groupSchemaBasePropertiesL f GroupSchemaBase{..} = (\groupSchemaBaseProperties -> GroupSchemaBase { groupSchemaBaseProperties, ..} ) <$> f groupSchemaBaseProperties
{-# INLINE groupSchemaBasePropertiesL #-}

-- | 'groupSchemaBaseRequired' Lens
groupSchemaBaseRequiredL :: Lens_' GroupSchemaBase (Maybe [Text])
groupSchemaBaseRequiredL f GroupSchemaBase{..} = (\groupSchemaBaseRequired -> GroupSchemaBase { groupSchemaBaseRequired, ..} ) <$> f groupSchemaBaseRequired
{-# INLINE groupSchemaBaseRequiredL #-}



-- * GroupSchemaBaseProperties

-- | 'groupSchemaBasePropertiesName' Lens
groupSchemaBasePropertiesNameL :: Lens_' GroupSchemaBaseProperties (Maybe GroupSchemaAttribute)
groupSchemaBasePropertiesNameL f GroupSchemaBaseProperties{..} = (\groupSchemaBasePropertiesName -> GroupSchemaBaseProperties { groupSchemaBasePropertiesName, ..} ) <$> f groupSchemaBasePropertiesName
{-# INLINE groupSchemaBasePropertiesNameL #-}

-- | 'groupSchemaBasePropertiesDescription' Lens
groupSchemaBasePropertiesDescriptionL :: Lens_' GroupSchemaBaseProperties (Maybe GroupSchemaAttribute)
groupSchemaBasePropertiesDescriptionL f GroupSchemaBaseProperties{..} = (\groupSchemaBasePropertiesDescription -> GroupSchemaBaseProperties { groupSchemaBasePropertiesDescription, ..} ) <$> f groupSchemaBasePropertiesDescription
{-# INLINE groupSchemaBasePropertiesDescriptionL #-}



-- * GroupSchemaCustom

-- | 'groupSchemaCustomId' Lens
groupSchemaCustomIdL :: Lens_' GroupSchemaCustom (Maybe Text)
groupSchemaCustomIdL f GroupSchemaCustom{..} = (\groupSchemaCustomId -> GroupSchemaCustom { groupSchemaCustomId, ..} ) <$> f groupSchemaCustomId
{-# INLINE groupSchemaCustomIdL #-}

-- | 'groupSchemaCustomType' Lens
groupSchemaCustomTypeL :: Lens_' GroupSchemaCustom (Maybe Text)
groupSchemaCustomTypeL f GroupSchemaCustom{..} = (\groupSchemaCustomType -> GroupSchemaCustom { groupSchemaCustomType, ..} ) <$> f groupSchemaCustomType
{-# INLINE groupSchemaCustomTypeL #-}

-- | 'groupSchemaCustomProperties' Lens
groupSchemaCustomPropertiesL :: Lens_' GroupSchemaCustom (Maybe (Map.Map String GroupSchemaAttribute))
groupSchemaCustomPropertiesL f GroupSchemaCustom{..} = (\groupSchemaCustomProperties -> GroupSchemaCustom { groupSchemaCustomProperties, ..} ) <$> f groupSchemaCustomProperties
{-# INLINE groupSchemaCustomPropertiesL #-}

-- | 'groupSchemaCustomRequired' Lens
groupSchemaCustomRequiredL :: Lens_' GroupSchemaCustom (Maybe [Text])
groupSchemaCustomRequiredL f GroupSchemaCustom{..} = (\groupSchemaCustomRequired -> GroupSchemaCustom { groupSchemaCustomRequired, ..} ) <$> f groupSchemaCustomRequired
{-# INLINE groupSchemaCustomRequiredL #-}



-- * GroupSchemaDefinitions

-- | 'groupSchemaDefinitionsBase' Lens
groupSchemaDefinitionsBaseL :: Lens_' GroupSchemaDefinitions (Maybe GroupSchemaBase)
groupSchemaDefinitionsBaseL f GroupSchemaDefinitions{..} = (\groupSchemaDefinitionsBase -> GroupSchemaDefinitions { groupSchemaDefinitionsBase, ..} ) <$> f groupSchemaDefinitionsBase
{-# INLINE groupSchemaDefinitionsBaseL #-}

-- | 'groupSchemaDefinitionsCustom' Lens
groupSchemaDefinitionsCustomL :: Lens_' GroupSchemaDefinitions (Maybe GroupSchemaCustom)
groupSchemaDefinitionsCustomL f GroupSchemaDefinitions{..} = (\groupSchemaDefinitionsCustom -> GroupSchemaDefinitions { groupSchemaDefinitionsCustom, ..} ) <$> f groupSchemaDefinitionsCustom
{-# INLINE groupSchemaDefinitionsCustomL #-}



-- * GroupType



-- * HardwareUserFactor

-- | 'hardwareUserFactorProfile' Lens
hardwareUserFactorProfileL :: Lens_' HardwareUserFactor (Maybe HardwareUserFactorProfile)
hardwareUserFactorProfileL f HardwareUserFactor{..} = (\hardwareUserFactorProfile -> HardwareUserFactor { hardwareUserFactorProfile, ..} ) <$> f hardwareUserFactorProfile
{-# INLINE hardwareUserFactorProfileL #-}



-- * HardwareUserFactorProfile

-- | 'hardwareUserFactorProfileCredentialId' Lens
hardwareUserFactorProfileCredentialIdL :: Lens_' HardwareUserFactorProfile (Maybe Text)
hardwareUserFactorProfileCredentialIdL f HardwareUserFactorProfile{..} = (\hardwareUserFactorProfileCredentialId -> HardwareUserFactorProfile { hardwareUserFactorProfileCredentialId, ..} ) <$> f hardwareUserFactorProfileCredentialId
{-# INLINE hardwareUserFactorProfileCredentialIdL #-}



-- * IdentityProvider

-- | 'identityProviderLinks' Lens
identityProviderLinksL :: Lens_' IdentityProvider (Maybe (Map.Map String A.Value))
identityProviderLinksL f IdentityProvider{..} = (\identityProviderLinks -> IdentityProvider { identityProviderLinks, ..} ) <$> f identityProviderLinks
{-# INLINE identityProviderLinksL #-}

-- | 'identityProviderCreated' Lens
identityProviderCreatedL :: Lens_' IdentityProvider (Maybe DateTime)
identityProviderCreatedL f IdentityProvider{..} = (\identityProviderCreated -> IdentityProvider { identityProviderCreated, ..} ) <$> f identityProviderCreated
{-# INLINE identityProviderCreatedL #-}

-- | 'identityProviderId' Lens
identityProviderIdL :: Lens_' IdentityProvider (Maybe Text)
identityProviderIdL f IdentityProvider{..} = (\identityProviderId -> IdentityProvider { identityProviderId, ..} ) <$> f identityProviderId
{-# INLINE identityProviderIdL #-}

-- | 'identityProviderIssuerMode' Lens
identityProviderIssuerModeL :: Lens_' IdentityProvider (Maybe E'IssuerMode)
identityProviderIssuerModeL f IdentityProvider{..} = (\identityProviderIssuerMode -> IdentityProvider { identityProviderIssuerMode, ..} ) <$> f identityProviderIssuerMode
{-# INLINE identityProviderIssuerModeL #-}

-- | 'identityProviderLastUpdated' Lens
identityProviderLastUpdatedL :: Lens_' IdentityProvider (Maybe DateTime)
identityProviderLastUpdatedL f IdentityProvider{..} = (\identityProviderLastUpdated -> IdentityProvider { identityProviderLastUpdated, ..} ) <$> f identityProviderLastUpdated
{-# INLINE identityProviderLastUpdatedL #-}

-- | 'identityProviderName' Lens
identityProviderNameL :: Lens_' IdentityProvider (Maybe Text)
identityProviderNameL f IdentityProvider{..} = (\identityProviderName -> IdentityProvider { identityProviderName, ..} ) <$> f identityProviderName
{-# INLINE identityProviderNameL #-}

-- | 'identityProviderPolicy' Lens
identityProviderPolicyL :: Lens_' IdentityProvider (Maybe IdentityProviderPolicy)
identityProviderPolicyL f IdentityProvider{..} = (\identityProviderPolicy -> IdentityProvider { identityProviderPolicy, ..} ) <$> f identityProviderPolicy
{-# INLINE identityProviderPolicyL #-}

-- | 'identityProviderProtocol' Lens
identityProviderProtocolL :: Lens_' IdentityProvider (Maybe Protocol)
identityProviderProtocolL f IdentityProvider{..} = (\identityProviderProtocol -> IdentityProvider { identityProviderProtocol, ..} ) <$> f identityProviderProtocol
{-# INLINE identityProviderProtocolL #-}

-- | 'identityProviderStatus' Lens
identityProviderStatusL :: Lens_' IdentityProvider (Maybe E'Status2)
identityProviderStatusL f IdentityProvider{..} = (\identityProviderStatus -> IdentityProvider { identityProviderStatus, ..} ) <$> f identityProviderStatus
{-# INLINE identityProviderStatusL #-}

-- | 'identityProviderType' Lens
identityProviderTypeL :: Lens_' IdentityProvider (Maybe E'Type4)
identityProviderTypeL f IdentityProvider{..} = (\identityProviderType -> IdentityProvider { identityProviderType, ..} ) <$> f identityProviderType
{-# INLINE identityProviderTypeL #-}



-- * IdentityProviderApplicationUser

-- | 'identityProviderApplicationUserEmbedded' Lens
identityProviderApplicationUserEmbeddedL :: Lens_' IdentityProviderApplicationUser (Maybe (Map.Map String A.Value))
identityProviderApplicationUserEmbeddedL f IdentityProviderApplicationUser{..} = (\identityProviderApplicationUserEmbedded -> IdentityProviderApplicationUser { identityProviderApplicationUserEmbedded, ..} ) <$> f identityProviderApplicationUserEmbedded
{-# INLINE identityProviderApplicationUserEmbeddedL #-}

-- | 'identityProviderApplicationUserLinks' Lens
identityProviderApplicationUserLinksL :: Lens_' IdentityProviderApplicationUser (Maybe (Map.Map String A.Value))
identityProviderApplicationUserLinksL f IdentityProviderApplicationUser{..} = (\identityProviderApplicationUserLinks -> IdentityProviderApplicationUser { identityProviderApplicationUserLinks, ..} ) <$> f identityProviderApplicationUserLinks
{-# INLINE identityProviderApplicationUserLinksL #-}

-- | 'identityProviderApplicationUserCreated' Lens
identityProviderApplicationUserCreatedL :: Lens_' IdentityProviderApplicationUser (Maybe Text)
identityProviderApplicationUserCreatedL f IdentityProviderApplicationUser{..} = (\identityProviderApplicationUserCreated -> IdentityProviderApplicationUser { identityProviderApplicationUserCreated, ..} ) <$> f identityProviderApplicationUserCreated
{-# INLINE identityProviderApplicationUserCreatedL #-}

-- | 'identityProviderApplicationUserExternalId' Lens
identityProviderApplicationUserExternalIdL :: Lens_' IdentityProviderApplicationUser (Maybe Text)
identityProviderApplicationUserExternalIdL f IdentityProviderApplicationUser{..} = (\identityProviderApplicationUserExternalId -> IdentityProviderApplicationUser { identityProviderApplicationUserExternalId, ..} ) <$> f identityProviderApplicationUserExternalId
{-# INLINE identityProviderApplicationUserExternalIdL #-}

-- | 'identityProviderApplicationUserId' Lens
identityProviderApplicationUserIdL :: Lens_' IdentityProviderApplicationUser (Maybe Text)
identityProviderApplicationUserIdL f IdentityProviderApplicationUser{..} = (\identityProviderApplicationUserId -> IdentityProviderApplicationUser { identityProviderApplicationUserId, ..} ) <$> f identityProviderApplicationUserId
{-# INLINE identityProviderApplicationUserIdL #-}

-- | 'identityProviderApplicationUserLastUpdated' Lens
identityProviderApplicationUserLastUpdatedL :: Lens_' IdentityProviderApplicationUser (Maybe Text)
identityProviderApplicationUserLastUpdatedL f IdentityProviderApplicationUser{..} = (\identityProviderApplicationUserLastUpdated -> IdentityProviderApplicationUser { identityProviderApplicationUserLastUpdated, ..} ) <$> f identityProviderApplicationUserLastUpdated
{-# INLINE identityProviderApplicationUserLastUpdatedL #-}

-- | 'identityProviderApplicationUserProfile' Lens
identityProviderApplicationUserProfileL :: Lens_' IdentityProviderApplicationUser (Maybe (Map.Map String A.Value))
identityProviderApplicationUserProfileL f IdentityProviderApplicationUser{..} = (\identityProviderApplicationUserProfile -> IdentityProviderApplicationUser { identityProviderApplicationUserProfile, ..} ) <$> f identityProviderApplicationUserProfile
{-# INLINE identityProviderApplicationUserProfileL #-}



-- * IdentityProviderCredentials

-- | 'identityProviderCredentialsClient' Lens
identityProviderCredentialsClientL :: Lens_' IdentityProviderCredentials (Maybe IdentityProviderCredentialsClient)
identityProviderCredentialsClientL f IdentityProviderCredentials{..} = (\identityProviderCredentialsClient -> IdentityProviderCredentials { identityProviderCredentialsClient, ..} ) <$> f identityProviderCredentialsClient
{-# INLINE identityProviderCredentialsClientL #-}

-- | 'identityProviderCredentialsSigning' Lens
identityProviderCredentialsSigningL :: Lens_' IdentityProviderCredentials (Maybe IdentityProviderCredentialsSigning)
identityProviderCredentialsSigningL f IdentityProviderCredentials{..} = (\identityProviderCredentialsSigning -> IdentityProviderCredentials { identityProviderCredentialsSigning, ..} ) <$> f identityProviderCredentialsSigning
{-# INLINE identityProviderCredentialsSigningL #-}

-- | 'identityProviderCredentialsTrust' Lens
identityProviderCredentialsTrustL :: Lens_' IdentityProviderCredentials (Maybe IdentityProviderCredentialsTrust)
identityProviderCredentialsTrustL f IdentityProviderCredentials{..} = (\identityProviderCredentialsTrust -> IdentityProviderCredentials { identityProviderCredentialsTrust, ..} ) <$> f identityProviderCredentialsTrust
{-# INLINE identityProviderCredentialsTrustL #-}



-- * IdentityProviderCredentialsClient

-- | 'identityProviderCredentialsClientClientId' Lens
identityProviderCredentialsClientClientIdL :: Lens_' IdentityProviderCredentialsClient (Maybe Text)
identityProviderCredentialsClientClientIdL f IdentityProviderCredentialsClient{..} = (\identityProviderCredentialsClientClientId -> IdentityProviderCredentialsClient { identityProviderCredentialsClientClientId, ..} ) <$> f identityProviderCredentialsClientClientId
{-# INLINE identityProviderCredentialsClientClientIdL #-}

-- | 'identityProviderCredentialsClientClientSecret' Lens
identityProviderCredentialsClientClientSecretL :: Lens_' IdentityProviderCredentialsClient (Maybe Text)
identityProviderCredentialsClientClientSecretL f IdentityProviderCredentialsClient{..} = (\identityProviderCredentialsClientClientSecret -> IdentityProviderCredentialsClient { identityProviderCredentialsClientClientSecret, ..} ) <$> f identityProviderCredentialsClientClientSecret
{-# INLINE identityProviderCredentialsClientClientSecretL #-}



-- * IdentityProviderCredentialsSigning

-- | 'identityProviderCredentialsSigningKid' Lens
identityProviderCredentialsSigningKidL :: Lens_' IdentityProviderCredentialsSigning (Maybe Text)
identityProviderCredentialsSigningKidL f IdentityProviderCredentialsSigning{..} = (\identityProviderCredentialsSigningKid -> IdentityProviderCredentialsSigning { identityProviderCredentialsSigningKid, ..} ) <$> f identityProviderCredentialsSigningKid
{-# INLINE identityProviderCredentialsSigningKidL #-}

-- | 'identityProviderCredentialsSigningPrivateKey' Lens
identityProviderCredentialsSigningPrivateKeyL :: Lens_' IdentityProviderCredentialsSigning (Maybe Text)
identityProviderCredentialsSigningPrivateKeyL f IdentityProviderCredentialsSigning{..} = (\identityProviderCredentialsSigningPrivateKey -> IdentityProviderCredentialsSigning { identityProviderCredentialsSigningPrivateKey, ..} ) <$> f identityProviderCredentialsSigningPrivateKey
{-# INLINE identityProviderCredentialsSigningPrivateKeyL #-}

-- | 'identityProviderCredentialsSigningTeamId' Lens
identityProviderCredentialsSigningTeamIdL :: Lens_' IdentityProviderCredentialsSigning (Maybe Text)
identityProviderCredentialsSigningTeamIdL f IdentityProviderCredentialsSigning{..} = (\identityProviderCredentialsSigningTeamId -> IdentityProviderCredentialsSigning { identityProviderCredentialsSigningTeamId, ..} ) <$> f identityProviderCredentialsSigningTeamId
{-# INLINE identityProviderCredentialsSigningTeamIdL #-}



-- * IdentityProviderCredentialsTrust

-- | 'identityProviderCredentialsTrustAudience' Lens
identityProviderCredentialsTrustAudienceL :: Lens_' IdentityProviderCredentialsTrust (Maybe Text)
identityProviderCredentialsTrustAudienceL f IdentityProviderCredentialsTrust{..} = (\identityProviderCredentialsTrustAudience -> IdentityProviderCredentialsTrust { identityProviderCredentialsTrustAudience, ..} ) <$> f identityProviderCredentialsTrustAudience
{-# INLINE identityProviderCredentialsTrustAudienceL #-}

-- | 'identityProviderCredentialsTrustIssuer' Lens
identityProviderCredentialsTrustIssuerL :: Lens_' IdentityProviderCredentialsTrust (Maybe Text)
identityProviderCredentialsTrustIssuerL f IdentityProviderCredentialsTrust{..} = (\identityProviderCredentialsTrustIssuer -> IdentityProviderCredentialsTrust { identityProviderCredentialsTrustIssuer, ..} ) <$> f identityProviderCredentialsTrustIssuer
{-# INLINE identityProviderCredentialsTrustIssuerL #-}

-- | 'identityProviderCredentialsTrustKid' Lens
identityProviderCredentialsTrustKidL :: Lens_' IdentityProviderCredentialsTrust (Maybe Text)
identityProviderCredentialsTrustKidL f IdentityProviderCredentialsTrust{..} = (\identityProviderCredentialsTrustKid -> IdentityProviderCredentialsTrust { identityProviderCredentialsTrustKid, ..} ) <$> f identityProviderCredentialsTrustKid
{-# INLINE identityProviderCredentialsTrustKidL #-}

-- | 'identityProviderCredentialsTrustRevocation' Lens
identityProviderCredentialsTrustRevocationL :: Lens_' IdentityProviderCredentialsTrust (Maybe E'Revocation)
identityProviderCredentialsTrustRevocationL f IdentityProviderCredentialsTrust{..} = (\identityProviderCredentialsTrustRevocation -> IdentityProviderCredentialsTrust { identityProviderCredentialsTrustRevocation, ..} ) <$> f identityProviderCredentialsTrustRevocation
{-# INLINE identityProviderCredentialsTrustRevocationL #-}

-- | 'identityProviderCredentialsTrustRevocationCacheLifetime' Lens
identityProviderCredentialsTrustRevocationCacheLifetimeL :: Lens_' IdentityProviderCredentialsTrust (Maybe Int)
identityProviderCredentialsTrustRevocationCacheLifetimeL f IdentityProviderCredentialsTrust{..} = (\identityProviderCredentialsTrustRevocationCacheLifetime -> IdentityProviderCredentialsTrust { identityProviderCredentialsTrustRevocationCacheLifetime, ..} ) <$> f identityProviderCredentialsTrustRevocationCacheLifetime
{-# INLINE identityProviderCredentialsTrustRevocationCacheLifetimeL #-}



-- * IdentityProviderPolicy

-- | 'identityProviderPolicyAccountLink' Lens
identityProviderPolicyAccountLinkL :: Lens_' IdentityProviderPolicy (Maybe PolicyAccountLink)
identityProviderPolicyAccountLinkL f IdentityProviderPolicy{..} = (\identityProviderPolicyAccountLink -> IdentityProviderPolicy { identityProviderPolicyAccountLink, ..} ) <$> f identityProviderPolicyAccountLink
{-# INLINE identityProviderPolicyAccountLinkL #-}

-- | 'identityProviderPolicyMaxClockSkew' Lens
identityProviderPolicyMaxClockSkewL :: Lens_' IdentityProviderPolicy (Maybe Int)
identityProviderPolicyMaxClockSkewL f IdentityProviderPolicy{..} = (\identityProviderPolicyMaxClockSkew -> IdentityProviderPolicy { identityProviderPolicyMaxClockSkew, ..} ) <$> f identityProviderPolicyMaxClockSkew
{-# INLINE identityProviderPolicyMaxClockSkewL #-}

-- | 'identityProviderPolicyProvisioning' Lens
identityProviderPolicyProvisioningL :: Lens_' IdentityProviderPolicy (Maybe Provisioning)
identityProviderPolicyProvisioningL f IdentityProviderPolicy{..} = (\identityProviderPolicyProvisioning -> IdentityProviderPolicy { identityProviderPolicyProvisioning, ..} ) <$> f identityProviderPolicyProvisioning
{-# INLINE identityProviderPolicyProvisioningL #-}

-- | 'identityProviderPolicySubject' Lens
identityProviderPolicySubjectL :: Lens_' IdentityProviderPolicy (Maybe PolicySubject)
identityProviderPolicySubjectL f IdentityProviderPolicy{..} = (\identityProviderPolicySubject -> IdentityProviderPolicy { identityProviderPolicySubject, ..} ) <$> f identityProviderPolicySubject
{-# INLINE identityProviderPolicySubjectL #-}



-- * IdentityProviderPolicyRuleCondition

-- | 'identityProviderPolicyRuleConditionIdpIds' Lens
identityProviderPolicyRuleConditionIdpIdsL :: Lens_' IdentityProviderPolicyRuleCondition (Maybe [Text])
identityProviderPolicyRuleConditionIdpIdsL f IdentityProviderPolicyRuleCondition{..} = (\identityProviderPolicyRuleConditionIdpIds -> IdentityProviderPolicyRuleCondition { identityProviderPolicyRuleConditionIdpIds, ..} ) <$> f identityProviderPolicyRuleConditionIdpIds
{-# INLINE identityProviderPolicyRuleConditionIdpIdsL #-}

-- | 'identityProviderPolicyRuleConditionProvider' Lens
identityProviderPolicyRuleConditionProviderL :: Lens_' IdentityProviderPolicyRuleCondition (Maybe E'Provider)
identityProviderPolicyRuleConditionProviderL f IdentityProviderPolicyRuleCondition{..} = (\identityProviderPolicyRuleConditionProvider -> IdentityProviderPolicyRuleCondition { identityProviderPolicyRuleConditionProvider, ..} ) <$> f identityProviderPolicyRuleConditionProvider
{-# INLINE identityProviderPolicyRuleConditionProviderL #-}



-- * IdpPolicyRuleAction

-- | 'idpPolicyRuleActionProviders' Lens
idpPolicyRuleActionProvidersL :: Lens_' IdpPolicyRuleAction (Maybe [IdpPolicyRuleActionProvider])
idpPolicyRuleActionProvidersL f IdpPolicyRuleAction{..} = (\idpPolicyRuleActionProviders -> IdpPolicyRuleAction { idpPolicyRuleActionProviders, ..} ) <$> f idpPolicyRuleActionProviders
{-# INLINE idpPolicyRuleActionProvidersL #-}



-- * IdpPolicyRuleActionProvider

-- | 'idpPolicyRuleActionProviderId' Lens
idpPolicyRuleActionProviderIdL :: Lens_' IdpPolicyRuleActionProvider (Maybe Text)
idpPolicyRuleActionProviderIdL f IdpPolicyRuleActionProvider{..} = (\idpPolicyRuleActionProviderId -> IdpPolicyRuleActionProvider { idpPolicyRuleActionProviderId, ..} ) <$> f idpPolicyRuleActionProviderId
{-# INLINE idpPolicyRuleActionProviderIdL #-}

-- | 'idpPolicyRuleActionProviderType' Lens
idpPolicyRuleActionProviderTypeL :: Lens_' IdpPolicyRuleActionProvider (Maybe Text)
idpPolicyRuleActionProviderTypeL f IdpPolicyRuleActionProvider{..} = (\idpPolicyRuleActionProviderType -> IdpPolicyRuleActionProvider { idpPolicyRuleActionProviderType, ..} ) <$> f idpPolicyRuleActionProviderType
{-# INLINE idpPolicyRuleActionProviderTypeL #-}



-- * IframeEmbedScopeAllowedApps



-- * ImageUploadResponse

-- | 'imageUploadResponseUrl' Lens
imageUploadResponseUrlL :: Lens_' ImageUploadResponse (Maybe Text)
imageUploadResponseUrlL f ImageUploadResponse{..} = (\imageUploadResponseUrl -> ImageUploadResponse { imageUploadResponseUrl, ..} ) <$> f imageUploadResponseUrl
{-# INLINE imageUploadResponseUrlL #-}



-- * InactivityPolicyRuleCondition

-- | 'inactivityPolicyRuleConditionNumber' Lens
inactivityPolicyRuleConditionNumberL :: Lens_' InactivityPolicyRuleCondition (Maybe Int)
inactivityPolicyRuleConditionNumberL f InactivityPolicyRuleCondition{..} = (\inactivityPolicyRuleConditionNumber -> InactivityPolicyRuleCondition { inactivityPolicyRuleConditionNumber, ..} ) <$> f inactivityPolicyRuleConditionNumber
{-# INLINE inactivityPolicyRuleConditionNumberL #-}

-- | 'inactivityPolicyRuleConditionUnit' Lens
inactivityPolicyRuleConditionUnitL :: Lens_' InactivityPolicyRuleCondition (Maybe Text)
inactivityPolicyRuleConditionUnitL f InactivityPolicyRuleCondition{..} = (\inactivityPolicyRuleConditionUnit -> InactivityPolicyRuleCondition { inactivityPolicyRuleConditionUnit, ..} ) <$> f inactivityPolicyRuleConditionUnit
{-# INLINE inactivityPolicyRuleConditionUnitL #-}



-- * InlineHook

-- | 'inlineHookLinks' Lens
inlineHookLinksL :: Lens_' InlineHook (Maybe (Map.Map String A.Value))
inlineHookLinksL f InlineHook{..} = (\inlineHookLinks -> InlineHook { inlineHookLinks, ..} ) <$> f inlineHookLinks
{-# INLINE inlineHookLinksL #-}

-- | 'inlineHookChannel' Lens
inlineHookChannelL :: Lens_' InlineHook (Maybe InlineHookChannel)
inlineHookChannelL f InlineHook{..} = (\inlineHookChannel -> InlineHook { inlineHookChannel, ..} ) <$> f inlineHookChannel
{-# INLINE inlineHookChannelL #-}

-- | 'inlineHookCreated' Lens
inlineHookCreatedL :: Lens_' InlineHook (Maybe DateTime)
inlineHookCreatedL f InlineHook{..} = (\inlineHookCreated -> InlineHook { inlineHookCreated, ..} ) <$> f inlineHookCreated
{-# INLINE inlineHookCreatedL #-}

-- | 'inlineHookId' Lens
inlineHookIdL :: Lens_' InlineHook (Maybe Text)
inlineHookIdL f InlineHook{..} = (\inlineHookId -> InlineHook { inlineHookId, ..} ) <$> f inlineHookId
{-# INLINE inlineHookIdL #-}

-- | 'inlineHookLastUpdated' Lens
inlineHookLastUpdatedL :: Lens_' InlineHook (Maybe DateTime)
inlineHookLastUpdatedL f InlineHook{..} = (\inlineHookLastUpdated -> InlineHook { inlineHookLastUpdated, ..} ) <$> f inlineHookLastUpdated
{-# INLINE inlineHookLastUpdatedL #-}

-- | 'inlineHookName' Lens
inlineHookNameL :: Lens_' InlineHook (Maybe Text)
inlineHookNameL f InlineHook{..} = (\inlineHookName -> InlineHook { inlineHookName, ..} ) <$> f inlineHookName
{-# INLINE inlineHookNameL #-}

-- | 'inlineHookStatus' Lens
inlineHookStatusL :: Lens_' InlineHook (Maybe InlineHookStatus)
inlineHookStatusL f InlineHook{..} = (\inlineHookStatus -> InlineHook { inlineHookStatus, ..} ) <$> f inlineHookStatus
{-# INLINE inlineHookStatusL #-}

-- | 'inlineHookType' Lens
inlineHookTypeL :: Lens_' InlineHook (Maybe InlineHookType)
inlineHookTypeL f InlineHook{..} = (\inlineHookType -> InlineHook { inlineHookType, ..} ) <$> f inlineHookType
{-# INLINE inlineHookTypeL #-}

-- | 'inlineHookVersion' Lens
inlineHookVersionL :: Lens_' InlineHook (Maybe Text)
inlineHookVersionL f InlineHook{..} = (\inlineHookVersion -> InlineHook { inlineHookVersion, ..} ) <$> f inlineHookVersion
{-# INLINE inlineHookVersionL #-}



-- * InlineHookChannel

-- | 'inlineHookChannelConfig' Lens
inlineHookChannelConfigL :: Lens_' InlineHookChannel (Maybe InlineHookChannelConfig)
inlineHookChannelConfigL f InlineHookChannel{..} = (\inlineHookChannelConfig -> InlineHookChannel { inlineHookChannelConfig, ..} ) <$> f inlineHookChannelConfig
{-# INLINE inlineHookChannelConfigL #-}

-- | 'inlineHookChannelType' Lens
inlineHookChannelTypeL :: Lens_' InlineHookChannel (Maybe E'Type2)
inlineHookChannelTypeL f InlineHookChannel{..} = (\inlineHookChannelType -> InlineHookChannel { inlineHookChannelType, ..} ) <$> f inlineHookChannelType
{-# INLINE inlineHookChannelTypeL #-}

-- | 'inlineHookChannelVersion' Lens
inlineHookChannelVersionL :: Lens_' InlineHookChannel (Maybe Text)
inlineHookChannelVersionL f InlineHookChannel{..} = (\inlineHookChannelVersion -> InlineHookChannel { inlineHookChannelVersion, ..} ) <$> f inlineHookChannelVersion
{-# INLINE inlineHookChannelVersionL #-}



-- * InlineHookChannelConfig

-- | 'inlineHookChannelConfigAuthScheme' Lens
inlineHookChannelConfigAuthSchemeL :: Lens_' InlineHookChannelConfig (Maybe InlineHookChannelConfigAuthScheme)
inlineHookChannelConfigAuthSchemeL f InlineHookChannelConfig{..} = (\inlineHookChannelConfigAuthScheme -> InlineHookChannelConfig { inlineHookChannelConfigAuthScheme, ..} ) <$> f inlineHookChannelConfigAuthScheme
{-# INLINE inlineHookChannelConfigAuthSchemeL #-}

-- | 'inlineHookChannelConfigHeaders' Lens
inlineHookChannelConfigHeadersL :: Lens_' InlineHookChannelConfig (Maybe [InlineHookChannelConfigHeaders])
inlineHookChannelConfigHeadersL f InlineHookChannelConfig{..} = (\inlineHookChannelConfigHeaders -> InlineHookChannelConfig { inlineHookChannelConfigHeaders, ..} ) <$> f inlineHookChannelConfigHeaders
{-# INLINE inlineHookChannelConfigHeadersL #-}

-- | 'inlineHookChannelConfigUri' Lens
inlineHookChannelConfigUriL :: Lens_' InlineHookChannelConfig (Maybe Text)
inlineHookChannelConfigUriL f InlineHookChannelConfig{..} = (\inlineHookChannelConfigUri -> InlineHookChannelConfig { inlineHookChannelConfigUri, ..} ) <$> f inlineHookChannelConfigUri
{-# INLINE inlineHookChannelConfigUriL #-}

-- | 'inlineHookChannelConfigMethod' Lens
inlineHookChannelConfigMethodL :: Lens_' InlineHookChannelConfig (Maybe Text)
inlineHookChannelConfigMethodL f InlineHookChannelConfig{..} = (\inlineHookChannelConfigMethod -> InlineHookChannelConfig { inlineHookChannelConfigMethod, ..} ) <$> f inlineHookChannelConfigMethod
{-# INLINE inlineHookChannelConfigMethodL #-}



-- * InlineHookChannelConfigAuthScheme

-- | 'inlineHookChannelConfigAuthSchemeKey' Lens
inlineHookChannelConfigAuthSchemeKeyL :: Lens_' InlineHookChannelConfigAuthScheme (Maybe Text)
inlineHookChannelConfigAuthSchemeKeyL f InlineHookChannelConfigAuthScheme{..} = (\inlineHookChannelConfigAuthSchemeKey -> InlineHookChannelConfigAuthScheme { inlineHookChannelConfigAuthSchemeKey, ..} ) <$> f inlineHookChannelConfigAuthSchemeKey
{-# INLINE inlineHookChannelConfigAuthSchemeKeyL #-}

-- | 'inlineHookChannelConfigAuthSchemeType' Lens
inlineHookChannelConfigAuthSchemeTypeL :: Lens_' InlineHookChannelConfigAuthScheme (Maybe Text)
inlineHookChannelConfigAuthSchemeTypeL f InlineHookChannelConfigAuthScheme{..} = (\inlineHookChannelConfigAuthSchemeType -> InlineHookChannelConfigAuthScheme { inlineHookChannelConfigAuthSchemeType, ..} ) <$> f inlineHookChannelConfigAuthSchemeType
{-# INLINE inlineHookChannelConfigAuthSchemeTypeL #-}

-- | 'inlineHookChannelConfigAuthSchemeValue' Lens
inlineHookChannelConfigAuthSchemeValueL :: Lens_' InlineHookChannelConfigAuthScheme (Maybe Text)
inlineHookChannelConfigAuthSchemeValueL f InlineHookChannelConfigAuthScheme{..} = (\inlineHookChannelConfigAuthSchemeValue -> InlineHookChannelConfigAuthScheme { inlineHookChannelConfigAuthSchemeValue, ..} ) <$> f inlineHookChannelConfigAuthSchemeValue
{-# INLINE inlineHookChannelConfigAuthSchemeValueL #-}



-- * InlineHookChannelConfigHeaders

-- | 'inlineHookChannelConfigHeadersKey' Lens
inlineHookChannelConfigHeadersKeyL :: Lens_' InlineHookChannelConfigHeaders (Maybe Text)
inlineHookChannelConfigHeadersKeyL f InlineHookChannelConfigHeaders{..} = (\inlineHookChannelConfigHeadersKey -> InlineHookChannelConfigHeaders { inlineHookChannelConfigHeadersKey, ..} ) <$> f inlineHookChannelConfigHeadersKey
{-# INLINE inlineHookChannelConfigHeadersKeyL #-}

-- | 'inlineHookChannelConfigHeadersValue' Lens
inlineHookChannelConfigHeadersValueL :: Lens_' InlineHookChannelConfigHeaders (Maybe Text)
inlineHookChannelConfigHeadersValueL f InlineHookChannelConfigHeaders{..} = (\inlineHookChannelConfigHeadersValue -> InlineHookChannelConfigHeaders { inlineHookChannelConfigHeadersValue, ..} ) <$> f inlineHookChannelConfigHeadersValue
{-# INLINE inlineHookChannelConfigHeadersValueL #-}



-- * InlineHookResponse

-- | 'inlineHookResponseCommands' Lens
inlineHookResponseCommandsL :: Lens_' InlineHookResponse (Maybe [InlineHookResponseCommands])
inlineHookResponseCommandsL f InlineHookResponse{..} = (\inlineHookResponseCommands -> InlineHookResponse { inlineHookResponseCommands, ..} ) <$> f inlineHookResponseCommands
{-# INLINE inlineHookResponseCommandsL #-}



-- * InlineHookResponseCommandValue

-- | 'inlineHookResponseCommandValueOp' Lens
inlineHookResponseCommandValueOpL :: Lens_' InlineHookResponseCommandValue (Maybe Text)
inlineHookResponseCommandValueOpL f InlineHookResponseCommandValue{..} = (\inlineHookResponseCommandValueOp -> InlineHookResponseCommandValue { inlineHookResponseCommandValueOp, ..} ) <$> f inlineHookResponseCommandValueOp
{-# INLINE inlineHookResponseCommandValueOpL #-}

-- | 'inlineHookResponseCommandValuePath' Lens
inlineHookResponseCommandValuePathL :: Lens_' InlineHookResponseCommandValue (Maybe Text)
inlineHookResponseCommandValuePathL f InlineHookResponseCommandValue{..} = (\inlineHookResponseCommandValuePath -> InlineHookResponseCommandValue { inlineHookResponseCommandValuePath, ..} ) <$> f inlineHookResponseCommandValuePath
{-# INLINE inlineHookResponseCommandValuePathL #-}

-- | 'inlineHookResponseCommandValueValue' Lens
inlineHookResponseCommandValueValueL :: Lens_' InlineHookResponseCommandValue (Maybe Text)
inlineHookResponseCommandValueValueL f InlineHookResponseCommandValue{..} = (\inlineHookResponseCommandValueValue -> InlineHookResponseCommandValue { inlineHookResponseCommandValueValue, ..} ) <$> f inlineHookResponseCommandValueValue
{-# INLINE inlineHookResponseCommandValueValueL #-}



-- * InlineHookResponseCommands

-- | 'inlineHookResponseCommandsType' Lens
inlineHookResponseCommandsTypeL :: Lens_' InlineHookResponseCommands (Maybe Text)
inlineHookResponseCommandsTypeL f InlineHookResponseCommands{..} = (\inlineHookResponseCommandsType -> InlineHookResponseCommands { inlineHookResponseCommandsType, ..} ) <$> f inlineHookResponseCommandsType
{-# INLINE inlineHookResponseCommandsTypeL #-}

-- | 'inlineHookResponseCommandsValue' Lens
inlineHookResponseCommandsValueL :: Lens_' InlineHookResponseCommands (Maybe [InlineHookResponseCommandValue])
inlineHookResponseCommandsValueL f InlineHookResponseCommands{..} = (\inlineHookResponseCommandsValue -> InlineHookResponseCommands { inlineHookResponseCommandsValue, ..} ) <$> f inlineHookResponseCommandsValue
{-# INLINE inlineHookResponseCommandsValueL #-}



-- * InlineHookStatus



-- * InlineHookType



-- * IonField

-- | 'ionFieldForm' Lens
ionFieldFormL :: Lens_' IonField (Maybe IonForm)
ionFieldFormL f IonField{..} = (\ionFieldForm -> IonField { ionFieldForm, ..} ) <$> f ionFieldForm
{-# INLINE ionFieldFormL #-}

-- | 'ionFieldLabel' Lens
ionFieldLabelL :: Lens_' IonField (Maybe Text)
ionFieldLabelL f IonField{..} = (\ionFieldLabel -> IonField { ionFieldLabel, ..} ) <$> f ionFieldLabel
{-# INLINE ionFieldLabelL #-}

-- | 'ionFieldMutable' Lens
ionFieldMutableL :: Lens_' IonField (Maybe Bool)
ionFieldMutableL f IonField{..} = (\ionFieldMutable -> IonField { ionFieldMutable, ..} ) <$> f ionFieldMutable
{-# INLINE ionFieldMutableL #-}

-- | 'ionFieldName' Lens
ionFieldNameL :: Lens_' IonField (Maybe Text)
ionFieldNameL f IonField{..} = (\ionFieldName -> IonField { ionFieldName, ..} ) <$> f ionFieldName
{-# INLINE ionFieldNameL #-}

-- | 'ionFieldRequired' Lens
ionFieldRequiredL :: Lens_' IonField (Maybe Bool)
ionFieldRequiredL f IonField{..} = (\ionFieldRequired -> IonField { ionFieldRequired, ..} ) <$> f ionFieldRequired
{-# INLINE ionFieldRequiredL #-}

-- | 'ionFieldSecret' Lens
ionFieldSecretL :: Lens_' IonField (Maybe Bool)
ionFieldSecretL f IonField{..} = (\ionFieldSecret -> IonField { ionFieldSecret, ..} ) <$> f ionFieldSecret
{-# INLINE ionFieldSecretL #-}

-- | 'ionFieldType' Lens
ionFieldTypeL :: Lens_' IonField (Maybe Text)
ionFieldTypeL f IonField{..} = (\ionFieldType -> IonField { ionFieldType, ..} ) <$> f ionFieldType
{-# INLINE ionFieldTypeL #-}

-- | 'ionFieldValue' Lens
ionFieldValueL :: Lens_' IonField (Maybe (Map.Map String A.Value))
ionFieldValueL f IonField{..} = (\ionFieldValue -> IonField { ionFieldValue, ..} ) <$> f ionFieldValue
{-# INLINE ionFieldValueL #-}

-- | 'ionFieldVisible' Lens
ionFieldVisibleL :: Lens_' IonField (Maybe Bool)
ionFieldVisibleL f IonField{..} = (\ionFieldVisible -> IonField { ionFieldVisible, ..} ) <$> f ionFieldVisible
{-# INLINE ionFieldVisibleL #-}



-- * IonForm

-- | 'ionFormAccepts' Lens
ionFormAcceptsL :: Lens_' IonForm (Maybe Text)
ionFormAcceptsL f IonForm{..} = (\ionFormAccepts -> IonForm { ionFormAccepts, ..} ) <$> f ionFormAccepts
{-# INLINE ionFormAcceptsL #-}

-- | 'ionFormHref' Lens
ionFormHrefL :: Lens_' IonForm (Maybe Text)
ionFormHrefL f IonForm{..} = (\ionFormHref -> IonForm { ionFormHref, ..} ) <$> f ionFormHref
{-# INLINE ionFormHrefL #-}

-- | 'ionFormMethod' Lens
ionFormMethodL :: Lens_' IonForm (Maybe Text)
ionFormMethodL f IonForm{..} = (\ionFormMethod -> IonForm { ionFormMethod, ..} ) <$> f ionFormMethod
{-# INLINE ionFormMethodL #-}

-- | 'ionFormName' Lens
ionFormNameL :: Lens_' IonForm (Maybe Text)
ionFormNameL f IonForm{..} = (\ionFormName -> IonForm { ionFormName, ..} ) <$> f ionFormName
{-# INLINE ionFormNameL #-}

-- | 'ionFormProduces' Lens
ionFormProducesL :: Lens_' IonForm (Maybe Text)
ionFormProducesL f IonForm{..} = (\ionFormProduces -> IonForm { ionFormProduces, ..} ) <$> f ionFormProduces
{-# INLINE ionFormProducesL #-}

-- | 'ionFormRefresh' Lens
ionFormRefreshL :: Lens_' IonForm (Maybe Int)
ionFormRefreshL f IonForm{..} = (\ionFormRefresh -> IonForm { ionFormRefresh, ..} ) <$> f ionFormRefresh
{-# INLINE ionFormRefreshL #-}

-- | 'ionFormRel' Lens
ionFormRelL :: Lens_' IonForm (Maybe [Text])
ionFormRelL f IonForm{..} = (\ionFormRel -> IonForm { ionFormRel, ..} ) <$> f ionFormRel
{-# INLINE ionFormRelL #-}

-- | 'ionFormRelatesTo' Lens
ionFormRelatesToL :: Lens_' IonForm (Maybe [Text])
ionFormRelatesToL f IonForm{..} = (\ionFormRelatesTo -> IonForm { ionFormRelatesTo, ..} ) <$> f ionFormRelatesTo
{-# INLINE ionFormRelatesToL #-}

-- | 'ionFormValue' Lens
ionFormValueL :: Lens_' IonForm (Maybe [IonField])
ionFormValueL f IonForm{..} = (\ionFormValue -> IonForm { ionFormValue, ..} ) <$> f ionFormValue
{-# INLINE ionFormValueL #-}



-- * JsonWebKey

-- | 'jsonWebKeyLinks' Lens
jsonWebKeyLinksL :: Lens_' JsonWebKey (Maybe (Map.Map String A.Value))
jsonWebKeyLinksL f JsonWebKey{..} = (\jsonWebKeyLinks -> JsonWebKey { jsonWebKeyLinks, ..} ) <$> f jsonWebKeyLinks
{-# INLINE jsonWebKeyLinksL #-}

-- | 'jsonWebKeyAlg' Lens
jsonWebKeyAlgL :: Lens_' JsonWebKey (Maybe Text)
jsonWebKeyAlgL f JsonWebKey{..} = (\jsonWebKeyAlg -> JsonWebKey { jsonWebKeyAlg, ..} ) <$> f jsonWebKeyAlg
{-# INLINE jsonWebKeyAlgL #-}

-- | 'jsonWebKeyCreated' Lens
jsonWebKeyCreatedL :: Lens_' JsonWebKey (Maybe DateTime)
jsonWebKeyCreatedL f JsonWebKey{..} = (\jsonWebKeyCreated -> JsonWebKey { jsonWebKeyCreated, ..} ) <$> f jsonWebKeyCreated
{-# INLINE jsonWebKeyCreatedL #-}

-- | 'jsonWebKeyE' Lens
jsonWebKeyEL :: Lens_' JsonWebKey (Maybe Text)
jsonWebKeyEL f JsonWebKey{..} = (\jsonWebKeyE -> JsonWebKey { jsonWebKeyE, ..} ) <$> f jsonWebKeyE
{-# INLINE jsonWebKeyEL #-}

-- | 'jsonWebKeyExpiresAt' Lens
jsonWebKeyExpiresAtL :: Lens_' JsonWebKey (Maybe DateTime)
jsonWebKeyExpiresAtL f JsonWebKey{..} = (\jsonWebKeyExpiresAt -> JsonWebKey { jsonWebKeyExpiresAt, ..} ) <$> f jsonWebKeyExpiresAt
{-# INLINE jsonWebKeyExpiresAtL #-}

-- | 'jsonWebKeyKeyOps' Lens
jsonWebKeyKeyOpsL :: Lens_' JsonWebKey (Maybe [Text])
jsonWebKeyKeyOpsL f JsonWebKey{..} = (\jsonWebKeyKeyOps -> JsonWebKey { jsonWebKeyKeyOps, ..} ) <$> f jsonWebKeyKeyOps
{-# INLINE jsonWebKeyKeyOpsL #-}

-- | 'jsonWebKeyKid' Lens
jsonWebKeyKidL :: Lens_' JsonWebKey (Maybe Text)
jsonWebKeyKidL f JsonWebKey{..} = (\jsonWebKeyKid -> JsonWebKey { jsonWebKeyKid, ..} ) <$> f jsonWebKeyKid
{-# INLINE jsonWebKeyKidL #-}

-- | 'jsonWebKeyKty' Lens
jsonWebKeyKtyL :: Lens_' JsonWebKey (Maybe Text)
jsonWebKeyKtyL f JsonWebKey{..} = (\jsonWebKeyKty -> JsonWebKey { jsonWebKeyKty, ..} ) <$> f jsonWebKeyKty
{-# INLINE jsonWebKeyKtyL #-}

-- | 'jsonWebKeyLastUpdated' Lens
jsonWebKeyLastUpdatedL :: Lens_' JsonWebKey (Maybe DateTime)
jsonWebKeyLastUpdatedL f JsonWebKey{..} = (\jsonWebKeyLastUpdated -> JsonWebKey { jsonWebKeyLastUpdated, ..} ) <$> f jsonWebKeyLastUpdated
{-# INLINE jsonWebKeyLastUpdatedL #-}

-- | 'jsonWebKeyN' Lens
jsonWebKeyNL :: Lens_' JsonWebKey (Maybe Text)
jsonWebKeyNL f JsonWebKey{..} = (\jsonWebKeyN -> JsonWebKey { jsonWebKeyN, ..} ) <$> f jsonWebKeyN
{-# INLINE jsonWebKeyNL #-}

-- | 'jsonWebKeyStatus' Lens
jsonWebKeyStatusL :: Lens_' JsonWebKey (Maybe Text)
jsonWebKeyStatusL f JsonWebKey{..} = (\jsonWebKeyStatus -> JsonWebKey { jsonWebKeyStatus, ..} ) <$> f jsonWebKeyStatus
{-# INLINE jsonWebKeyStatusL #-}

-- | 'jsonWebKeyUse' Lens
jsonWebKeyUseL :: Lens_' JsonWebKey (Maybe Text)
jsonWebKeyUseL f JsonWebKey{..} = (\jsonWebKeyUse -> JsonWebKey { jsonWebKeyUse, ..} ) <$> f jsonWebKeyUse
{-# INLINE jsonWebKeyUseL #-}

-- | 'jsonWebKeyX5c' Lens
jsonWebKeyX5cL :: Lens_' JsonWebKey (Maybe [Text])
jsonWebKeyX5cL f JsonWebKey{..} = (\jsonWebKeyX5c -> JsonWebKey { jsonWebKeyX5c, ..} ) <$> f jsonWebKeyX5c
{-# INLINE jsonWebKeyX5cL #-}

-- | 'jsonWebKeyX5t' Lens
jsonWebKeyX5tL :: Lens_' JsonWebKey (Maybe Text)
jsonWebKeyX5tL f JsonWebKey{..} = (\jsonWebKeyX5t -> JsonWebKey { jsonWebKeyX5t, ..} ) <$> f jsonWebKeyX5t
{-# INLINE jsonWebKeyX5tL #-}

-- | 'jsonWebKeyX5tS256' Lens
jsonWebKeyX5tS256L :: Lens_' JsonWebKey (Maybe Text)
jsonWebKeyX5tS256L f JsonWebKey{..} = (\jsonWebKeyX5tS256 -> JsonWebKey { jsonWebKeyX5tS256, ..} ) <$> f jsonWebKeyX5tS256
{-# INLINE jsonWebKeyX5tS256L #-}

-- | 'jsonWebKeyX5u' Lens
jsonWebKeyX5uL :: Lens_' JsonWebKey (Maybe Text)
jsonWebKeyX5uL f JsonWebKey{..} = (\jsonWebKeyX5u -> JsonWebKey { jsonWebKeyX5u, ..} ) <$> f jsonWebKeyX5u
{-# INLINE jsonWebKeyX5uL #-}



-- * JwkUse

-- | 'jwkUseUse' Lens
jwkUseUseL :: Lens_' JwkUse (Maybe E'Use)
jwkUseUseL f JwkUse{..} = (\jwkUseUse -> JwkUse { jwkUseUse, ..} ) <$> f jwkUseUse
{-# INLINE jwkUseUseL #-}



-- * LifecycleCreateSettingObject

-- | 'lifecycleCreateSettingObjectStatus' Lens
lifecycleCreateSettingObjectStatusL :: Lens_' LifecycleCreateSettingObject (Maybe EnabledStatus)
lifecycleCreateSettingObjectStatusL f LifecycleCreateSettingObject{..} = (\lifecycleCreateSettingObjectStatus -> LifecycleCreateSettingObject { lifecycleCreateSettingObjectStatus, ..} ) <$> f lifecycleCreateSettingObjectStatus
{-# INLINE lifecycleCreateSettingObjectStatusL #-}



-- * LifecycleDeactivateSettingObject

-- | 'lifecycleDeactivateSettingObjectStatus' Lens
lifecycleDeactivateSettingObjectStatusL :: Lens_' LifecycleDeactivateSettingObject (Maybe EnabledStatus)
lifecycleDeactivateSettingObjectStatusL f LifecycleDeactivateSettingObject{..} = (\lifecycleDeactivateSettingObjectStatus -> LifecycleDeactivateSettingObject { lifecycleDeactivateSettingObjectStatus, ..} ) <$> f lifecycleDeactivateSettingObjectStatus
{-# INLINE lifecycleDeactivateSettingObjectStatusL #-}



-- * LifecycleExpirationPolicyRuleCondition

-- | 'lifecycleExpirationPolicyRuleConditionLifecycleStatus' Lens
lifecycleExpirationPolicyRuleConditionLifecycleStatusL :: Lens_' LifecycleExpirationPolicyRuleCondition (Maybe Text)
lifecycleExpirationPolicyRuleConditionLifecycleStatusL f LifecycleExpirationPolicyRuleCondition{..} = (\lifecycleExpirationPolicyRuleConditionLifecycleStatus -> LifecycleExpirationPolicyRuleCondition { lifecycleExpirationPolicyRuleConditionLifecycleStatus, ..} ) <$> f lifecycleExpirationPolicyRuleConditionLifecycleStatus
{-# INLINE lifecycleExpirationPolicyRuleConditionLifecycleStatusL #-}

-- | 'lifecycleExpirationPolicyRuleConditionNumber' Lens
lifecycleExpirationPolicyRuleConditionNumberL :: Lens_' LifecycleExpirationPolicyRuleCondition (Maybe Int)
lifecycleExpirationPolicyRuleConditionNumberL f LifecycleExpirationPolicyRuleCondition{..} = (\lifecycleExpirationPolicyRuleConditionNumber -> LifecycleExpirationPolicyRuleCondition { lifecycleExpirationPolicyRuleConditionNumber, ..} ) <$> f lifecycleExpirationPolicyRuleConditionNumber
{-# INLINE lifecycleExpirationPolicyRuleConditionNumberL #-}

-- | 'lifecycleExpirationPolicyRuleConditionUnit' Lens
lifecycleExpirationPolicyRuleConditionUnitL :: Lens_' LifecycleExpirationPolicyRuleCondition (Maybe Text)
lifecycleExpirationPolicyRuleConditionUnitL f LifecycleExpirationPolicyRuleCondition{..} = (\lifecycleExpirationPolicyRuleConditionUnit -> LifecycleExpirationPolicyRuleCondition { lifecycleExpirationPolicyRuleConditionUnit, ..} ) <$> f lifecycleExpirationPolicyRuleConditionUnit
{-# INLINE lifecycleExpirationPolicyRuleConditionUnitL #-}



-- * LinkedObject

-- | 'linkedObjectLinks' Lens
linkedObjectLinksL :: Lens_' LinkedObject (Maybe (Map.Map String A.Value))
linkedObjectLinksL f LinkedObject{..} = (\linkedObjectLinks -> LinkedObject { linkedObjectLinks, ..} ) <$> f linkedObjectLinks
{-# INLINE linkedObjectLinksL #-}

-- | 'linkedObjectAssociated' Lens
linkedObjectAssociatedL :: Lens_' LinkedObject (Maybe LinkedObjectDetails)
linkedObjectAssociatedL f LinkedObject{..} = (\linkedObjectAssociated -> LinkedObject { linkedObjectAssociated, ..} ) <$> f linkedObjectAssociated
{-# INLINE linkedObjectAssociatedL #-}

-- | 'linkedObjectPrimary' Lens
linkedObjectPrimaryL :: Lens_' LinkedObject (Maybe LinkedObjectDetails)
linkedObjectPrimaryL f LinkedObject{..} = (\linkedObjectPrimary -> LinkedObject { linkedObjectPrimary, ..} ) <$> f linkedObjectPrimary
{-# INLINE linkedObjectPrimaryL #-}



-- * LinkedObjectDetails

-- | 'linkedObjectDetailsDescription' Lens
linkedObjectDetailsDescriptionL :: Lens_' LinkedObjectDetails (Maybe Text)
linkedObjectDetailsDescriptionL f LinkedObjectDetails{..} = (\linkedObjectDetailsDescription -> LinkedObjectDetails { linkedObjectDetailsDescription, ..} ) <$> f linkedObjectDetailsDescription
{-# INLINE linkedObjectDetailsDescriptionL #-}

-- | 'linkedObjectDetailsName' Lens
linkedObjectDetailsNameL :: Lens_' LinkedObjectDetails (Maybe Text)
linkedObjectDetailsNameL f LinkedObjectDetails{..} = (\linkedObjectDetailsName -> LinkedObjectDetails { linkedObjectDetailsName, ..} ) <$> f linkedObjectDetailsName
{-# INLINE linkedObjectDetailsNameL #-}

-- | 'linkedObjectDetailsTitle' Lens
linkedObjectDetailsTitleL :: Lens_' LinkedObjectDetails (Maybe Text)
linkedObjectDetailsTitleL f LinkedObjectDetails{..} = (\linkedObjectDetailsTitle -> LinkedObjectDetails { linkedObjectDetailsTitle, ..} ) <$> f linkedObjectDetailsTitle
{-# INLINE linkedObjectDetailsTitleL #-}

-- | 'linkedObjectDetailsType' Lens
linkedObjectDetailsTypeL :: Lens_' LinkedObjectDetails (Maybe LinkedObjectDetailsType)
linkedObjectDetailsTypeL f LinkedObjectDetails{..} = (\linkedObjectDetailsType -> LinkedObjectDetails { linkedObjectDetailsType, ..} ) <$> f linkedObjectDetailsType
{-# INLINE linkedObjectDetailsTypeL #-}



-- * LinkedObjectDetailsType



-- * LogActor

-- | 'logActorAlternateId' Lens
logActorAlternateIdL :: Lens_' LogActor (Maybe Text)
logActorAlternateIdL f LogActor{..} = (\logActorAlternateId -> LogActor { logActorAlternateId, ..} ) <$> f logActorAlternateId
{-# INLINE logActorAlternateIdL #-}

-- | 'logActorDetail' Lens
logActorDetailL :: Lens_' LogActor (Maybe (Map.Map String A.Value))
logActorDetailL f LogActor{..} = (\logActorDetail -> LogActor { logActorDetail, ..} ) <$> f logActorDetail
{-# INLINE logActorDetailL #-}

-- | 'logActorDisplayName' Lens
logActorDisplayNameL :: Lens_' LogActor (Maybe Text)
logActorDisplayNameL f LogActor{..} = (\logActorDisplayName -> LogActor { logActorDisplayName, ..} ) <$> f logActorDisplayName
{-# INLINE logActorDisplayNameL #-}

-- | 'logActorId' Lens
logActorIdL :: Lens_' LogActor (Maybe Text)
logActorIdL f LogActor{..} = (\logActorId -> LogActor { logActorId, ..} ) <$> f logActorId
{-# INLINE logActorIdL #-}

-- | 'logActorType' Lens
logActorTypeL :: Lens_' LogActor (Maybe Text)
logActorTypeL f LogActor{..} = (\logActorType -> LogActor { logActorType, ..} ) <$> f logActorType
{-# INLINE logActorTypeL #-}



-- * LogAuthenticationContext

-- | 'logAuthenticationContextAuthenticationProvider' Lens
logAuthenticationContextAuthenticationProviderL :: Lens_' LogAuthenticationContext (Maybe LogAuthenticationProvider)
logAuthenticationContextAuthenticationProviderL f LogAuthenticationContext{..} = (\logAuthenticationContextAuthenticationProvider -> LogAuthenticationContext { logAuthenticationContextAuthenticationProvider, ..} ) <$> f logAuthenticationContextAuthenticationProvider
{-# INLINE logAuthenticationContextAuthenticationProviderL #-}

-- | 'logAuthenticationContextAuthenticationStep' Lens
logAuthenticationContextAuthenticationStepL :: Lens_' LogAuthenticationContext (Maybe Int)
logAuthenticationContextAuthenticationStepL f LogAuthenticationContext{..} = (\logAuthenticationContextAuthenticationStep -> LogAuthenticationContext { logAuthenticationContextAuthenticationStep, ..} ) <$> f logAuthenticationContextAuthenticationStep
{-# INLINE logAuthenticationContextAuthenticationStepL #-}

-- | 'logAuthenticationContextCredentialProvider' Lens
logAuthenticationContextCredentialProviderL :: Lens_' LogAuthenticationContext (Maybe LogCredentialProvider)
logAuthenticationContextCredentialProviderL f LogAuthenticationContext{..} = (\logAuthenticationContextCredentialProvider -> LogAuthenticationContext { logAuthenticationContextCredentialProvider, ..} ) <$> f logAuthenticationContextCredentialProvider
{-# INLINE logAuthenticationContextCredentialProviderL #-}

-- | 'logAuthenticationContextCredentialType' Lens
logAuthenticationContextCredentialTypeL :: Lens_' LogAuthenticationContext (Maybe LogCredentialType)
logAuthenticationContextCredentialTypeL f LogAuthenticationContext{..} = (\logAuthenticationContextCredentialType -> LogAuthenticationContext { logAuthenticationContextCredentialType, ..} ) <$> f logAuthenticationContextCredentialType
{-# INLINE logAuthenticationContextCredentialTypeL #-}

-- | 'logAuthenticationContextExternalSessionId' Lens
logAuthenticationContextExternalSessionIdL :: Lens_' LogAuthenticationContext (Maybe Text)
logAuthenticationContextExternalSessionIdL f LogAuthenticationContext{..} = (\logAuthenticationContextExternalSessionId -> LogAuthenticationContext { logAuthenticationContextExternalSessionId, ..} ) <$> f logAuthenticationContextExternalSessionId
{-# INLINE logAuthenticationContextExternalSessionIdL #-}

-- | 'logAuthenticationContextInterface' Lens
logAuthenticationContextInterfaceL :: Lens_' LogAuthenticationContext (Maybe Text)
logAuthenticationContextInterfaceL f LogAuthenticationContext{..} = (\logAuthenticationContextInterface -> LogAuthenticationContext { logAuthenticationContextInterface, ..} ) <$> f logAuthenticationContextInterface
{-# INLINE logAuthenticationContextInterfaceL #-}

-- | 'logAuthenticationContextIssuer' Lens
logAuthenticationContextIssuerL :: Lens_' LogAuthenticationContext (Maybe LogIssuer)
logAuthenticationContextIssuerL f LogAuthenticationContext{..} = (\logAuthenticationContextIssuer -> LogAuthenticationContext { logAuthenticationContextIssuer, ..} ) <$> f logAuthenticationContextIssuer
{-# INLINE logAuthenticationContextIssuerL #-}



-- * LogAuthenticationProvider



-- * LogClient

-- | 'logClientDevice' Lens
logClientDeviceL :: Lens_' LogClient (Maybe Text)
logClientDeviceL f LogClient{..} = (\logClientDevice -> LogClient { logClientDevice, ..} ) <$> f logClientDevice
{-# INLINE logClientDeviceL #-}

-- | 'logClientGeographicalContext' Lens
logClientGeographicalContextL :: Lens_' LogClient (Maybe LogGeographicalContext)
logClientGeographicalContextL f LogClient{..} = (\logClientGeographicalContext -> LogClient { logClientGeographicalContext, ..} ) <$> f logClientGeographicalContext
{-# INLINE logClientGeographicalContextL #-}

-- | 'logClientId' Lens
logClientIdL :: Lens_' LogClient (Maybe Text)
logClientIdL f LogClient{..} = (\logClientId -> LogClient { logClientId, ..} ) <$> f logClientId
{-# INLINE logClientIdL #-}

-- | 'logClientIpAddress' Lens
logClientIpAddressL :: Lens_' LogClient (Maybe Text)
logClientIpAddressL f LogClient{..} = (\logClientIpAddress -> LogClient { logClientIpAddress, ..} ) <$> f logClientIpAddress
{-# INLINE logClientIpAddressL #-}

-- | 'logClientUserAgent' Lens
logClientUserAgentL :: Lens_' LogClient (Maybe LogUserAgent)
logClientUserAgentL f LogClient{..} = (\logClientUserAgent -> LogClient { logClientUserAgent, ..} ) <$> f logClientUserAgent
{-# INLINE logClientUserAgentL #-}

-- | 'logClientZone' Lens
logClientZoneL :: Lens_' LogClient (Maybe Text)
logClientZoneL f LogClient{..} = (\logClientZone -> LogClient { logClientZone, ..} ) <$> f logClientZone
{-# INLINE logClientZoneL #-}



-- * LogCredentialProvider



-- * LogCredentialType



-- * LogDebugContext

-- | 'logDebugContextDebugData' Lens
logDebugContextDebugDataL :: Lens_' LogDebugContext (Maybe (Map.Map String A.Value))
logDebugContextDebugDataL f LogDebugContext{..} = (\logDebugContextDebugData -> LogDebugContext { logDebugContextDebugData, ..} ) <$> f logDebugContextDebugData
{-# INLINE logDebugContextDebugDataL #-}



-- * LogEvent

-- | 'logEventActor' Lens
logEventActorL :: Lens_' LogEvent (Maybe LogActor)
logEventActorL f LogEvent{..} = (\logEventActor -> LogEvent { logEventActor, ..} ) <$> f logEventActor
{-# INLINE logEventActorL #-}

-- | 'logEventAuthenticationContext' Lens
logEventAuthenticationContextL :: Lens_' LogEvent (Maybe LogAuthenticationContext)
logEventAuthenticationContextL f LogEvent{..} = (\logEventAuthenticationContext -> LogEvent { logEventAuthenticationContext, ..} ) <$> f logEventAuthenticationContext
{-# INLINE logEventAuthenticationContextL #-}

-- | 'logEventClient' Lens
logEventClientL :: Lens_' LogEvent (Maybe LogClient)
logEventClientL f LogEvent{..} = (\logEventClient -> LogEvent { logEventClient, ..} ) <$> f logEventClient
{-# INLINE logEventClientL #-}

-- | 'logEventDebugContext' Lens
logEventDebugContextL :: Lens_' LogEvent (Maybe LogDebugContext)
logEventDebugContextL f LogEvent{..} = (\logEventDebugContext -> LogEvent { logEventDebugContext, ..} ) <$> f logEventDebugContext
{-# INLINE logEventDebugContextL #-}

-- | 'logEventDisplayMessage' Lens
logEventDisplayMessageL :: Lens_' LogEvent (Maybe Text)
logEventDisplayMessageL f LogEvent{..} = (\logEventDisplayMessage -> LogEvent { logEventDisplayMessage, ..} ) <$> f logEventDisplayMessage
{-# INLINE logEventDisplayMessageL #-}

-- | 'logEventEventType' Lens
logEventEventTypeL :: Lens_' LogEvent (Maybe Text)
logEventEventTypeL f LogEvent{..} = (\logEventEventType -> LogEvent { logEventEventType, ..} ) <$> f logEventEventType
{-# INLINE logEventEventTypeL #-}

-- | 'logEventLegacyEventType' Lens
logEventLegacyEventTypeL :: Lens_' LogEvent (Maybe Text)
logEventLegacyEventTypeL f LogEvent{..} = (\logEventLegacyEventType -> LogEvent { logEventLegacyEventType, ..} ) <$> f logEventLegacyEventType
{-# INLINE logEventLegacyEventTypeL #-}

-- | 'logEventOutcome' Lens
logEventOutcomeL :: Lens_' LogEvent (Maybe LogOutcome)
logEventOutcomeL f LogEvent{..} = (\logEventOutcome -> LogEvent { logEventOutcome, ..} ) <$> f logEventOutcome
{-# INLINE logEventOutcomeL #-}

-- | 'logEventPublished' Lens
logEventPublishedL :: Lens_' LogEvent (Maybe DateTime)
logEventPublishedL f LogEvent{..} = (\logEventPublished -> LogEvent { logEventPublished, ..} ) <$> f logEventPublished
{-# INLINE logEventPublishedL #-}

-- | 'logEventRequest' Lens
logEventRequestL :: Lens_' LogEvent (Maybe LogRequest)
logEventRequestL f LogEvent{..} = (\logEventRequest -> LogEvent { logEventRequest, ..} ) <$> f logEventRequest
{-# INLINE logEventRequestL #-}

-- | 'logEventSecurityContext' Lens
logEventSecurityContextL :: Lens_' LogEvent (Maybe LogSecurityContext)
logEventSecurityContextL f LogEvent{..} = (\logEventSecurityContext -> LogEvent { logEventSecurityContext, ..} ) <$> f logEventSecurityContext
{-# INLINE logEventSecurityContextL #-}

-- | 'logEventSeverity' Lens
logEventSeverityL :: Lens_' LogEvent (Maybe LogSeverity)
logEventSeverityL f LogEvent{..} = (\logEventSeverity -> LogEvent { logEventSeverity, ..} ) <$> f logEventSeverity
{-# INLINE logEventSeverityL #-}

-- | 'logEventTarget' Lens
logEventTargetL :: Lens_' LogEvent (Maybe [LogTarget])
logEventTargetL f LogEvent{..} = (\logEventTarget -> LogEvent { logEventTarget, ..} ) <$> f logEventTarget
{-# INLINE logEventTargetL #-}

-- | 'logEventTransaction' Lens
logEventTransactionL :: Lens_' LogEvent (Maybe LogTransaction)
logEventTransactionL f LogEvent{..} = (\logEventTransaction -> LogEvent { logEventTransaction, ..} ) <$> f logEventTransaction
{-# INLINE logEventTransactionL #-}

-- | 'logEventUuid' Lens
logEventUuidL :: Lens_' LogEvent (Maybe Text)
logEventUuidL f LogEvent{..} = (\logEventUuid -> LogEvent { logEventUuid, ..} ) <$> f logEventUuid
{-# INLINE logEventUuidL #-}

-- | 'logEventVersion' Lens
logEventVersionL :: Lens_' LogEvent (Maybe Text)
logEventVersionL f LogEvent{..} = (\logEventVersion -> LogEvent { logEventVersion, ..} ) <$> f logEventVersion
{-# INLINE logEventVersionL #-}



-- * LogGeographicalContext

-- | 'logGeographicalContextCity' Lens
logGeographicalContextCityL :: Lens_' LogGeographicalContext (Maybe Text)
logGeographicalContextCityL f LogGeographicalContext{..} = (\logGeographicalContextCity -> LogGeographicalContext { logGeographicalContextCity, ..} ) <$> f logGeographicalContextCity
{-# INLINE logGeographicalContextCityL #-}

-- | 'logGeographicalContextCountry' Lens
logGeographicalContextCountryL :: Lens_' LogGeographicalContext (Maybe Text)
logGeographicalContextCountryL f LogGeographicalContext{..} = (\logGeographicalContextCountry -> LogGeographicalContext { logGeographicalContextCountry, ..} ) <$> f logGeographicalContextCountry
{-# INLINE logGeographicalContextCountryL #-}

-- | 'logGeographicalContextGeolocation' Lens
logGeographicalContextGeolocationL :: Lens_' LogGeographicalContext (Maybe LogGeolocation)
logGeographicalContextGeolocationL f LogGeographicalContext{..} = (\logGeographicalContextGeolocation -> LogGeographicalContext { logGeographicalContextGeolocation, ..} ) <$> f logGeographicalContextGeolocation
{-# INLINE logGeographicalContextGeolocationL #-}

-- | 'logGeographicalContextPostalCode' Lens
logGeographicalContextPostalCodeL :: Lens_' LogGeographicalContext (Maybe Text)
logGeographicalContextPostalCodeL f LogGeographicalContext{..} = (\logGeographicalContextPostalCode -> LogGeographicalContext { logGeographicalContextPostalCode, ..} ) <$> f logGeographicalContextPostalCode
{-# INLINE logGeographicalContextPostalCodeL #-}

-- | 'logGeographicalContextState' Lens
logGeographicalContextStateL :: Lens_' LogGeographicalContext (Maybe Text)
logGeographicalContextStateL f LogGeographicalContext{..} = (\logGeographicalContextState -> LogGeographicalContext { logGeographicalContextState, ..} ) <$> f logGeographicalContextState
{-# INLINE logGeographicalContextStateL #-}



-- * LogGeolocation

-- | 'logGeolocationLat' Lens
logGeolocationLatL :: Lens_' LogGeolocation (Maybe Double)
logGeolocationLatL f LogGeolocation{..} = (\logGeolocationLat -> LogGeolocation { logGeolocationLat, ..} ) <$> f logGeolocationLat
{-# INLINE logGeolocationLatL #-}

-- | 'logGeolocationLon' Lens
logGeolocationLonL :: Lens_' LogGeolocation (Maybe Double)
logGeolocationLonL f LogGeolocation{..} = (\logGeolocationLon -> LogGeolocation { logGeolocationLon, ..} ) <$> f logGeolocationLon
{-# INLINE logGeolocationLonL #-}



-- * LogIpAddress

-- | 'logIpAddressGeographicalContext' Lens
logIpAddressGeographicalContextL :: Lens_' LogIpAddress (Maybe LogGeographicalContext)
logIpAddressGeographicalContextL f LogIpAddress{..} = (\logIpAddressGeographicalContext -> LogIpAddress { logIpAddressGeographicalContext, ..} ) <$> f logIpAddressGeographicalContext
{-# INLINE logIpAddressGeographicalContextL #-}

-- | 'logIpAddressIp' Lens
logIpAddressIpL :: Lens_' LogIpAddress (Maybe Text)
logIpAddressIpL f LogIpAddress{..} = (\logIpAddressIp -> LogIpAddress { logIpAddressIp, ..} ) <$> f logIpAddressIp
{-# INLINE logIpAddressIpL #-}

-- | 'logIpAddressSource' Lens
logIpAddressSourceL :: Lens_' LogIpAddress (Maybe Text)
logIpAddressSourceL f LogIpAddress{..} = (\logIpAddressSource -> LogIpAddress { logIpAddressSource, ..} ) <$> f logIpAddressSource
{-# INLINE logIpAddressSourceL #-}

-- | 'logIpAddressVersion' Lens
logIpAddressVersionL :: Lens_' LogIpAddress (Maybe Text)
logIpAddressVersionL f LogIpAddress{..} = (\logIpAddressVersion -> LogIpAddress { logIpAddressVersion, ..} ) <$> f logIpAddressVersion
{-# INLINE logIpAddressVersionL #-}



-- * LogIssuer

-- | 'logIssuerId' Lens
logIssuerIdL :: Lens_' LogIssuer (Maybe Text)
logIssuerIdL f LogIssuer{..} = (\logIssuerId -> LogIssuer { logIssuerId, ..} ) <$> f logIssuerId
{-# INLINE logIssuerIdL #-}

-- | 'logIssuerType' Lens
logIssuerTypeL :: Lens_' LogIssuer (Maybe Text)
logIssuerTypeL f LogIssuer{..} = (\logIssuerType -> LogIssuer { logIssuerType, ..} ) <$> f logIssuerType
{-# INLINE logIssuerTypeL #-}



-- * LogOutcome

-- | 'logOutcomeReason' Lens
logOutcomeReasonL :: Lens_' LogOutcome (Maybe Text)
logOutcomeReasonL f LogOutcome{..} = (\logOutcomeReason -> LogOutcome { logOutcomeReason, ..} ) <$> f logOutcomeReason
{-# INLINE logOutcomeReasonL #-}

-- | 'logOutcomeResult' Lens
logOutcomeResultL :: Lens_' LogOutcome (Maybe Text)
logOutcomeResultL f LogOutcome{..} = (\logOutcomeResult -> LogOutcome { logOutcomeResult, ..} ) <$> f logOutcomeResult
{-# INLINE logOutcomeResultL #-}



-- * LogRequest

-- | 'logRequestIpChain' Lens
logRequestIpChainL :: Lens_' LogRequest (Maybe [LogIpAddress])
logRequestIpChainL f LogRequest{..} = (\logRequestIpChain -> LogRequest { logRequestIpChain, ..} ) <$> f logRequestIpChain
{-# INLINE logRequestIpChainL #-}



-- * LogSecurityContext

-- | 'logSecurityContextAsNumber' Lens
logSecurityContextAsNumberL :: Lens_' LogSecurityContext (Maybe Int)
logSecurityContextAsNumberL f LogSecurityContext{..} = (\logSecurityContextAsNumber -> LogSecurityContext { logSecurityContextAsNumber, ..} ) <$> f logSecurityContextAsNumber
{-# INLINE logSecurityContextAsNumberL #-}

-- | 'logSecurityContextAsOrg' Lens
logSecurityContextAsOrgL :: Lens_' LogSecurityContext (Maybe Text)
logSecurityContextAsOrgL f LogSecurityContext{..} = (\logSecurityContextAsOrg -> LogSecurityContext { logSecurityContextAsOrg, ..} ) <$> f logSecurityContextAsOrg
{-# INLINE logSecurityContextAsOrgL #-}

-- | 'logSecurityContextDomain' Lens
logSecurityContextDomainL :: Lens_' LogSecurityContext (Maybe Text)
logSecurityContextDomainL f LogSecurityContext{..} = (\logSecurityContextDomain -> LogSecurityContext { logSecurityContextDomain, ..} ) <$> f logSecurityContextDomain
{-# INLINE logSecurityContextDomainL #-}

-- | 'logSecurityContextIsProxy' Lens
logSecurityContextIsProxyL :: Lens_' LogSecurityContext (Maybe Bool)
logSecurityContextIsProxyL f LogSecurityContext{..} = (\logSecurityContextIsProxy -> LogSecurityContext { logSecurityContextIsProxy, ..} ) <$> f logSecurityContextIsProxy
{-# INLINE logSecurityContextIsProxyL #-}

-- | 'logSecurityContextIsp' Lens
logSecurityContextIspL :: Lens_' LogSecurityContext (Maybe Text)
logSecurityContextIspL f LogSecurityContext{..} = (\logSecurityContextIsp -> LogSecurityContext { logSecurityContextIsp, ..} ) <$> f logSecurityContextIsp
{-# INLINE logSecurityContextIspL #-}



-- * LogSeverity



-- * LogTarget

-- | 'logTargetAlternateId' Lens
logTargetAlternateIdL :: Lens_' LogTarget (Maybe Text)
logTargetAlternateIdL f LogTarget{..} = (\logTargetAlternateId -> LogTarget { logTargetAlternateId, ..} ) <$> f logTargetAlternateId
{-# INLINE logTargetAlternateIdL #-}

-- | 'logTargetDetailEntry' Lens
logTargetDetailEntryL :: Lens_' LogTarget (Maybe (Map.Map String A.Value))
logTargetDetailEntryL f LogTarget{..} = (\logTargetDetailEntry -> LogTarget { logTargetDetailEntry, ..} ) <$> f logTargetDetailEntry
{-# INLINE logTargetDetailEntryL #-}

-- | 'logTargetDisplayName' Lens
logTargetDisplayNameL :: Lens_' LogTarget (Maybe Text)
logTargetDisplayNameL f LogTarget{..} = (\logTargetDisplayName -> LogTarget { logTargetDisplayName, ..} ) <$> f logTargetDisplayName
{-# INLINE logTargetDisplayNameL #-}

-- | 'logTargetId' Lens
logTargetIdL :: Lens_' LogTarget (Maybe Text)
logTargetIdL f LogTarget{..} = (\logTargetId -> LogTarget { logTargetId, ..} ) <$> f logTargetId
{-# INLINE logTargetIdL #-}

-- | 'logTargetType' Lens
logTargetTypeL :: Lens_' LogTarget (Maybe Text)
logTargetTypeL f LogTarget{..} = (\logTargetType -> LogTarget { logTargetType, ..} ) <$> f logTargetType
{-# INLINE logTargetTypeL #-}



-- * LogTransaction

-- | 'logTransactionDetail' Lens
logTransactionDetailL :: Lens_' LogTransaction (Maybe (Map.Map String A.Value))
logTransactionDetailL f LogTransaction{..} = (\logTransactionDetail -> LogTransaction { logTransactionDetail, ..} ) <$> f logTransactionDetail
{-# INLINE logTransactionDetailL #-}

-- | 'logTransactionId' Lens
logTransactionIdL :: Lens_' LogTransaction (Maybe Text)
logTransactionIdL f LogTransaction{..} = (\logTransactionId -> LogTransaction { logTransactionId, ..} ) <$> f logTransactionId
{-# INLINE logTransactionIdL #-}

-- | 'logTransactionType' Lens
logTransactionTypeL :: Lens_' LogTransaction (Maybe Text)
logTransactionTypeL f LogTransaction{..} = (\logTransactionType -> LogTransaction { logTransactionType, ..} ) <$> f logTransactionType
{-# INLINE logTransactionTypeL #-}



-- * LogUserAgent

-- | 'logUserAgentBrowser' Lens
logUserAgentBrowserL :: Lens_' LogUserAgent (Maybe Text)
logUserAgentBrowserL f LogUserAgent{..} = (\logUserAgentBrowser -> LogUserAgent { logUserAgentBrowser, ..} ) <$> f logUserAgentBrowser
{-# INLINE logUserAgentBrowserL #-}

-- | 'logUserAgentOs' Lens
logUserAgentOsL :: Lens_' LogUserAgent (Maybe Text)
logUserAgentOsL f LogUserAgent{..} = (\logUserAgentOs -> LogUserAgent { logUserAgentOs, ..} ) <$> f logUserAgentOs
{-# INLINE logUserAgentOsL #-}

-- | 'logUserAgentRawUserAgent' Lens
logUserAgentRawUserAgentL :: Lens_' LogUserAgent (Maybe Text)
logUserAgentRawUserAgentL f LogUserAgent{..} = (\logUserAgentRawUserAgent -> LogUserAgent { logUserAgentRawUserAgent, ..} ) <$> f logUserAgentRawUserAgent
{-# INLINE logUserAgentRawUserAgentL #-}



-- * MDMEnrollmentPolicyRuleCondition

-- | 'mDMEnrollmentPolicyRuleConditionBlockNonSafeAndroid' Lens
mDMEnrollmentPolicyRuleConditionBlockNonSafeAndroidL :: Lens_' MDMEnrollmentPolicyRuleCondition (Maybe Bool)
mDMEnrollmentPolicyRuleConditionBlockNonSafeAndroidL f MDMEnrollmentPolicyRuleCondition{..} = (\mDMEnrollmentPolicyRuleConditionBlockNonSafeAndroid -> MDMEnrollmentPolicyRuleCondition { mDMEnrollmentPolicyRuleConditionBlockNonSafeAndroid, ..} ) <$> f mDMEnrollmentPolicyRuleConditionBlockNonSafeAndroid
{-# INLINE mDMEnrollmentPolicyRuleConditionBlockNonSafeAndroidL #-}

-- | 'mDMEnrollmentPolicyRuleConditionEnrollment' Lens
mDMEnrollmentPolicyRuleConditionEnrollmentL :: Lens_' MDMEnrollmentPolicyRuleCondition (Maybe E'Enrollment)
mDMEnrollmentPolicyRuleConditionEnrollmentL f MDMEnrollmentPolicyRuleCondition{..} = (\mDMEnrollmentPolicyRuleConditionEnrollment -> MDMEnrollmentPolicyRuleCondition { mDMEnrollmentPolicyRuleConditionEnrollment, ..} ) <$> f mDMEnrollmentPolicyRuleConditionEnrollment
{-# INLINE mDMEnrollmentPolicyRuleConditionEnrollmentL #-}



-- * NetworkZone

-- | 'networkZoneType' Lens
networkZoneTypeL :: Lens_' NetworkZone (Maybe NetworkZoneType)
networkZoneTypeL f NetworkZone{..} = (\networkZoneType -> NetworkZone { networkZoneType, ..} ) <$> f networkZoneType
{-# INLINE networkZoneTypeL #-}

-- | 'networkZoneId' Lens
networkZoneIdL :: Lens_' NetworkZone (Maybe Text)
networkZoneIdL f NetworkZone{..} = (\networkZoneId -> NetworkZone { networkZoneId, ..} ) <$> f networkZoneId
{-# INLINE networkZoneIdL #-}

-- | 'networkZoneName' Lens
networkZoneNameL :: Lens_' NetworkZone (Maybe Text)
networkZoneNameL f NetworkZone{..} = (\networkZoneName -> NetworkZone { networkZoneName, ..} ) <$> f networkZoneName
{-# INLINE networkZoneNameL #-}

-- | 'networkZoneSystem' Lens
networkZoneSystemL :: Lens_' NetworkZone (Maybe Bool)
networkZoneSystemL f NetworkZone{..} = (\networkZoneSystem -> NetworkZone { networkZoneSystem, ..} ) <$> f networkZoneSystem
{-# INLINE networkZoneSystemL #-}

-- | 'networkZoneUsage' Lens
networkZoneUsageL :: Lens_' NetworkZone (Maybe NetworkZoneUsage)
networkZoneUsageL f NetworkZone{..} = (\networkZoneUsage -> NetworkZone { networkZoneUsage, ..} ) <$> f networkZoneUsage
{-# INLINE networkZoneUsageL #-}

-- | 'networkZoneStatus' Lens
networkZoneStatusL :: Lens_' NetworkZone (Maybe NetworkZoneStatus)
networkZoneStatusL f NetworkZone{..} = (\networkZoneStatus -> NetworkZone { networkZoneStatus, ..} ) <$> f networkZoneStatus
{-# INLINE networkZoneStatusL #-}

-- | 'networkZoneProxyType' Lens
networkZoneProxyTypeL :: Lens_' NetworkZone (Maybe Text)
networkZoneProxyTypeL f NetworkZone{..} = (\networkZoneProxyType -> NetworkZone { networkZoneProxyType, ..} ) <$> f networkZoneProxyType
{-# INLINE networkZoneProxyTypeL #-}

-- | 'networkZoneLocations' Lens
networkZoneLocationsL :: Lens_' NetworkZone (Maybe [NetworkZoneLocation])
networkZoneLocationsL f NetworkZone{..} = (\networkZoneLocations -> NetworkZone { networkZoneLocations, ..} ) <$> f networkZoneLocations
{-# INLINE networkZoneLocationsL #-}

-- | 'networkZoneGateways' Lens
networkZoneGatewaysL :: Lens_' NetworkZone (Maybe [NetworkZoneAddress])
networkZoneGatewaysL f NetworkZone{..} = (\networkZoneGateways -> NetworkZone { networkZoneGateways, ..} ) <$> f networkZoneGateways
{-# INLINE networkZoneGatewaysL #-}

-- | 'networkZoneProxies' Lens
networkZoneProxiesL :: Lens_' NetworkZone (Maybe [NetworkZoneAddress])
networkZoneProxiesL f NetworkZone{..} = (\networkZoneProxies -> NetworkZone { networkZoneProxies, ..} ) <$> f networkZoneProxies
{-# INLINE networkZoneProxiesL #-}

-- | 'networkZoneAsns' Lens
networkZoneAsnsL :: Lens_' NetworkZone (Maybe [Text])
networkZoneAsnsL f NetworkZone{..} = (\networkZoneAsns -> NetworkZone { networkZoneAsns, ..} ) <$> f networkZoneAsns
{-# INLINE networkZoneAsnsL #-}

-- | 'networkZoneCreated' Lens
networkZoneCreatedL :: Lens_' NetworkZone (Maybe DateTime)
networkZoneCreatedL f NetworkZone{..} = (\networkZoneCreated -> NetworkZone { networkZoneCreated, ..} ) <$> f networkZoneCreated
{-# INLINE networkZoneCreatedL #-}

-- | 'networkZoneLastUpdated' Lens
networkZoneLastUpdatedL :: Lens_' NetworkZone (Maybe DateTime)
networkZoneLastUpdatedL f NetworkZone{..} = (\networkZoneLastUpdated -> NetworkZone { networkZoneLastUpdated, ..} ) <$> f networkZoneLastUpdated
{-# INLINE networkZoneLastUpdatedL #-}

-- | 'networkZoneLinks' Lens
networkZoneLinksL :: Lens_' NetworkZone (Maybe (Map.Map String A.Value))
networkZoneLinksL f NetworkZone{..} = (\networkZoneLinks -> NetworkZone { networkZoneLinks, ..} ) <$> f networkZoneLinks
{-# INLINE networkZoneLinksL #-}



-- * NetworkZoneAddress

-- | 'networkZoneAddressType' Lens
networkZoneAddressTypeL :: Lens_' NetworkZoneAddress (Maybe NetworkZoneAddressType)
networkZoneAddressTypeL f NetworkZoneAddress{..} = (\networkZoneAddressType -> NetworkZoneAddress { networkZoneAddressType, ..} ) <$> f networkZoneAddressType
{-# INLINE networkZoneAddressTypeL #-}

-- | 'networkZoneAddressValue' Lens
networkZoneAddressValueL :: Lens_' NetworkZoneAddress (Maybe Text)
networkZoneAddressValueL f NetworkZoneAddress{..} = (\networkZoneAddressValue -> NetworkZoneAddress { networkZoneAddressValue, ..} ) <$> f networkZoneAddressValue
{-# INLINE networkZoneAddressValueL #-}



-- * NetworkZoneAddressType



-- * NetworkZoneLocation

-- | 'networkZoneLocationCountry' Lens
networkZoneLocationCountryL :: Lens_' NetworkZoneLocation (Maybe Text)
networkZoneLocationCountryL f NetworkZoneLocation{..} = (\networkZoneLocationCountry -> NetworkZoneLocation { networkZoneLocationCountry, ..} ) <$> f networkZoneLocationCountry
{-# INLINE networkZoneLocationCountryL #-}

-- | 'networkZoneLocationRegion' Lens
networkZoneLocationRegionL :: Lens_' NetworkZoneLocation (Maybe Text)
networkZoneLocationRegionL f NetworkZoneLocation{..} = (\networkZoneLocationRegion -> NetworkZoneLocation { networkZoneLocationRegion, ..} ) <$> f networkZoneLocationRegion
{-# INLINE networkZoneLocationRegionL #-}



-- * NetworkZoneStatus



-- * NetworkZoneType



-- * NetworkZoneUsage



-- * NotificationType



-- * OAuth2Actor

-- | 'oAuth2ActorId' Lens
oAuth2ActorIdL :: Lens_' OAuth2Actor (Maybe Text)
oAuth2ActorIdL f OAuth2Actor{..} = (\oAuth2ActorId -> OAuth2Actor { oAuth2ActorId, ..} ) <$> f oAuth2ActorId
{-# INLINE oAuth2ActorIdL #-}

-- | 'oAuth2ActorType' Lens
oAuth2ActorTypeL :: Lens_' OAuth2Actor (Maybe Text)
oAuth2ActorTypeL f OAuth2Actor{..} = (\oAuth2ActorType -> OAuth2Actor { oAuth2ActorType, ..} ) <$> f oAuth2ActorType
{-# INLINE oAuth2ActorTypeL #-}



-- * OAuth2Claim

-- | 'oAuth2ClaimLinks' Lens
oAuth2ClaimLinksL :: Lens_' OAuth2Claim (Maybe (Map.Map String A.Value))
oAuth2ClaimLinksL f OAuth2Claim{..} = (\oAuth2ClaimLinks -> OAuth2Claim { oAuth2ClaimLinks, ..} ) <$> f oAuth2ClaimLinks
{-# INLINE oAuth2ClaimLinksL #-}

-- | 'oAuth2ClaimAlwaysIncludeInToken' Lens
oAuth2ClaimAlwaysIncludeInTokenL :: Lens_' OAuth2Claim (Maybe Bool)
oAuth2ClaimAlwaysIncludeInTokenL f OAuth2Claim{..} = (\oAuth2ClaimAlwaysIncludeInToken -> OAuth2Claim { oAuth2ClaimAlwaysIncludeInToken, ..} ) <$> f oAuth2ClaimAlwaysIncludeInToken
{-# INLINE oAuth2ClaimAlwaysIncludeInTokenL #-}

-- | 'oAuth2ClaimClaimType' Lens
oAuth2ClaimClaimTypeL :: Lens_' OAuth2Claim (Maybe E'ClaimType)
oAuth2ClaimClaimTypeL f OAuth2Claim{..} = (\oAuth2ClaimClaimType -> OAuth2Claim { oAuth2ClaimClaimType, ..} ) <$> f oAuth2ClaimClaimType
{-# INLINE oAuth2ClaimClaimTypeL #-}

-- | 'oAuth2ClaimConditions' Lens
oAuth2ClaimConditionsL :: Lens_' OAuth2Claim (Maybe OAuth2ClaimConditions)
oAuth2ClaimConditionsL f OAuth2Claim{..} = (\oAuth2ClaimConditions -> OAuth2Claim { oAuth2ClaimConditions, ..} ) <$> f oAuth2ClaimConditions
{-# INLINE oAuth2ClaimConditionsL #-}

-- | 'oAuth2ClaimGroupFilterType' Lens
oAuth2ClaimGroupFilterTypeL :: Lens_' OAuth2Claim (Maybe E'GroupFilterType)
oAuth2ClaimGroupFilterTypeL f OAuth2Claim{..} = (\oAuth2ClaimGroupFilterType -> OAuth2Claim { oAuth2ClaimGroupFilterType, ..} ) <$> f oAuth2ClaimGroupFilterType
{-# INLINE oAuth2ClaimGroupFilterTypeL #-}

-- | 'oAuth2ClaimId' Lens
oAuth2ClaimIdL :: Lens_' OAuth2Claim (Maybe Text)
oAuth2ClaimIdL f OAuth2Claim{..} = (\oAuth2ClaimId -> OAuth2Claim { oAuth2ClaimId, ..} ) <$> f oAuth2ClaimId
{-# INLINE oAuth2ClaimIdL #-}

-- | 'oAuth2ClaimName' Lens
oAuth2ClaimNameL :: Lens_' OAuth2Claim (Maybe Text)
oAuth2ClaimNameL f OAuth2Claim{..} = (\oAuth2ClaimName -> OAuth2Claim { oAuth2ClaimName, ..} ) <$> f oAuth2ClaimName
{-# INLINE oAuth2ClaimNameL #-}

-- | 'oAuth2ClaimStatus' Lens
oAuth2ClaimStatusL :: Lens_' OAuth2Claim (Maybe E'Status2)
oAuth2ClaimStatusL f OAuth2Claim{..} = (\oAuth2ClaimStatus -> OAuth2Claim { oAuth2ClaimStatus, ..} ) <$> f oAuth2ClaimStatus
{-# INLINE oAuth2ClaimStatusL #-}

-- | 'oAuth2ClaimSystem' Lens
oAuth2ClaimSystemL :: Lens_' OAuth2Claim (Maybe Bool)
oAuth2ClaimSystemL f OAuth2Claim{..} = (\oAuth2ClaimSystem -> OAuth2Claim { oAuth2ClaimSystem, ..} ) <$> f oAuth2ClaimSystem
{-# INLINE oAuth2ClaimSystemL #-}

-- | 'oAuth2ClaimValue' Lens
oAuth2ClaimValueL :: Lens_' OAuth2Claim (Maybe Text)
oAuth2ClaimValueL f OAuth2Claim{..} = (\oAuth2ClaimValue -> OAuth2Claim { oAuth2ClaimValue, ..} ) <$> f oAuth2ClaimValue
{-# INLINE oAuth2ClaimValueL #-}

-- | 'oAuth2ClaimValueType' Lens
oAuth2ClaimValueTypeL :: Lens_' OAuth2Claim (Maybe E'ValueType)
oAuth2ClaimValueTypeL f OAuth2Claim{..} = (\oAuth2ClaimValueType -> OAuth2Claim { oAuth2ClaimValueType, ..} ) <$> f oAuth2ClaimValueType
{-# INLINE oAuth2ClaimValueTypeL #-}



-- * OAuth2ClaimConditions

-- | 'oAuth2ClaimConditionsScopes' Lens
oAuth2ClaimConditionsScopesL :: Lens_' OAuth2ClaimConditions (Maybe [Text])
oAuth2ClaimConditionsScopesL f OAuth2ClaimConditions{..} = (\oAuth2ClaimConditionsScopes -> OAuth2ClaimConditions { oAuth2ClaimConditionsScopes, ..} ) <$> f oAuth2ClaimConditionsScopes
{-# INLINE oAuth2ClaimConditionsScopesL #-}



-- * OAuth2Client

-- | 'oAuth2ClientLinks' Lens
oAuth2ClientLinksL :: Lens_' OAuth2Client (Maybe (Map.Map String A.Value))
oAuth2ClientLinksL f OAuth2Client{..} = (\oAuth2ClientLinks -> OAuth2Client { oAuth2ClientLinks, ..} ) <$> f oAuth2ClientLinks
{-# INLINE oAuth2ClientLinksL #-}

-- | 'oAuth2ClientClientId' Lens
oAuth2ClientClientIdL :: Lens_' OAuth2Client (Maybe Text)
oAuth2ClientClientIdL f OAuth2Client{..} = (\oAuth2ClientClientId -> OAuth2Client { oAuth2ClientClientId, ..} ) <$> f oAuth2ClientClientId
{-# INLINE oAuth2ClientClientIdL #-}

-- | 'oAuth2ClientClientName' Lens
oAuth2ClientClientNameL :: Lens_' OAuth2Client (Maybe Text)
oAuth2ClientClientNameL f OAuth2Client{..} = (\oAuth2ClientClientName -> OAuth2Client { oAuth2ClientClientName, ..} ) <$> f oAuth2ClientClientName
{-# INLINE oAuth2ClientClientNameL #-}

-- | 'oAuth2ClientClientUri' Lens
oAuth2ClientClientUriL :: Lens_' OAuth2Client (Maybe Text)
oAuth2ClientClientUriL f OAuth2Client{..} = (\oAuth2ClientClientUri -> OAuth2Client { oAuth2ClientClientUri, ..} ) <$> f oAuth2ClientClientUri
{-# INLINE oAuth2ClientClientUriL #-}

-- | 'oAuth2ClientLogoUri' Lens
oAuth2ClientLogoUriL :: Lens_' OAuth2Client (Maybe Text)
oAuth2ClientLogoUriL f OAuth2Client{..} = (\oAuth2ClientLogoUri -> OAuth2Client { oAuth2ClientLogoUri, ..} ) <$> f oAuth2ClientLogoUri
{-# INLINE oAuth2ClientLogoUriL #-}



-- * OAuth2RefreshToken

-- | 'oAuth2RefreshTokenEmbedded' Lens
oAuth2RefreshTokenEmbeddedL :: Lens_' OAuth2RefreshToken (Maybe (Map.Map String A.Value))
oAuth2RefreshTokenEmbeddedL f OAuth2RefreshToken{..} = (\oAuth2RefreshTokenEmbedded -> OAuth2RefreshToken { oAuth2RefreshTokenEmbedded, ..} ) <$> f oAuth2RefreshTokenEmbedded
{-# INLINE oAuth2RefreshTokenEmbeddedL #-}

-- | 'oAuth2RefreshTokenLinks' Lens
oAuth2RefreshTokenLinksL :: Lens_' OAuth2RefreshToken (Maybe (Map.Map String A.Value))
oAuth2RefreshTokenLinksL f OAuth2RefreshToken{..} = (\oAuth2RefreshTokenLinks -> OAuth2RefreshToken { oAuth2RefreshTokenLinks, ..} ) <$> f oAuth2RefreshTokenLinks
{-# INLINE oAuth2RefreshTokenLinksL #-}

-- | 'oAuth2RefreshTokenClientId' Lens
oAuth2RefreshTokenClientIdL :: Lens_' OAuth2RefreshToken (Maybe Text)
oAuth2RefreshTokenClientIdL f OAuth2RefreshToken{..} = (\oAuth2RefreshTokenClientId -> OAuth2RefreshToken { oAuth2RefreshTokenClientId, ..} ) <$> f oAuth2RefreshTokenClientId
{-# INLINE oAuth2RefreshTokenClientIdL #-}

-- | 'oAuth2RefreshTokenCreated' Lens
oAuth2RefreshTokenCreatedL :: Lens_' OAuth2RefreshToken (Maybe DateTime)
oAuth2RefreshTokenCreatedL f OAuth2RefreshToken{..} = (\oAuth2RefreshTokenCreated -> OAuth2RefreshToken { oAuth2RefreshTokenCreated, ..} ) <$> f oAuth2RefreshTokenCreated
{-# INLINE oAuth2RefreshTokenCreatedL #-}

-- | 'oAuth2RefreshTokenCreatedBy' Lens
oAuth2RefreshTokenCreatedByL :: Lens_' OAuth2RefreshToken (Maybe OAuth2Actor)
oAuth2RefreshTokenCreatedByL f OAuth2RefreshToken{..} = (\oAuth2RefreshTokenCreatedBy -> OAuth2RefreshToken { oAuth2RefreshTokenCreatedBy, ..} ) <$> f oAuth2RefreshTokenCreatedBy
{-# INLINE oAuth2RefreshTokenCreatedByL #-}

-- | 'oAuth2RefreshTokenExpiresAt' Lens
oAuth2RefreshTokenExpiresAtL :: Lens_' OAuth2RefreshToken (Maybe DateTime)
oAuth2RefreshTokenExpiresAtL f OAuth2RefreshToken{..} = (\oAuth2RefreshTokenExpiresAt -> OAuth2RefreshToken { oAuth2RefreshTokenExpiresAt, ..} ) <$> f oAuth2RefreshTokenExpiresAt
{-# INLINE oAuth2RefreshTokenExpiresAtL #-}

-- | 'oAuth2RefreshTokenId' Lens
oAuth2RefreshTokenIdL :: Lens_' OAuth2RefreshToken (Maybe Text)
oAuth2RefreshTokenIdL f OAuth2RefreshToken{..} = (\oAuth2RefreshTokenId -> OAuth2RefreshToken { oAuth2RefreshTokenId, ..} ) <$> f oAuth2RefreshTokenId
{-# INLINE oAuth2RefreshTokenIdL #-}

-- | 'oAuth2RefreshTokenIssuer' Lens
oAuth2RefreshTokenIssuerL :: Lens_' OAuth2RefreshToken (Maybe Text)
oAuth2RefreshTokenIssuerL f OAuth2RefreshToken{..} = (\oAuth2RefreshTokenIssuer -> OAuth2RefreshToken { oAuth2RefreshTokenIssuer, ..} ) <$> f oAuth2RefreshTokenIssuer
{-# INLINE oAuth2RefreshTokenIssuerL #-}

-- | 'oAuth2RefreshTokenLastUpdated' Lens
oAuth2RefreshTokenLastUpdatedL :: Lens_' OAuth2RefreshToken (Maybe DateTime)
oAuth2RefreshTokenLastUpdatedL f OAuth2RefreshToken{..} = (\oAuth2RefreshTokenLastUpdated -> OAuth2RefreshToken { oAuth2RefreshTokenLastUpdated, ..} ) <$> f oAuth2RefreshTokenLastUpdated
{-# INLINE oAuth2RefreshTokenLastUpdatedL #-}

-- | 'oAuth2RefreshTokenScopes' Lens
oAuth2RefreshTokenScopesL :: Lens_' OAuth2RefreshToken (Maybe [Text])
oAuth2RefreshTokenScopesL f OAuth2RefreshToken{..} = (\oAuth2RefreshTokenScopes -> OAuth2RefreshToken { oAuth2RefreshTokenScopes, ..} ) <$> f oAuth2RefreshTokenScopes
{-# INLINE oAuth2RefreshTokenScopesL #-}

-- | 'oAuth2RefreshTokenStatus' Lens
oAuth2RefreshTokenStatusL :: Lens_' OAuth2RefreshToken (Maybe E'Status3)
oAuth2RefreshTokenStatusL f OAuth2RefreshToken{..} = (\oAuth2RefreshTokenStatus -> OAuth2RefreshToken { oAuth2RefreshTokenStatus, ..} ) <$> f oAuth2RefreshTokenStatus
{-# INLINE oAuth2RefreshTokenStatusL #-}

-- | 'oAuth2RefreshTokenUserId' Lens
oAuth2RefreshTokenUserIdL :: Lens_' OAuth2RefreshToken (Maybe Text)
oAuth2RefreshTokenUserIdL f OAuth2RefreshToken{..} = (\oAuth2RefreshTokenUserId -> OAuth2RefreshToken { oAuth2RefreshTokenUserId, ..} ) <$> f oAuth2RefreshTokenUserId
{-# INLINE oAuth2RefreshTokenUserIdL #-}



-- * OAuth2Scope

-- | 'oAuth2ScopeConsent' Lens
oAuth2ScopeConsentL :: Lens_' OAuth2Scope (Maybe E'Consent)
oAuth2ScopeConsentL f OAuth2Scope{..} = (\oAuth2ScopeConsent -> OAuth2Scope { oAuth2ScopeConsent, ..} ) <$> f oAuth2ScopeConsent
{-# INLINE oAuth2ScopeConsentL #-}

-- | 'oAuth2ScopeDefault' Lens
oAuth2ScopeDefaultL :: Lens_' OAuth2Scope (Maybe Bool)
oAuth2ScopeDefaultL f OAuth2Scope{..} = (\oAuth2ScopeDefault -> OAuth2Scope { oAuth2ScopeDefault, ..} ) <$> f oAuth2ScopeDefault
{-# INLINE oAuth2ScopeDefaultL #-}

-- | 'oAuth2ScopeDescription' Lens
oAuth2ScopeDescriptionL :: Lens_' OAuth2Scope (Maybe Text)
oAuth2ScopeDescriptionL f OAuth2Scope{..} = (\oAuth2ScopeDescription -> OAuth2Scope { oAuth2ScopeDescription, ..} ) <$> f oAuth2ScopeDescription
{-# INLINE oAuth2ScopeDescriptionL #-}

-- | 'oAuth2ScopeDisplayName' Lens
oAuth2ScopeDisplayNameL :: Lens_' OAuth2Scope (Maybe Text)
oAuth2ScopeDisplayNameL f OAuth2Scope{..} = (\oAuth2ScopeDisplayName -> OAuth2Scope { oAuth2ScopeDisplayName, ..} ) <$> f oAuth2ScopeDisplayName
{-# INLINE oAuth2ScopeDisplayNameL #-}

-- | 'oAuth2ScopeId' Lens
oAuth2ScopeIdL :: Lens_' OAuth2Scope (Maybe Text)
oAuth2ScopeIdL f OAuth2Scope{..} = (\oAuth2ScopeId -> OAuth2Scope { oAuth2ScopeId, ..} ) <$> f oAuth2ScopeId
{-# INLINE oAuth2ScopeIdL #-}

-- | 'oAuth2ScopeMetadataPublish' Lens
oAuth2ScopeMetadataPublishL :: Lens_' OAuth2Scope (Maybe E'MetadataPublish)
oAuth2ScopeMetadataPublishL f OAuth2Scope{..} = (\oAuth2ScopeMetadataPublish -> OAuth2Scope { oAuth2ScopeMetadataPublish, ..} ) <$> f oAuth2ScopeMetadataPublish
{-# INLINE oAuth2ScopeMetadataPublishL #-}

-- | 'oAuth2ScopeName' Lens
oAuth2ScopeNameL :: Lens_' OAuth2Scope (Maybe Text)
oAuth2ScopeNameL f OAuth2Scope{..} = (\oAuth2ScopeName -> OAuth2Scope { oAuth2ScopeName, ..} ) <$> f oAuth2ScopeName
{-# INLINE oAuth2ScopeNameL #-}

-- | 'oAuth2ScopeSystem' Lens
oAuth2ScopeSystemL :: Lens_' OAuth2Scope (Maybe Bool)
oAuth2ScopeSystemL f OAuth2Scope{..} = (\oAuth2ScopeSystem -> OAuth2Scope { oAuth2ScopeSystem, ..} ) <$> f oAuth2ScopeSystem
{-# INLINE oAuth2ScopeSystemL #-}



-- * OAuth2ScopeConsentGrant

-- | 'oAuth2ScopeConsentGrantEmbedded' Lens
oAuth2ScopeConsentGrantEmbeddedL :: Lens_' OAuth2ScopeConsentGrant (Maybe (Map.Map String A.Value))
oAuth2ScopeConsentGrantEmbeddedL f OAuth2ScopeConsentGrant{..} = (\oAuth2ScopeConsentGrantEmbedded -> OAuth2ScopeConsentGrant { oAuth2ScopeConsentGrantEmbedded, ..} ) <$> f oAuth2ScopeConsentGrantEmbedded
{-# INLINE oAuth2ScopeConsentGrantEmbeddedL #-}

-- | 'oAuth2ScopeConsentGrantLinks' Lens
oAuth2ScopeConsentGrantLinksL :: Lens_' OAuth2ScopeConsentGrant (Maybe (Map.Map String A.Value))
oAuth2ScopeConsentGrantLinksL f OAuth2ScopeConsentGrant{..} = (\oAuth2ScopeConsentGrantLinks -> OAuth2ScopeConsentGrant { oAuth2ScopeConsentGrantLinks, ..} ) <$> f oAuth2ScopeConsentGrantLinks
{-# INLINE oAuth2ScopeConsentGrantLinksL #-}

-- | 'oAuth2ScopeConsentGrantClientId' Lens
oAuth2ScopeConsentGrantClientIdL :: Lens_' OAuth2ScopeConsentGrant (Maybe Text)
oAuth2ScopeConsentGrantClientIdL f OAuth2ScopeConsentGrant{..} = (\oAuth2ScopeConsentGrantClientId -> OAuth2ScopeConsentGrant { oAuth2ScopeConsentGrantClientId, ..} ) <$> f oAuth2ScopeConsentGrantClientId
{-# INLINE oAuth2ScopeConsentGrantClientIdL #-}

-- | 'oAuth2ScopeConsentGrantUserId' Lens
oAuth2ScopeConsentGrantUserIdL :: Lens_' OAuth2ScopeConsentGrant (Maybe Text)
oAuth2ScopeConsentGrantUserIdL f OAuth2ScopeConsentGrant{..} = (\oAuth2ScopeConsentGrantUserId -> OAuth2ScopeConsentGrant { oAuth2ScopeConsentGrantUserId, ..} ) <$> f oAuth2ScopeConsentGrantUserId
{-# INLINE oAuth2ScopeConsentGrantUserIdL #-}

-- | 'oAuth2ScopeConsentGrantCreated' Lens
oAuth2ScopeConsentGrantCreatedL :: Lens_' OAuth2ScopeConsentGrant (Maybe DateTime)
oAuth2ScopeConsentGrantCreatedL f OAuth2ScopeConsentGrant{..} = (\oAuth2ScopeConsentGrantCreated -> OAuth2ScopeConsentGrant { oAuth2ScopeConsentGrantCreated, ..} ) <$> f oAuth2ScopeConsentGrantCreated
{-# INLINE oAuth2ScopeConsentGrantCreatedL #-}

-- | 'oAuth2ScopeConsentGrantCreatedBy' Lens
oAuth2ScopeConsentGrantCreatedByL :: Lens_' OAuth2ScopeConsentGrant (Maybe OAuth2Actor)
oAuth2ScopeConsentGrantCreatedByL f OAuth2ScopeConsentGrant{..} = (\oAuth2ScopeConsentGrantCreatedBy -> OAuth2ScopeConsentGrant { oAuth2ScopeConsentGrantCreatedBy, ..} ) <$> f oAuth2ScopeConsentGrantCreatedBy
{-# INLINE oAuth2ScopeConsentGrantCreatedByL #-}

-- | 'oAuth2ScopeConsentGrantId' Lens
oAuth2ScopeConsentGrantIdL :: Lens_' OAuth2ScopeConsentGrant (Maybe Text)
oAuth2ScopeConsentGrantIdL f OAuth2ScopeConsentGrant{..} = (\oAuth2ScopeConsentGrantId -> OAuth2ScopeConsentGrant { oAuth2ScopeConsentGrantId, ..} ) <$> f oAuth2ScopeConsentGrantId
{-# INLINE oAuth2ScopeConsentGrantIdL #-}

-- | 'oAuth2ScopeConsentGrantIssuer' Lens
oAuth2ScopeConsentGrantIssuerL :: Lens_' OAuth2ScopeConsentGrant (Maybe Text)
oAuth2ScopeConsentGrantIssuerL f OAuth2ScopeConsentGrant{..} = (\oAuth2ScopeConsentGrantIssuer -> OAuth2ScopeConsentGrant { oAuth2ScopeConsentGrantIssuer, ..} ) <$> f oAuth2ScopeConsentGrantIssuer
{-# INLINE oAuth2ScopeConsentGrantIssuerL #-}

-- | 'oAuth2ScopeConsentGrantLastUpdated' Lens
oAuth2ScopeConsentGrantLastUpdatedL :: Lens_' OAuth2ScopeConsentGrant (Maybe DateTime)
oAuth2ScopeConsentGrantLastUpdatedL f OAuth2ScopeConsentGrant{..} = (\oAuth2ScopeConsentGrantLastUpdated -> OAuth2ScopeConsentGrant { oAuth2ScopeConsentGrantLastUpdated, ..} ) <$> f oAuth2ScopeConsentGrantLastUpdated
{-# INLINE oAuth2ScopeConsentGrantLastUpdatedL #-}

-- | 'oAuth2ScopeConsentGrantScopeId' Lens
oAuth2ScopeConsentGrantScopeIdL :: Lens_' OAuth2ScopeConsentGrant (Maybe Text)
oAuth2ScopeConsentGrantScopeIdL f OAuth2ScopeConsentGrant{..} = (\oAuth2ScopeConsentGrantScopeId -> OAuth2ScopeConsentGrant { oAuth2ScopeConsentGrantScopeId, ..} ) <$> f oAuth2ScopeConsentGrantScopeId
{-# INLINE oAuth2ScopeConsentGrantScopeIdL #-}

-- | 'oAuth2ScopeConsentGrantSource' Lens
oAuth2ScopeConsentGrantSourceL :: Lens_' OAuth2ScopeConsentGrant (Maybe OAuth2ScopeConsentGrantSource)
oAuth2ScopeConsentGrantSourceL f OAuth2ScopeConsentGrant{..} = (\oAuth2ScopeConsentGrantSource -> OAuth2ScopeConsentGrant { oAuth2ScopeConsentGrantSource, ..} ) <$> f oAuth2ScopeConsentGrantSource
{-# INLINE oAuth2ScopeConsentGrantSourceL #-}

-- | 'oAuth2ScopeConsentGrantStatus' Lens
oAuth2ScopeConsentGrantStatusL :: Lens_' OAuth2ScopeConsentGrant (Maybe OAuth2ScopeConsentGrantStatus)
oAuth2ScopeConsentGrantStatusL f OAuth2ScopeConsentGrant{..} = (\oAuth2ScopeConsentGrantStatus -> OAuth2ScopeConsentGrant { oAuth2ScopeConsentGrantStatus, ..} ) <$> f oAuth2ScopeConsentGrantStatus
{-# INLINE oAuth2ScopeConsentGrantStatusL #-}



-- * OAuth2ScopeConsentGrantSource



-- * OAuth2ScopeConsentGrantStatus



-- * OAuth2ScopesMediationPolicyRuleCondition

-- | 'oAuth2ScopesMediationPolicyRuleConditionInclude' Lens
oAuth2ScopesMediationPolicyRuleConditionIncludeL :: Lens_' OAuth2ScopesMediationPolicyRuleCondition (Maybe [Text])
oAuth2ScopesMediationPolicyRuleConditionIncludeL f OAuth2ScopesMediationPolicyRuleCondition{..} = (\oAuth2ScopesMediationPolicyRuleConditionInclude -> OAuth2ScopesMediationPolicyRuleCondition { oAuth2ScopesMediationPolicyRuleConditionInclude, ..} ) <$> f oAuth2ScopesMediationPolicyRuleConditionInclude
{-# INLINE oAuth2ScopesMediationPolicyRuleConditionIncludeL #-}



-- * OAuth2Token

-- | 'oAuth2TokenEmbedded' Lens
oAuth2TokenEmbeddedL :: Lens_' OAuth2Token (Maybe (Map.Map String A.Value))
oAuth2TokenEmbeddedL f OAuth2Token{..} = (\oAuth2TokenEmbedded -> OAuth2Token { oAuth2TokenEmbedded, ..} ) <$> f oAuth2TokenEmbedded
{-# INLINE oAuth2TokenEmbeddedL #-}

-- | 'oAuth2TokenLinks' Lens
oAuth2TokenLinksL :: Lens_' OAuth2Token (Maybe (Map.Map String A.Value))
oAuth2TokenLinksL f OAuth2Token{..} = (\oAuth2TokenLinks -> OAuth2Token { oAuth2TokenLinks, ..} ) <$> f oAuth2TokenLinks
{-# INLINE oAuth2TokenLinksL #-}

-- | 'oAuth2TokenClientId' Lens
oAuth2TokenClientIdL :: Lens_' OAuth2Token (Maybe Text)
oAuth2TokenClientIdL f OAuth2Token{..} = (\oAuth2TokenClientId -> OAuth2Token { oAuth2TokenClientId, ..} ) <$> f oAuth2TokenClientId
{-# INLINE oAuth2TokenClientIdL #-}

-- | 'oAuth2TokenCreated' Lens
oAuth2TokenCreatedL :: Lens_' OAuth2Token (Maybe DateTime)
oAuth2TokenCreatedL f OAuth2Token{..} = (\oAuth2TokenCreated -> OAuth2Token { oAuth2TokenCreated, ..} ) <$> f oAuth2TokenCreated
{-# INLINE oAuth2TokenCreatedL #-}

-- | 'oAuth2TokenExpiresAt' Lens
oAuth2TokenExpiresAtL :: Lens_' OAuth2Token (Maybe DateTime)
oAuth2TokenExpiresAtL f OAuth2Token{..} = (\oAuth2TokenExpiresAt -> OAuth2Token { oAuth2TokenExpiresAt, ..} ) <$> f oAuth2TokenExpiresAt
{-# INLINE oAuth2TokenExpiresAtL #-}

-- | 'oAuth2TokenId' Lens
oAuth2TokenIdL :: Lens_' OAuth2Token (Maybe Text)
oAuth2TokenIdL f OAuth2Token{..} = (\oAuth2TokenId -> OAuth2Token { oAuth2TokenId, ..} ) <$> f oAuth2TokenId
{-# INLINE oAuth2TokenIdL #-}

-- | 'oAuth2TokenIssuer' Lens
oAuth2TokenIssuerL :: Lens_' OAuth2Token (Maybe Text)
oAuth2TokenIssuerL f OAuth2Token{..} = (\oAuth2TokenIssuer -> OAuth2Token { oAuth2TokenIssuer, ..} ) <$> f oAuth2TokenIssuer
{-# INLINE oAuth2TokenIssuerL #-}

-- | 'oAuth2TokenLastUpdated' Lens
oAuth2TokenLastUpdatedL :: Lens_' OAuth2Token (Maybe DateTime)
oAuth2TokenLastUpdatedL f OAuth2Token{..} = (\oAuth2TokenLastUpdated -> OAuth2Token { oAuth2TokenLastUpdated, ..} ) <$> f oAuth2TokenLastUpdated
{-# INLINE oAuth2TokenLastUpdatedL #-}

-- | 'oAuth2TokenScopes' Lens
oAuth2TokenScopesL :: Lens_' OAuth2Token (Maybe [Text])
oAuth2TokenScopesL f OAuth2Token{..} = (\oAuth2TokenScopes -> OAuth2Token { oAuth2TokenScopes, ..} ) <$> f oAuth2TokenScopes
{-# INLINE oAuth2TokenScopesL #-}

-- | 'oAuth2TokenStatus' Lens
oAuth2TokenStatusL :: Lens_' OAuth2Token (Maybe E'Status3)
oAuth2TokenStatusL f OAuth2Token{..} = (\oAuth2TokenStatus -> OAuth2Token { oAuth2TokenStatus, ..} ) <$> f oAuth2TokenStatus
{-# INLINE oAuth2TokenStatusL #-}

-- | 'oAuth2TokenUserId' Lens
oAuth2TokenUserIdL :: Lens_' OAuth2Token (Maybe Text)
oAuth2TokenUserIdL f OAuth2Token{..} = (\oAuth2TokenUserId -> OAuth2Token { oAuth2TokenUserId, ..} ) <$> f oAuth2TokenUserId
{-# INLINE oAuth2TokenUserIdL #-}



-- * OAuthApplicationCredentials

-- | 'oAuthApplicationCredentialsOauthClient' Lens
oAuthApplicationCredentialsOauthClientL :: Lens_' OAuthApplicationCredentials (Maybe ApplicationCredentialsOAuthClient)
oAuthApplicationCredentialsOauthClientL f OAuthApplicationCredentials{..} = (\oAuthApplicationCredentialsOauthClient -> OAuthApplicationCredentials { oAuthApplicationCredentialsOauthClient, ..} ) <$> f oAuthApplicationCredentialsOauthClient
{-# INLINE oAuthApplicationCredentialsOauthClientL #-}



-- * OAuthEndpointAuthenticationMethod



-- * OAuthGrantType



-- * OAuthResponseType



-- * OktaSignOnPolicy

-- | 'oktaSignOnPolicyConditions' Lens
oktaSignOnPolicyConditionsL :: Lens_' OktaSignOnPolicy (Maybe OktaSignOnPolicyConditions)
oktaSignOnPolicyConditionsL f OktaSignOnPolicy{..} = (\oktaSignOnPolicyConditions -> OktaSignOnPolicy { oktaSignOnPolicyConditions, ..} ) <$> f oktaSignOnPolicyConditions
{-# INLINE oktaSignOnPolicyConditionsL #-}



-- * OktaSignOnPolicyConditions

-- | 'oktaSignOnPolicyConditionsPeople' Lens
oktaSignOnPolicyConditionsPeopleL :: Lens_' OktaSignOnPolicyConditions (Maybe PolicyPeopleCondition)
oktaSignOnPolicyConditionsPeopleL f OktaSignOnPolicyConditions{..} = (\oktaSignOnPolicyConditionsPeople -> OktaSignOnPolicyConditions { oktaSignOnPolicyConditionsPeople, ..} ) <$> f oktaSignOnPolicyConditionsPeople
{-# INLINE oktaSignOnPolicyConditionsPeopleL #-}



-- * OktaSignOnPolicyRule

-- | 'oktaSignOnPolicyRuleActions' Lens
oktaSignOnPolicyRuleActionsL :: Lens_' OktaSignOnPolicyRule (Maybe OktaSignOnPolicyRuleActions)
oktaSignOnPolicyRuleActionsL f OktaSignOnPolicyRule{..} = (\oktaSignOnPolicyRuleActions -> OktaSignOnPolicyRule { oktaSignOnPolicyRuleActions, ..} ) <$> f oktaSignOnPolicyRuleActions
{-# INLINE oktaSignOnPolicyRuleActionsL #-}

-- | 'oktaSignOnPolicyRuleConditions' Lens
oktaSignOnPolicyRuleConditionsL :: Lens_' OktaSignOnPolicyRule (Maybe OktaSignOnPolicyRuleConditions)
oktaSignOnPolicyRuleConditionsL f OktaSignOnPolicyRule{..} = (\oktaSignOnPolicyRuleConditions -> OktaSignOnPolicyRule { oktaSignOnPolicyRuleConditions, ..} ) <$> f oktaSignOnPolicyRuleConditions
{-# INLINE oktaSignOnPolicyRuleConditionsL #-}

-- | 'oktaSignOnPolicyRuleName' Lens
oktaSignOnPolicyRuleNameL :: Lens_' OktaSignOnPolicyRule (Maybe Text)
oktaSignOnPolicyRuleNameL f OktaSignOnPolicyRule{..} = (\oktaSignOnPolicyRuleName -> OktaSignOnPolicyRule { oktaSignOnPolicyRuleName, ..} ) <$> f oktaSignOnPolicyRuleName
{-# INLINE oktaSignOnPolicyRuleNameL #-}



-- * OktaSignOnPolicyRuleActions

-- | 'oktaSignOnPolicyRuleActionsSignon' Lens
oktaSignOnPolicyRuleActionsSignonL :: Lens_' OktaSignOnPolicyRuleActions (Maybe OktaSignOnPolicyRuleSignonActions)
oktaSignOnPolicyRuleActionsSignonL f OktaSignOnPolicyRuleActions{..} = (\oktaSignOnPolicyRuleActionsSignon -> OktaSignOnPolicyRuleActions { oktaSignOnPolicyRuleActionsSignon, ..} ) <$> f oktaSignOnPolicyRuleActionsSignon
{-# INLINE oktaSignOnPolicyRuleActionsSignonL #-}



-- * OktaSignOnPolicyRuleConditions

-- | 'oktaSignOnPolicyRuleConditionsAuthContext' Lens
oktaSignOnPolicyRuleConditionsAuthContextL :: Lens_' OktaSignOnPolicyRuleConditions (Maybe PolicyRuleAuthContextCondition)
oktaSignOnPolicyRuleConditionsAuthContextL f OktaSignOnPolicyRuleConditions{..} = (\oktaSignOnPolicyRuleConditionsAuthContext -> OktaSignOnPolicyRuleConditions { oktaSignOnPolicyRuleConditionsAuthContext, ..} ) <$> f oktaSignOnPolicyRuleConditionsAuthContext
{-# INLINE oktaSignOnPolicyRuleConditionsAuthContextL #-}

-- | 'oktaSignOnPolicyRuleConditionsNetwork' Lens
oktaSignOnPolicyRuleConditionsNetworkL :: Lens_' OktaSignOnPolicyRuleConditions (Maybe PolicyNetworkCondition)
oktaSignOnPolicyRuleConditionsNetworkL f OktaSignOnPolicyRuleConditions{..} = (\oktaSignOnPolicyRuleConditionsNetwork -> OktaSignOnPolicyRuleConditions { oktaSignOnPolicyRuleConditionsNetwork, ..} ) <$> f oktaSignOnPolicyRuleConditionsNetwork
{-# INLINE oktaSignOnPolicyRuleConditionsNetworkL #-}

-- | 'oktaSignOnPolicyRuleConditionsPeople' Lens
oktaSignOnPolicyRuleConditionsPeopleL :: Lens_' OktaSignOnPolicyRuleConditions (Maybe PolicyPeopleCondition)
oktaSignOnPolicyRuleConditionsPeopleL f OktaSignOnPolicyRuleConditions{..} = (\oktaSignOnPolicyRuleConditionsPeople -> OktaSignOnPolicyRuleConditions { oktaSignOnPolicyRuleConditionsPeople, ..} ) <$> f oktaSignOnPolicyRuleConditionsPeople
{-# INLINE oktaSignOnPolicyRuleConditionsPeopleL #-}



-- * OktaSignOnPolicyRuleSignonActions

-- | 'oktaSignOnPolicyRuleSignonActionsAccess' Lens
oktaSignOnPolicyRuleSignonActionsAccessL :: Lens_' OktaSignOnPolicyRuleSignonActions (Maybe E'Access)
oktaSignOnPolicyRuleSignonActionsAccessL f OktaSignOnPolicyRuleSignonActions{..} = (\oktaSignOnPolicyRuleSignonActionsAccess -> OktaSignOnPolicyRuleSignonActions { oktaSignOnPolicyRuleSignonActionsAccess, ..} ) <$> f oktaSignOnPolicyRuleSignonActionsAccess
{-# INLINE oktaSignOnPolicyRuleSignonActionsAccessL #-}

-- | 'oktaSignOnPolicyRuleSignonActionsFactorLifetime' Lens
oktaSignOnPolicyRuleSignonActionsFactorLifetimeL :: Lens_' OktaSignOnPolicyRuleSignonActions (Maybe Int)
oktaSignOnPolicyRuleSignonActionsFactorLifetimeL f OktaSignOnPolicyRuleSignonActions{..} = (\oktaSignOnPolicyRuleSignonActionsFactorLifetime -> OktaSignOnPolicyRuleSignonActions { oktaSignOnPolicyRuleSignonActionsFactorLifetime, ..} ) <$> f oktaSignOnPolicyRuleSignonActionsFactorLifetime
{-# INLINE oktaSignOnPolicyRuleSignonActionsFactorLifetimeL #-}

-- | 'oktaSignOnPolicyRuleSignonActionsFactorPromptMode' Lens
oktaSignOnPolicyRuleSignonActionsFactorPromptModeL :: Lens_' OktaSignOnPolicyRuleSignonActions (Maybe E'FactorPromptMode)
oktaSignOnPolicyRuleSignonActionsFactorPromptModeL f OktaSignOnPolicyRuleSignonActions{..} = (\oktaSignOnPolicyRuleSignonActionsFactorPromptMode -> OktaSignOnPolicyRuleSignonActions { oktaSignOnPolicyRuleSignonActionsFactorPromptMode, ..} ) <$> f oktaSignOnPolicyRuleSignonActionsFactorPromptMode
{-# INLINE oktaSignOnPolicyRuleSignonActionsFactorPromptModeL #-}

-- | 'oktaSignOnPolicyRuleSignonActionsRememberDeviceByDefault' Lens
oktaSignOnPolicyRuleSignonActionsRememberDeviceByDefaultL :: Lens_' OktaSignOnPolicyRuleSignonActions (Maybe Bool)
oktaSignOnPolicyRuleSignonActionsRememberDeviceByDefaultL f OktaSignOnPolicyRuleSignonActions{..} = (\oktaSignOnPolicyRuleSignonActionsRememberDeviceByDefault -> OktaSignOnPolicyRuleSignonActions { oktaSignOnPolicyRuleSignonActionsRememberDeviceByDefault, ..} ) <$> f oktaSignOnPolicyRuleSignonActionsRememberDeviceByDefault
{-# INLINE oktaSignOnPolicyRuleSignonActionsRememberDeviceByDefaultL #-}

-- | 'oktaSignOnPolicyRuleSignonActionsRequireFactor' Lens
oktaSignOnPolicyRuleSignonActionsRequireFactorL :: Lens_' OktaSignOnPolicyRuleSignonActions (Maybe Bool)
oktaSignOnPolicyRuleSignonActionsRequireFactorL f OktaSignOnPolicyRuleSignonActions{..} = (\oktaSignOnPolicyRuleSignonActionsRequireFactor -> OktaSignOnPolicyRuleSignonActions { oktaSignOnPolicyRuleSignonActionsRequireFactor, ..} ) <$> f oktaSignOnPolicyRuleSignonActionsRequireFactor
{-# INLINE oktaSignOnPolicyRuleSignonActionsRequireFactorL #-}

-- | 'oktaSignOnPolicyRuleSignonActionsSession' Lens
oktaSignOnPolicyRuleSignonActionsSessionL :: Lens_' OktaSignOnPolicyRuleSignonActions (Maybe OktaSignOnPolicyRuleSignonSessionActions)
oktaSignOnPolicyRuleSignonActionsSessionL f OktaSignOnPolicyRuleSignonActions{..} = (\oktaSignOnPolicyRuleSignonActionsSession -> OktaSignOnPolicyRuleSignonActions { oktaSignOnPolicyRuleSignonActionsSession, ..} ) <$> f oktaSignOnPolicyRuleSignonActionsSession
{-# INLINE oktaSignOnPolicyRuleSignonActionsSessionL #-}



-- * OktaSignOnPolicyRuleSignonSessionActions

-- | 'oktaSignOnPolicyRuleSignonSessionActionsMaxSessionIdleMinutes' Lens
oktaSignOnPolicyRuleSignonSessionActionsMaxSessionIdleMinutesL :: Lens_' OktaSignOnPolicyRuleSignonSessionActions (Maybe Int)
oktaSignOnPolicyRuleSignonSessionActionsMaxSessionIdleMinutesL f OktaSignOnPolicyRuleSignonSessionActions{..} = (\oktaSignOnPolicyRuleSignonSessionActionsMaxSessionIdleMinutes -> OktaSignOnPolicyRuleSignonSessionActions { oktaSignOnPolicyRuleSignonSessionActionsMaxSessionIdleMinutes, ..} ) <$> f oktaSignOnPolicyRuleSignonSessionActionsMaxSessionIdleMinutes
{-# INLINE oktaSignOnPolicyRuleSignonSessionActionsMaxSessionIdleMinutesL #-}

-- | 'oktaSignOnPolicyRuleSignonSessionActionsMaxSessionLifetimeMinutes' Lens
oktaSignOnPolicyRuleSignonSessionActionsMaxSessionLifetimeMinutesL :: Lens_' OktaSignOnPolicyRuleSignonSessionActions (Maybe Int)
oktaSignOnPolicyRuleSignonSessionActionsMaxSessionLifetimeMinutesL f OktaSignOnPolicyRuleSignonSessionActions{..} = (\oktaSignOnPolicyRuleSignonSessionActionsMaxSessionLifetimeMinutes -> OktaSignOnPolicyRuleSignonSessionActions { oktaSignOnPolicyRuleSignonSessionActionsMaxSessionLifetimeMinutes, ..} ) <$> f oktaSignOnPolicyRuleSignonSessionActionsMaxSessionLifetimeMinutes
{-# INLINE oktaSignOnPolicyRuleSignonSessionActionsMaxSessionLifetimeMinutesL #-}

-- | 'oktaSignOnPolicyRuleSignonSessionActionsUsePersistentCookie' Lens
oktaSignOnPolicyRuleSignonSessionActionsUsePersistentCookieL :: Lens_' OktaSignOnPolicyRuleSignonSessionActions (Maybe Bool)
oktaSignOnPolicyRuleSignonSessionActionsUsePersistentCookieL f OktaSignOnPolicyRuleSignonSessionActions{..} = (\oktaSignOnPolicyRuleSignonSessionActionsUsePersistentCookie -> OktaSignOnPolicyRuleSignonSessionActions { oktaSignOnPolicyRuleSignonSessionActionsUsePersistentCookie, ..} ) <$> f oktaSignOnPolicyRuleSignonSessionActionsUsePersistentCookie
{-# INLINE oktaSignOnPolicyRuleSignonSessionActionsUsePersistentCookieL #-}



-- * OpenIdConnectApplication

-- | 'openIdConnectApplicationCredentials' Lens
openIdConnectApplicationCredentialsL :: Lens_' OpenIdConnectApplication (Maybe OAuthApplicationCredentials)
openIdConnectApplicationCredentialsL f OpenIdConnectApplication{..} = (\openIdConnectApplicationCredentials -> OpenIdConnectApplication { openIdConnectApplicationCredentials, ..} ) <$> f openIdConnectApplicationCredentials
{-# INLINE openIdConnectApplicationCredentialsL #-}

-- | 'openIdConnectApplicationName' Lens
openIdConnectApplicationNameL :: Lens_' OpenIdConnectApplication (Maybe A.Value)
openIdConnectApplicationNameL f OpenIdConnectApplication{..} = (\openIdConnectApplicationName -> OpenIdConnectApplication { openIdConnectApplicationName, ..} ) <$> f openIdConnectApplicationName
{-# INLINE openIdConnectApplicationNameL #-}

-- | 'openIdConnectApplicationSettings' Lens
openIdConnectApplicationSettingsL :: Lens_' OpenIdConnectApplication (Maybe OpenIdConnectApplicationSettings)
openIdConnectApplicationSettingsL f OpenIdConnectApplication{..} = (\openIdConnectApplicationSettings -> OpenIdConnectApplication { openIdConnectApplicationSettings, ..} ) <$> f openIdConnectApplicationSettings
{-# INLINE openIdConnectApplicationSettingsL #-}



-- * OpenIdConnectApplicationConsentMethod



-- * OpenIdConnectApplicationIdpInitiatedLogin

-- | 'openIdConnectApplicationIdpInitiatedLoginMode' Lens
openIdConnectApplicationIdpInitiatedLoginModeL :: Lens_' OpenIdConnectApplicationIdpInitiatedLogin (Maybe Text)
openIdConnectApplicationIdpInitiatedLoginModeL f OpenIdConnectApplicationIdpInitiatedLogin{..} = (\openIdConnectApplicationIdpInitiatedLoginMode -> OpenIdConnectApplicationIdpInitiatedLogin { openIdConnectApplicationIdpInitiatedLoginMode, ..} ) <$> f openIdConnectApplicationIdpInitiatedLoginMode
{-# INLINE openIdConnectApplicationIdpInitiatedLoginModeL #-}

-- | 'openIdConnectApplicationIdpInitiatedLoginDefaultScope' Lens
openIdConnectApplicationIdpInitiatedLoginDefaultScopeL :: Lens_' OpenIdConnectApplicationIdpInitiatedLogin (Maybe [Text])
openIdConnectApplicationIdpInitiatedLoginDefaultScopeL f OpenIdConnectApplicationIdpInitiatedLogin{..} = (\openIdConnectApplicationIdpInitiatedLoginDefaultScope -> OpenIdConnectApplicationIdpInitiatedLogin { openIdConnectApplicationIdpInitiatedLoginDefaultScope, ..} ) <$> f openIdConnectApplicationIdpInitiatedLoginDefaultScope
{-# INLINE openIdConnectApplicationIdpInitiatedLoginDefaultScopeL #-}



-- * OpenIdConnectApplicationIssuerMode



-- * OpenIdConnectApplicationSettings

-- | 'openIdConnectApplicationSettingsOauthClient' Lens
openIdConnectApplicationSettingsOauthClientL :: Lens_' OpenIdConnectApplicationSettings (Maybe OpenIdConnectApplicationSettingsClient)
openIdConnectApplicationSettingsOauthClientL f OpenIdConnectApplicationSettings{..} = (\openIdConnectApplicationSettingsOauthClient -> OpenIdConnectApplicationSettings { openIdConnectApplicationSettingsOauthClient, ..} ) <$> f openIdConnectApplicationSettingsOauthClient
{-# INLINE openIdConnectApplicationSettingsOauthClientL #-}



-- * OpenIdConnectApplicationSettingsClient

-- | 'openIdConnectApplicationSettingsClientApplicationType' Lens
openIdConnectApplicationSettingsClientApplicationTypeL :: Lens_' OpenIdConnectApplicationSettingsClient (Maybe OpenIdConnectApplicationType)
openIdConnectApplicationSettingsClientApplicationTypeL f OpenIdConnectApplicationSettingsClient{..} = (\openIdConnectApplicationSettingsClientApplicationType -> OpenIdConnectApplicationSettingsClient { openIdConnectApplicationSettingsClientApplicationType, ..} ) <$> f openIdConnectApplicationSettingsClientApplicationType
{-# INLINE openIdConnectApplicationSettingsClientApplicationTypeL #-}

-- | 'openIdConnectApplicationSettingsClientClientUri' Lens
openIdConnectApplicationSettingsClientClientUriL :: Lens_' OpenIdConnectApplicationSettingsClient (Maybe Text)
openIdConnectApplicationSettingsClientClientUriL f OpenIdConnectApplicationSettingsClient{..} = (\openIdConnectApplicationSettingsClientClientUri -> OpenIdConnectApplicationSettingsClient { openIdConnectApplicationSettingsClientClientUri, ..} ) <$> f openIdConnectApplicationSettingsClientClientUri
{-# INLINE openIdConnectApplicationSettingsClientClientUriL #-}

-- | 'openIdConnectApplicationSettingsClientConsentMethod' Lens
openIdConnectApplicationSettingsClientConsentMethodL :: Lens_' OpenIdConnectApplicationSettingsClient (Maybe OpenIdConnectApplicationConsentMethod)
openIdConnectApplicationSettingsClientConsentMethodL f OpenIdConnectApplicationSettingsClient{..} = (\openIdConnectApplicationSettingsClientConsentMethod -> OpenIdConnectApplicationSettingsClient { openIdConnectApplicationSettingsClientConsentMethod, ..} ) <$> f openIdConnectApplicationSettingsClientConsentMethod
{-# INLINE openIdConnectApplicationSettingsClientConsentMethodL #-}

-- | 'openIdConnectApplicationSettingsClientGrantTypes' Lens
openIdConnectApplicationSettingsClientGrantTypesL :: Lens_' OpenIdConnectApplicationSettingsClient (Maybe [OAuthGrantType])
openIdConnectApplicationSettingsClientGrantTypesL f OpenIdConnectApplicationSettingsClient{..} = (\openIdConnectApplicationSettingsClientGrantTypes -> OpenIdConnectApplicationSettingsClient { openIdConnectApplicationSettingsClientGrantTypes, ..} ) <$> f openIdConnectApplicationSettingsClientGrantTypes
{-# INLINE openIdConnectApplicationSettingsClientGrantTypesL #-}

-- | 'openIdConnectApplicationSettingsClientInitiateLoginUri' Lens
openIdConnectApplicationSettingsClientInitiateLoginUriL :: Lens_' OpenIdConnectApplicationSettingsClient (Maybe Text)
openIdConnectApplicationSettingsClientInitiateLoginUriL f OpenIdConnectApplicationSettingsClient{..} = (\openIdConnectApplicationSettingsClientInitiateLoginUri -> OpenIdConnectApplicationSettingsClient { openIdConnectApplicationSettingsClientInitiateLoginUri, ..} ) <$> f openIdConnectApplicationSettingsClientInitiateLoginUri
{-# INLINE openIdConnectApplicationSettingsClientInitiateLoginUriL #-}

-- | 'openIdConnectApplicationSettingsClientIssuerMode' Lens
openIdConnectApplicationSettingsClientIssuerModeL :: Lens_' OpenIdConnectApplicationSettingsClient (Maybe OpenIdConnectApplicationIssuerMode)
openIdConnectApplicationSettingsClientIssuerModeL f OpenIdConnectApplicationSettingsClient{..} = (\openIdConnectApplicationSettingsClientIssuerMode -> OpenIdConnectApplicationSettingsClient { openIdConnectApplicationSettingsClientIssuerMode, ..} ) <$> f openIdConnectApplicationSettingsClientIssuerMode
{-# INLINE openIdConnectApplicationSettingsClientIssuerModeL #-}

-- | 'openIdConnectApplicationSettingsClientIdpInitiatedLogin' Lens
openIdConnectApplicationSettingsClientIdpInitiatedLoginL :: Lens_' OpenIdConnectApplicationSettingsClient (Maybe OpenIdConnectApplicationIdpInitiatedLogin)
openIdConnectApplicationSettingsClientIdpInitiatedLoginL f OpenIdConnectApplicationSettingsClient{..} = (\openIdConnectApplicationSettingsClientIdpInitiatedLogin -> OpenIdConnectApplicationSettingsClient { openIdConnectApplicationSettingsClientIdpInitiatedLogin, ..} ) <$> f openIdConnectApplicationSettingsClientIdpInitiatedLogin
{-# INLINE openIdConnectApplicationSettingsClientIdpInitiatedLoginL #-}

-- | 'openIdConnectApplicationSettingsClientLogoUri' Lens
openIdConnectApplicationSettingsClientLogoUriL :: Lens_' OpenIdConnectApplicationSettingsClient (Maybe Text)
openIdConnectApplicationSettingsClientLogoUriL f OpenIdConnectApplicationSettingsClient{..} = (\openIdConnectApplicationSettingsClientLogoUri -> OpenIdConnectApplicationSettingsClient { openIdConnectApplicationSettingsClientLogoUri, ..} ) <$> f openIdConnectApplicationSettingsClientLogoUri
{-# INLINE openIdConnectApplicationSettingsClientLogoUriL #-}

-- | 'openIdConnectApplicationSettingsClientPolicyUri' Lens
openIdConnectApplicationSettingsClientPolicyUriL :: Lens_' OpenIdConnectApplicationSettingsClient (Maybe Text)
openIdConnectApplicationSettingsClientPolicyUriL f OpenIdConnectApplicationSettingsClient{..} = (\openIdConnectApplicationSettingsClientPolicyUri -> OpenIdConnectApplicationSettingsClient { openIdConnectApplicationSettingsClientPolicyUri, ..} ) <$> f openIdConnectApplicationSettingsClientPolicyUri
{-# INLINE openIdConnectApplicationSettingsClientPolicyUriL #-}

-- | 'openIdConnectApplicationSettingsClientPostLogoutRedirectUris' Lens
openIdConnectApplicationSettingsClientPostLogoutRedirectUrisL :: Lens_' OpenIdConnectApplicationSettingsClient (Maybe [Text])
openIdConnectApplicationSettingsClientPostLogoutRedirectUrisL f OpenIdConnectApplicationSettingsClient{..} = (\openIdConnectApplicationSettingsClientPostLogoutRedirectUris -> OpenIdConnectApplicationSettingsClient { openIdConnectApplicationSettingsClientPostLogoutRedirectUris, ..} ) <$> f openIdConnectApplicationSettingsClientPostLogoutRedirectUris
{-# INLINE openIdConnectApplicationSettingsClientPostLogoutRedirectUrisL #-}

-- | 'openIdConnectApplicationSettingsClientRedirectUris' Lens
openIdConnectApplicationSettingsClientRedirectUrisL :: Lens_' OpenIdConnectApplicationSettingsClient (Maybe [Text])
openIdConnectApplicationSettingsClientRedirectUrisL f OpenIdConnectApplicationSettingsClient{..} = (\openIdConnectApplicationSettingsClientRedirectUris -> OpenIdConnectApplicationSettingsClient { openIdConnectApplicationSettingsClientRedirectUris, ..} ) <$> f openIdConnectApplicationSettingsClientRedirectUris
{-# INLINE openIdConnectApplicationSettingsClientRedirectUrisL #-}

-- | 'openIdConnectApplicationSettingsClientWildcardRedirect' Lens
openIdConnectApplicationSettingsClientWildcardRedirectL :: Lens_' OpenIdConnectApplicationSettingsClient (Maybe Text)
openIdConnectApplicationSettingsClientWildcardRedirectL f OpenIdConnectApplicationSettingsClient{..} = (\openIdConnectApplicationSettingsClientWildcardRedirect -> OpenIdConnectApplicationSettingsClient { openIdConnectApplicationSettingsClientWildcardRedirect, ..} ) <$> f openIdConnectApplicationSettingsClientWildcardRedirect
{-# INLINE openIdConnectApplicationSettingsClientWildcardRedirectL #-}

-- | 'openIdConnectApplicationSettingsClientResponseTypes' Lens
openIdConnectApplicationSettingsClientResponseTypesL :: Lens_' OpenIdConnectApplicationSettingsClient (Maybe [OAuthResponseType])
openIdConnectApplicationSettingsClientResponseTypesL f OpenIdConnectApplicationSettingsClient{..} = (\openIdConnectApplicationSettingsClientResponseTypes -> OpenIdConnectApplicationSettingsClient { openIdConnectApplicationSettingsClientResponseTypes, ..} ) <$> f openIdConnectApplicationSettingsClientResponseTypes
{-# INLINE openIdConnectApplicationSettingsClientResponseTypesL #-}

-- | 'openIdConnectApplicationSettingsClientRefreshToken' Lens
openIdConnectApplicationSettingsClientRefreshTokenL :: Lens_' OpenIdConnectApplicationSettingsClient (Maybe OpenIdConnectApplicationSettingsRefreshToken)
openIdConnectApplicationSettingsClientRefreshTokenL f OpenIdConnectApplicationSettingsClient{..} = (\openIdConnectApplicationSettingsClientRefreshToken -> OpenIdConnectApplicationSettingsClient { openIdConnectApplicationSettingsClientRefreshToken, ..} ) <$> f openIdConnectApplicationSettingsClientRefreshToken
{-# INLINE openIdConnectApplicationSettingsClientRefreshTokenL #-}

-- | 'openIdConnectApplicationSettingsClientTosUri' Lens
openIdConnectApplicationSettingsClientTosUriL :: Lens_' OpenIdConnectApplicationSettingsClient (Maybe Text)
openIdConnectApplicationSettingsClientTosUriL f OpenIdConnectApplicationSettingsClient{..} = (\openIdConnectApplicationSettingsClientTosUri -> OpenIdConnectApplicationSettingsClient { openIdConnectApplicationSettingsClientTosUri, ..} ) <$> f openIdConnectApplicationSettingsClientTosUri
{-# INLINE openIdConnectApplicationSettingsClientTosUriL #-}

-- | 'openIdConnectApplicationSettingsClientJwks' Lens
openIdConnectApplicationSettingsClientJwksL :: Lens_' OpenIdConnectApplicationSettingsClient (Maybe OpenIdConnectApplicationSettingsClientKeys)
openIdConnectApplicationSettingsClientJwksL f OpenIdConnectApplicationSettingsClient{..} = (\openIdConnectApplicationSettingsClientJwks -> OpenIdConnectApplicationSettingsClient { openIdConnectApplicationSettingsClientJwks, ..} ) <$> f openIdConnectApplicationSettingsClientJwks
{-# INLINE openIdConnectApplicationSettingsClientJwksL #-}



-- * OpenIdConnectApplicationSettingsClientKeys

-- | 'openIdConnectApplicationSettingsClientKeysKeys' Lens
openIdConnectApplicationSettingsClientKeysKeysL :: Lens_' OpenIdConnectApplicationSettingsClientKeys (Maybe [JsonWebKey])
openIdConnectApplicationSettingsClientKeysKeysL f OpenIdConnectApplicationSettingsClientKeys{..} = (\openIdConnectApplicationSettingsClientKeysKeys -> OpenIdConnectApplicationSettingsClientKeys { openIdConnectApplicationSettingsClientKeysKeys, ..} ) <$> f openIdConnectApplicationSettingsClientKeysKeys
{-# INLINE openIdConnectApplicationSettingsClientKeysKeysL #-}



-- * OpenIdConnectApplicationSettingsRefreshToken

-- | 'openIdConnectApplicationSettingsRefreshTokenLeeway' Lens
openIdConnectApplicationSettingsRefreshTokenLeewayL :: Lens_' OpenIdConnectApplicationSettingsRefreshToken (Maybe Int)
openIdConnectApplicationSettingsRefreshTokenLeewayL f OpenIdConnectApplicationSettingsRefreshToken{..} = (\openIdConnectApplicationSettingsRefreshTokenLeeway -> OpenIdConnectApplicationSettingsRefreshToken { openIdConnectApplicationSettingsRefreshTokenLeeway, ..} ) <$> f openIdConnectApplicationSettingsRefreshTokenLeeway
{-# INLINE openIdConnectApplicationSettingsRefreshTokenLeewayL #-}

-- | 'openIdConnectApplicationSettingsRefreshTokenRotationType' Lens
openIdConnectApplicationSettingsRefreshTokenRotationTypeL :: Lens_' OpenIdConnectApplicationSettingsRefreshToken (Maybe OpenIdConnectRefreshTokenRotationType)
openIdConnectApplicationSettingsRefreshTokenRotationTypeL f OpenIdConnectApplicationSettingsRefreshToken{..} = (\openIdConnectApplicationSettingsRefreshTokenRotationType -> OpenIdConnectApplicationSettingsRefreshToken { openIdConnectApplicationSettingsRefreshTokenRotationType, ..} ) <$> f openIdConnectApplicationSettingsRefreshTokenRotationType
{-# INLINE openIdConnectApplicationSettingsRefreshTokenRotationTypeL #-}



-- * OpenIdConnectApplicationType



-- * OpenIdConnectRefreshTokenRotationType



-- * Org2OrgApplication

-- | 'org2OrgApplicationName' Lens
org2OrgApplicationNameL :: Lens_' Org2OrgApplication (Maybe A.Value)
org2OrgApplicationNameL f Org2OrgApplication{..} = (\org2OrgApplicationName -> Org2OrgApplication { org2OrgApplicationName, ..} ) <$> f org2OrgApplicationName
{-# INLINE org2OrgApplicationNameL #-}

-- | 'org2OrgApplicationSettings' Lens
org2OrgApplicationSettingsL :: Lens_' Org2OrgApplication (Maybe Org2OrgApplicationSettings)
org2OrgApplicationSettingsL f Org2OrgApplication{..} = (\org2OrgApplicationSettings -> Org2OrgApplication { org2OrgApplicationSettings, ..} ) <$> f org2OrgApplicationSettings
{-# INLINE org2OrgApplicationSettingsL #-}



-- * Org2OrgApplicationSettings

-- | 'org2OrgApplicationSettingsApp' Lens
org2OrgApplicationSettingsAppL :: Lens_' Org2OrgApplicationSettings (Maybe Org2OrgApplicationSettingsApp)
org2OrgApplicationSettingsAppL f Org2OrgApplicationSettings{..} = (\org2OrgApplicationSettingsApp -> Org2OrgApplicationSettings { org2OrgApplicationSettingsApp, ..} ) <$> f org2OrgApplicationSettingsApp
{-# INLINE org2OrgApplicationSettingsAppL #-}



-- * Org2OrgApplicationSettingsApp

-- | 'org2OrgApplicationSettingsAppAcsUrl' Lens
org2OrgApplicationSettingsAppAcsUrlL :: Lens_' Org2OrgApplicationSettingsApp (Maybe Text)
org2OrgApplicationSettingsAppAcsUrlL f Org2OrgApplicationSettingsApp{..} = (\org2OrgApplicationSettingsAppAcsUrl -> Org2OrgApplicationSettingsApp { org2OrgApplicationSettingsAppAcsUrl, ..} ) <$> f org2OrgApplicationSettingsAppAcsUrl
{-# INLINE org2OrgApplicationSettingsAppAcsUrlL #-}

-- | 'org2OrgApplicationSettingsAppAudRestriction' Lens
org2OrgApplicationSettingsAppAudRestrictionL :: Lens_' Org2OrgApplicationSettingsApp (Maybe Text)
org2OrgApplicationSettingsAppAudRestrictionL f Org2OrgApplicationSettingsApp{..} = (\org2OrgApplicationSettingsAppAudRestriction -> Org2OrgApplicationSettingsApp { org2OrgApplicationSettingsAppAudRestriction, ..} ) <$> f org2OrgApplicationSettingsAppAudRestriction
{-# INLINE org2OrgApplicationSettingsAppAudRestrictionL #-}

-- | 'org2OrgApplicationSettingsAppBaseUrl' Lens
org2OrgApplicationSettingsAppBaseUrlL :: Lens_' Org2OrgApplicationSettingsApp (Maybe Text)
org2OrgApplicationSettingsAppBaseUrlL f Org2OrgApplicationSettingsApp{..} = (\org2OrgApplicationSettingsAppBaseUrl -> Org2OrgApplicationSettingsApp { org2OrgApplicationSettingsAppBaseUrl, ..} ) <$> f org2OrgApplicationSettingsAppBaseUrl
{-# INLINE org2OrgApplicationSettingsAppBaseUrlL #-}



-- * OrgContactType



-- * OrgContactTypeObj

-- | 'orgContactTypeObjLinks' Lens
orgContactTypeObjLinksL :: Lens_' OrgContactTypeObj (Maybe A.Value)
orgContactTypeObjLinksL f OrgContactTypeObj{..} = (\orgContactTypeObjLinks -> OrgContactTypeObj { orgContactTypeObjLinks, ..} ) <$> f orgContactTypeObjLinks
{-# INLINE orgContactTypeObjLinksL #-}

-- | 'orgContactTypeObjContactType' Lens
orgContactTypeObjContactTypeL :: Lens_' OrgContactTypeObj (Maybe OrgContactType)
orgContactTypeObjContactTypeL f OrgContactTypeObj{..} = (\orgContactTypeObjContactType -> OrgContactTypeObj { orgContactTypeObjContactType, ..} ) <$> f orgContactTypeObjContactType
{-# INLINE orgContactTypeObjContactTypeL #-}



-- * OrgContactUser

-- | 'orgContactUserLinks' Lens
orgContactUserLinksL :: Lens_' OrgContactUser (Maybe (Map.Map String A.Value))
orgContactUserLinksL f OrgContactUser{..} = (\orgContactUserLinks -> OrgContactUser { orgContactUserLinks, ..} ) <$> f orgContactUserLinks
{-# INLINE orgContactUserLinksL #-}

-- | 'orgContactUserUserId' Lens
orgContactUserUserIdL :: Lens_' OrgContactUser (Maybe Text)
orgContactUserUserIdL f OrgContactUser{..} = (\orgContactUserUserId -> OrgContactUser { orgContactUserUserId, ..} ) <$> f orgContactUserUserId
{-# INLINE orgContactUserUserIdL #-}



-- * OrgOktaCommunicationSetting

-- | 'orgOktaCommunicationSettingLinks' Lens
orgOktaCommunicationSettingLinksL :: Lens_' OrgOktaCommunicationSetting (Maybe A.Value)
orgOktaCommunicationSettingLinksL f OrgOktaCommunicationSetting{..} = (\orgOktaCommunicationSettingLinks -> OrgOktaCommunicationSetting { orgOktaCommunicationSettingLinks, ..} ) <$> f orgOktaCommunicationSettingLinks
{-# INLINE orgOktaCommunicationSettingLinksL #-}

-- | 'orgOktaCommunicationSettingOptOutEmailUsers' Lens
orgOktaCommunicationSettingOptOutEmailUsersL :: Lens_' OrgOktaCommunicationSetting (Maybe Bool)
orgOktaCommunicationSettingOptOutEmailUsersL f OrgOktaCommunicationSetting{..} = (\orgOktaCommunicationSettingOptOutEmailUsers -> OrgOktaCommunicationSetting { orgOktaCommunicationSettingOptOutEmailUsers, ..} ) <$> f orgOktaCommunicationSettingOptOutEmailUsers
{-# INLINE orgOktaCommunicationSettingOptOutEmailUsersL #-}



-- * OrgOktaSupportSetting



-- * OrgOktaSupportSettingsObj

-- | 'orgOktaSupportSettingsObjLinks' Lens
orgOktaSupportSettingsObjLinksL :: Lens_' OrgOktaSupportSettingsObj (Maybe A.Value)
orgOktaSupportSettingsObjLinksL f OrgOktaSupportSettingsObj{..} = (\orgOktaSupportSettingsObjLinks -> OrgOktaSupportSettingsObj { orgOktaSupportSettingsObjLinks, ..} ) <$> f orgOktaSupportSettingsObjLinks
{-# INLINE orgOktaSupportSettingsObjLinksL #-}

-- | 'orgOktaSupportSettingsObjExpiration' Lens
orgOktaSupportSettingsObjExpirationL :: Lens_' OrgOktaSupportSettingsObj (Maybe DateTime)
orgOktaSupportSettingsObjExpirationL f OrgOktaSupportSettingsObj{..} = (\orgOktaSupportSettingsObjExpiration -> OrgOktaSupportSettingsObj { orgOktaSupportSettingsObjExpiration, ..} ) <$> f orgOktaSupportSettingsObjExpiration
{-# INLINE orgOktaSupportSettingsObjExpirationL #-}

-- | 'orgOktaSupportSettingsObjSupport' Lens
orgOktaSupportSettingsObjSupportL :: Lens_' OrgOktaSupportSettingsObj (Maybe OrgOktaSupportSetting)
orgOktaSupportSettingsObjSupportL f OrgOktaSupportSettingsObj{..} = (\orgOktaSupportSettingsObjSupport -> OrgOktaSupportSettingsObj { orgOktaSupportSettingsObjSupport, ..} ) <$> f orgOktaSupportSettingsObjSupport
{-# INLINE orgOktaSupportSettingsObjSupportL #-}



-- * OrgPreferences

-- | 'orgPreferencesLinks' Lens
orgPreferencesLinksL :: Lens_' OrgPreferences (Maybe A.Value)
orgPreferencesLinksL f OrgPreferences{..} = (\orgPreferencesLinks -> OrgPreferences { orgPreferencesLinks, ..} ) <$> f orgPreferencesLinks
{-# INLINE orgPreferencesLinksL #-}

-- | 'orgPreferencesShowEndUserFooter' Lens
orgPreferencesShowEndUserFooterL :: Lens_' OrgPreferences (Maybe Bool)
orgPreferencesShowEndUserFooterL f OrgPreferences{..} = (\orgPreferencesShowEndUserFooter -> OrgPreferences { orgPreferencesShowEndUserFooter, ..} ) <$> f orgPreferencesShowEndUserFooter
{-# INLINE orgPreferencesShowEndUserFooterL #-}



-- * OrgSetting

-- | 'orgSettingLinks' Lens
orgSettingLinksL :: Lens_' OrgSetting (Maybe A.Value)
orgSettingLinksL f OrgSetting{..} = (\orgSettingLinks -> OrgSetting { orgSettingLinks, ..} ) <$> f orgSettingLinks
{-# INLINE orgSettingLinksL #-}

-- | 'orgSettingAddress1' Lens
orgSettingAddress1L :: Lens_' OrgSetting (Maybe Text)
orgSettingAddress1L f OrgSetting{..} = (\orgSettingAddress1 -> OrgSetting { orgSettingAddress1, ..} ) <$> f orgSettingAddress1
{-# INLINE orgSettingAddress1L #-}

-- | 'orgSettingAddress2' Lens
orgSettingAddress2L :: Lens_' OrgSetting (Maybe Text)
orgSettingAddress2L f OrgSetting{..} = (\orgSettingAddress2 -> OrgSetting { orgSettingAddress2, ..} ) <$> f orgSettingAddress2
{-# INLINE orgSettingAddress2L #-}

-- | 'orgSettingCity' Lens
orgSettingCityL :: Lens_' OrgSetting (Maybe Text)
orgSettingCityL f OrgSetting{..} = (\orgSettingCity -> OrgSetting { orgSettingCity, ..} ) <$> f orgSettingCity
{-# INLINE orgSettingCityL #-}

-- | 'orgSettingCompanyName' Lens
orgSettingCompanyNameL :: Lens_' OrgSetting (Maybe Text)
orgSettingCompanyNameL f OrgSetting{..} = (\orgSettingCompanyName -> OrgSetting { orgSettingCompanyName, ..} ) <$> f orgSettingCompanyName
{-# INLINE orgSettingCompanyNameL #-}

-- | 'orgSettingCountry' Lens
orgSettingCountryL :: Lens_' OrgSetting (Maybe Text)
orgSettingCountryL f OrgSetting{..} = (\orgSettingCountry -> OrgSetting { orgSettingCountry, ..} ) <$> f orgSettingCountry
{-# INLINE orgSettingCountryL #-}

-- | 'orgSettingCreated' Lens
orgSettingCreatedL :: Lens_' OrgSetting (Maybe DateTime)
orgSettingCreatedL f OrgSetting{..} = (\orgSettingCreated -> OrgSetting { orgSettingCreated, ..} ) <$> f orgSettingCreated
{-# INLINE orgSettingCreatedL #-}

-- | 'orgSettingEndUserSupportHelpUrl' Lens
orgSettingEndUserSupportHelpUrlL :: Lens_' OrgSetting (Maybe Text)
orgSettingEndUserSupportHelpUrlL f OrgSetting{..} = (\orgSettingEndUserSupportHelpUrl -> OrgSetting { orgSettingEndUserSupportHelpUrl, ..} ) <$> f orgSettingEndUserSupportHelpUrl
{-# INLINE orgSettingEndUserSupportHelpUrlL #-}

-- | 'orgSettingExpiresAt' Lens
orgSettingExpiresAtL :: Lens_' OrgSetting (Maybe DateTime)
orgSettingExpiresAtL f OrgSetting{..} = (\orgSettingExpiresAt -> OrgSetting { orgSettingExpiresAt, ..} ) <$> f orgSettingExpiresAt
{-# INLINE orgSettingExpiresAtL #-}

-- | 'orgSettingId' Lens
orgSettingIdL :: Lens_' OrgSetting (Maybe Text)
orgSettingIdL f OrgSetting{..} = (\orgSettingId -> OrgSetting { orgSettingId, ..} ) <$> f orgSettingId
{-# INLINE orgSettingIdL #-}

-- | 'orgSettingLastUpdated' Lens
orgSettingLastUpdatedL :: Lens_' OrgSetting (Maybe DateTime)
orgSettingLastUpdatedL f OrgSetting{..} = (\orgSettingLastUpdated -> OrgSetting { orgSettingLastUpdated, ..} ) <$> f orgSettingLastUpdated
{-# INLINE orgSettingLastUpdatedL #-}

-- | 'orgSettingPhoneNumber' Lens
orgSettingPhoneNumberL :: Lens_' OrgSetting (Maybe Text)
orgSettingPhoneNumberL f OrgSetting{..} = (\orgSettingPhoneNumber -> OrgSetting { orgSettingPhoneNumber, ..} ) <$> f orgSettingPhoneNumber
{-# INLINE orgSettingPhoneNumberL #-}

-- | 'orgSettingPostalCode' Lens
orgSettingPostalCodeL :: Lens_' OrgSetting (Maybe Text)
orgSettingPostalCodeL f OrgSetting{..} = (\orgSettingPostalCode -> OrgSetting { orgSettingPostalCode, ..} ) <$> f orgSettingPostalCode
{-# INLINE orgSettingPostalCodeL #-}

-- | 'orgSettingState' Lens
orgSettingStateL :: Lens_' OrgSetting (Maybe Text)
orgSettingStateL f OrgSetting{..} = (\orgSettingState -> OrgSetting { orgSettingState, ..} ) <$> f orgSettingState
{-# INLINE orgSettingStateL #-}

-- | 'orgSettingStatus' Lens
orgSettingStatusL :: Lens_' OrgSetting (Maybe Text)
orgSettingStatusL f OrgSetting{..} = (\orgSettingStatus -> OrgSetting { orgSettingStatus, ..} ) <$> f orgSettingStatus
{-# INLINE orgSettingStatusL #-}

-- | 'orgSettingSubdomain' Lens
orgSettingSubdomainL :: Lens_' OrgSetting (Maybe Text)
orgSettingSubdomainL f OrgSetting{..} = (\orgSettingSubdomain -> OrgSetting { orgSettingSubdomain, ..} ) <$> f orgSettingSubdomain
{-# INLINE orgSettingSubdomainL #-}

-- | 'orgSettingSupportPhoneNumber' Lens
orgSettingSupportPhoneNumberL :: Lens_' OrgSetting (Maybe Text)
orgSettingSupportPhoneNumberL f OrgSetting{..} = (\orgSettingSupportPhoneNumber -> OrgSetting { orgSettingSupportPhoneNumber, ..} ) <$> f orgSettingSupportPhoneNumber
{-# INLINE orgSettingSupportPhoneNumberL #-}

-- | 'orgSettingWebsite' Lens
orgSettingWebsiteL :: Lens_' OrgSetting (Maybe Text)
orgSettingWebsiteL f OrgSetting{..} = (\orgSettingWebsite -> OrgSetting { orgSettingWebsite, ..} ) <$> f orgSettingWebsite
{-# INLINE orgSettingWebsiteL #-}



-- * PasswordCredential

-- | 'passwordCredentialHash' Lens
passwordCredentialHashL :: Lens_' PasswordCredential (Maybe PasswordCredentialHash)
passwordCredentialHashL f PasswordCredential{..} = (\passwordCredentialHash -> PasswordCredential { passwordCredentialHash, ..} ) <$> f passwordCredentialHash
{-# INLINE passwordCredentialHashL #-}

-- | 'passwordCredentialHook' Lens
passwordCredentialHookL :: Lens_' PasswordCredential (Maybe PasswordCredentialHook)
passwordCredentialHookL f PasswordCredential{..} = (\passwordCredentialHook -> PasswordCredential { passwordCredentialHook, ..} ) <$> f passwordCredentialHook
{-# INLINE passwordCredentialHookL #-}

-- | 'passwordCredentialValue' Lens
passwordCredentialValueL :: Lens_' PasswordCredential (Maybe Text)
passwordCredentialValueL f PasswordCredential{..} = (\passwordCredentialValue -> PasswordCredential { passwordCredentialValue, ..} ) <$> f passwordCredentialValue
{-# INLINE passwordCredentialValueL #-}



-- * PasswordCredentialHash

-- | 'passwordCredentialHashAlgorithm' Lens
passwordCredentialHashAlgorithmL :: Lens_' PasswordCredentialHash (Maybe PasswordCredentialHashAlgorithm)
passwordCredentialHashAlgorithmL f PasswordCredentialHash{..} = (\passwordCredentialHashAlgorithm -> PasswordCredentialHash { passwordCredentialHashAlgorithm, ..} ) <$> f passwordCredentialHashAlgorithm
{-# INLINE passwordCredentialHashAlgorithmL #-}

-- | 'passwordCredentialHashSalt' Lens
passwordCredentialHashSaltL :: Lens_' PasswordCredentialHash (Maybe Text)
passwordCredentialHashSaltL f PasswordCredentialHash{..} = (\passwordCredentialHashSalt -> PasswordCredentialHash { passwordCredentialHashSalt, ..} ) <$> f passwordCredentialHashSalt
{-# INLINE passwordCredentialHashSaltL #-}

-- | 'passwordCredentialHashSaltOrder' Lens
passwordCredentialHashSaltOrderL :: Lens_' PasswordCredentialHash (Maybe Text)
passwordCredentialHashSaltOrderL f PasswordCredentialHash{..} = (\passwordCredentialHashSaltOrder -> PasswordCredentialHash { passwordCredentialHashSaltOrder, ..} ) <$> f passwordCredentialHashSaltOrder
{-# INLINE passwordCredentialHashSaltOrderL #-}

-- | 'passwordCredentialHashValue' Lens
passwordCredentialHashValueL :: Lens_' PasswordCredentialHash (Maybe Text)
passwordCredentialHashValueL f PasswordCredentialHash{..} = (\passwordCredentialHashValue -> PasswordCredentialHash { passwordCredentialHashValue, ..} ) <$> f passwordCredentialHashValue
{-# INLINE passwordCredentialHashValueL #-}

-- | 'passwordCredentialHashWorkFactor' Lens
passwordCredentialHashWorkFactorL :: Lens_' PasswordCredentialHash (Maybe Int)
passwordCredentialHashWorkFactorL f PasswordCredentialHash{..} = (\passwordCredentialHashWorkFactor -> PasswordCredentialHash { passwordCredentialHashWorkFactor, ..} ) <$> f passwordCredentialHashWorkFactor
{-# INLINE passwordCredentialHashWorkFactorL #-}



-- * PasswordCredentialHashAlgorithm



-- * PasswordCredentialHook

-- | 'passwordCredentialHookType' Lens
passwordCredentialHookTypeL :: Lens_' PasswordCredentialHook (Maybe Text)
passwordCredentialHookTypeL f PasswordCredentialHook{..} = (\passwordCredentialHookType -> PasswordCredentialHook { passwordCredentialHookType, ..} ) <$> f passwordCredentialHookType
{-# INLINE passwordCredentialHookTypeL #-}



-- * PasswordDictionary

-- | 'passwordDictionaryCommon' Lens
passwordDictionaryCommonL :: Lens_' PasswordDictionary (Maybe PasswordDictionaryCommon)
passwordDictionaryCommonL f PasswordDictionary{..} = (\passwordDictionaryCommon -> PasswordDictionary { passwordDictionaryCommon, ..} ) <$> f passwordDictionaryCommon
{-# INLINE passwordDictionaryCommonL #-}



-- * PasswordDictionaryCommon

-- | 'passwordDictionaryCommonExclude' Lens
passwordDictionaryCommonExcludeL :: Lens_' PasswordDictionaryCommon (Maybe Bool)
passwordDictionaryCommonExcludeL f PasswordDictionaryCommon{..} = (\passwordDictionaryCommonExclude -> PasswordDictionaryCommon { passwordDictionaryCommonExclude, ..} ) <$> f passwordDictionaryCommonExclude
{-# INLINE passwordDictionaryCommonExcludeL #-}



-- * PasswordExpirationPolicyRuleCondition

-- | 'passwordExpirationPolicyRuleConditionNumber' Lens
passwordExpirationPolicyRuleConditionNumberL :: Lens_' PasswordExpirationPolicyRuleCondition (Maybe Int)
passwordExpirationPolicyRuleConditionNumberL f PasswordExpirationPolicyRuleCondition{..} = (\passwordExpirationPolicyRuleConditionNumber -> PasswordExpirationPolicyRuleCondition { passwordExpirationPolicyRuleConditionNumber, ..} ) <$> f passwordExpirationPolicyRuleConditionNumber
{-# INLINE passwordExpirationPolicyRuleConditionNumberL #-}

-- | 'passwordExpirationPolicyRuleConditionUnit' Lens
passwordExpirationPolicyRuleConditionUnitL :: Lens_' PasswordExpirationPolicyRuleCondition (Maybe Text)
passwordExpirationPolicyRuleConditionUnitL f PasswordExpirationPolicyRuleCondition{..} = (\passwordExpirationPolicyRuleConditionUnit -> PasswordExpirationPolicyRuleCondition { passwordExpirationPolicyRuleConditionUnit, ..} ) <$> f passwordExpirationPolicyRuleConditionUnit
{-# INLINE passwordExpirationPolicyRuleConditionUnitL #-}



-- * PasswordPolicy

-- | 'passwordPolicyConditions' Lens
passwordPolicyConditionsL :: Lens_' PasswordPolicy (Maybe PasswordPolicyConditions)
passwordPolicyConditionsL f PasswordPolicy{..} = (\passwordPolicyConditions -> PasswordPolicy { passwordPolicyConditions, ..} ) <$> f passwordPolicyConditions
{-# INLINE passwordPolicyConditionsL #-}

-- | 'passwordPolicySettings' Lens
passwordPolicySettingsL :: Lens_' PasswordPolicy (Maybe PasswordPolicySettings)
passwordPolicySettingsL f PasswordPolicy{..} = (\passwordPolicySettings -> PasswordPolicy { passwordPolicySettings, ..} ) <$> f passwordPolicySettings
{-# INLINE passwordPolicySettingsL #-}



-- * PasswordPolicyAuthenticationProviderCondition

-- | 'passwordPolicyAuthenticationProviderConditionInclude' Lens
passwordPolicyAuthenticationProviderConditionIncludeL :: Lens_' PasswordPolicyAuthenticationProviderCondition (Maybe [Text])
passwordPolicyAuthenticationProviderConditionIncludeL f PasswordPolicyAuthenticationProviderCondition{..} = (\passwordPolicyAuthenticationProviderConditionInclude -> PasswordPolicyAuthenticationProviderCondition { passwordPolicyAuthenticationProviderConditionInclude, ..} ) <$> f passwordPolicyAuthenticationProviderConditionInclude
{-# INLINE passwordPolicyAuthenticationProviderConditionIncludeL #-}

-- | 'passwordPolicyAuthenticationProviderConditionProvider' Lens
passwordPolicyAuthenticationProviderConditionProviderL :: Lens_' PasswordPolicyAuthenticationProviderCondition (Maybe E'Provider2)
passwordPolicyAuthenticationProviderConditionProviderL f PasswordPolicyAuthenticationProviderCondition{..} = (\passwordPolicyAuthenticationProviderConditionProvider -> PasswordPolicyAuthenticationProviderCondition { passwordPolicyAuthenticationProviderConditionProvider, ..} ) <$> f passwordPolicyAuthenticationProviderConditionProvider
{-# INLINE passwordPolicyAuthenticationProviderConditionProviderL #-}



-- * PasswordPolicyConditions

-- | 'passwordPolicyConditionsAuthProvider' Lens
passwordPolicyConditionsAuthProviderL :: Lens_' PasswordPolicyConditions (Maybe PasswordPolicyAuthenticationProviderCondition)
passwordPolicyConditionsAuthProviderL f PasswordPolicyConditions{..} = (\passwordPolicyConditionsAuthProvider -> PasswordPolicyConditions { passwordPolicyConditionsAuthProvider, ..} ) <$> f passwordPolicyConditionsAuthProvider
{-# INLINE passwordPolicyConditionsAuthProviderL #-}

-- | 'passwordPolicyConditionsPeople' Lens
passwordPolicyConditionsPeopleL :: Lens_' PasswordPolicyConditions (Maybe PolicyPeopleCondition)
passwordPolicyConditionsPeopleL f PasswordPolicyConditions{..} = (\passwordPolicyConditionsPeople -> PasswordPolicyConditions { passwordPolicyConditionsPeople, ..} ) <$> f passwordPolicyConditionsPeople
{-# INLINE passwordPolicyConditionsPeopleL #-}



-- * PasswordPolicyDelegationSettings

-- | 'passwordPolicyDelegationSettingsOptions' Lens
passwordPolicyDelegationSettingsOptionsL :: Lens_' PasswordPolicyDelegationSettings (Maybe PasswordPolicyDelegationSettingsOptions)
passwordPolicyDelegationSettingsOptionsL f PasswordPolicyDelegationSettings{..} = (\passwordPolicyDelegationSettingsOptions -> PasswordPolicyDelegationSettings { passwordPolicyDelegationSettingsOptions, ..} ) <$> f passwordPolicyDelegationSettingsOptions
{-# INLINE passwordPolicyDelegationSettingsOptionsL #-}



-- * PasswordPolicyDelegationSettingsOptions

-- | 'passwordPolicyDelegationSettingsOptionsSkipUnlock' Lens
passwordPolicyDelegationSettingsOptionsSkipUnlockL :: Lens_' PasswordPolicyDelegationSettingsOptions (Maybe Bool)
passwordPolicyDelegationSettingsOptionsSkipUnlockL f PasswordPolicyDelegationSettingsOptions{..} = (\passwordPolicyDelegationSettingsOptionsSkipUnlock -> PasswordPolicyDelegationSettingsOptions { passwordPolicyDelegationSettingsOptionsSkipUnlock, ..} ) <$> f passwordPolicyDelegationSettingsOptionsSkipUnlock
{-# INLINE passwordPolicyDelegationSettingsOptionsSkipUnlockL #-}



-- * PasswordPolicyPasswordSettings

-- | 'passwordPolicyPasswordSettingsAge' Lens
passwordPolicyPasswordSettingsAgeL :: Lens_' PasswordPolicyPasswordSettings (Maybe PasswordPolicyPasswordSettingsAge)
passwordPolicyPasswordSettingsAgeL f PasswordPolicyPasswordSettings{..} = (\passwordPolicyPasswordSettingsAge -> PasswordPolicyPasswordSettings { passwordPolicyPasswordSettingsAge, ..} ) <$> f passwordPolicyPasswordSettingsAge
{-# INLINE passwordPolicyPasswordSettingsAgeL #-}

-- | 'passwordPolicyPasswordSettingsComplexity' Lens
passwordPolicyPasswordSettingsComplexityL :: Lens_' PasswordPolicyPasswordSettings (Maybe PasswordPolicyPasswordSettingsComplexity)
passwordPolicyPasswordSettingsComplexityL f PasswordPolicyPasswordSettings{..} = (\passwordPolicyPasswordSettingsComplexity -> PasswordPolicyPasswordSettings { passwordPolicyPasswordSettingsComplexity, ..} ) <$> f passwordPolicyPasswordSettingsComplexity
{-# INLINE passwordPolicyPasswordSettingsComplexityL #-}

-- | 'passwordPolicyPasswordSettingsLockout' Lens
passwordPolicyPasswordSettingsLockoutL :: Lens_' PasswordPolicyPasswordSettings (Maybe PasswordPolicyPasswordSettingsLockout)
passwordPolicyPasswordSettingsLockoutL f PasswordPolicyPasswordSettings{..} = (\passwordPolicyPasswordSettingsLockout -> PasswordPolicyPasswordSettings { passwordPolicyPasswordSettingsLockout, ..} ) <$> f passwordPolicyPasswordSettingsLockout
{-# INLINE passwordPolicyPasswordSettingsLockoutL #-}



-- * PasswordPolicyPasswordSettingsAge

-- | 'passwordPolicyPasswordSettingsAgeExpireWarnDays' Lens
passwordPolicyPasswordSettingsAgeExpireWarnDaysL :: Lens_' PasswordPolicyPasswordSettingsAge (Maybe Int)
passwordPolicyPasswordSettingsAgeExpireWarnDaysL f PasswordPolicyPasswordSettingsAge{..} = (\passwordPolicyPasswordSettingsAgeExpireWarnDays -> PasswordPolicyPasswordSettingsAge { passwordPolicyPasswordSettingsAgeExpireWarnDays, ..} ) <$> f passwordPolicyPasswordSettingsAgeExpireWarnDays
{-# INLINE passwordPolicyPasswordSettingsAgeExpireWarnDaysL #-}

-- | 'passwordPolicyPasswordSettingsAgeHistoryCount' Lens
passwordPolicyPasswordSettingsAgeHistoryCountL :: Lens_' PasswordPolicyPasswordSettingsAge (Maybe Int)
passwordPolicyPasswordSettingsAgeHistoryCountL f PasswordPolicyPasswordSettingsAge{..} = (\passwordPolicyPasswordSettingsAgeHistoryCount -> PasswordPolicyPasswordSettingsAge { passwordPolicyPasswordSettingsAgeHistoryCount, ..} ) <$> f passwordPolicyPasswordSettingsAgeHistoryCount
{-# INLINE passwordPolicyPasswordSettingsAgeHistoryCountL #-}

-- | 'passwordPolicyPasswordSettingsAgeMaxAgeDays' Lens
passwordPolicyPasswordSettingsAgeMaxAgeDaysL :: Lens_' PasswordPolicyPasswordSettingsAge (Maybe Int)
passwordPolicyPasswordSettingsAgeMaxAgeDaysL f PasswordPolicyPasswordSettingsAge{..} = (\passwordPolicyPasswordSettingsAgeMaxAgeDays -> PasswordPolicyPasswordSettingsAge { passwordPolicyPasswordSettingsAgeMaxAgeDays, ..} ) <$> f passwordPolicyPasswordSettingsAgeMaxAgeDays
{-# INLINE passwordPolicyPasswordSettingsAgeMaxAgeDaysL #-}

-- | 'passwordPolicyPasswordSettingsAgeMinAgeMinutes' Lens
passwordPolicyPasswordSettingsAgeMinAgeMinutesL :: Lens_' PasswordPolicyPasswordSettingsAge (Maybe Int)
passwordPolicyPasswordSettingsAgeMinAgeMinutesL f PasswordPolicyPasswordSettingsAge{..} = (\passwordPolicyPasswordSettingsAgeMinAgeMinutes -> PasswordPolicyPasswordSettingsAge { passwordPolicyPasswordSettingsAgeMinAgeMinutes, ..} ) <$> f passwordPolicyPasswordSettingsAgeMinAgeMinutes
{-# INLINE passwordPolicyPasswordSettingsAgeMinAgeMinutesL #-}



-- * PasswordPolicyPasswordSettingsComplexity

-- | 'passwordPolicyPasswordSettingsComplexityDictionary' Lens
passwordPolicyPasswordSettingsComplexityDictionaryL :: Lens_' PasswordPolicyPasswordSettingsComplexity (Maybe PasswordDictionary)
passwordPolicyPasswordSettingsComplexityDictionaryL f PasswordPolicyPasswordSettingsComplexity{..} = (\passwordPolicyPasswordSettingsComplexityDictionary -> PasswordPolicyPasswordSettingsComplexity { passwordPolicyPasswordSettingsComplexityDictionary, ..} ) <$> f passwordPolicyPasswordSettingsComplexityDictionary
{-# INLINE passwordPolicyPasswordSettingsComplexityDictionaryL #-}

-- | 'passwordPolicyPasswordSettingsComplexityExcludeAttributes' Lens
passwordPolicyPasswordSettingsComplexityExcludeAttributesL :: Lens_' PasswordPolicyPasswordSettingsComplexity (Maybe [Text])
passwordPolicyPasswordSettingsComplexityExcludeAttributesL f PasswordPolicyPasswordSettingsComplexity{..} = (\passwordPolicyPasswordSettingsComplexityExcludeAttributes -> PasswordPolicyPasswordSettingsComplexity { passwordPolicyPasswordSettingsComplexityExcludeAttributes, ..} ) <$> f passwordPolicyPasswordSettingsComplexityExcludeAttributes
{-# INLINE passwordPolicyPasswordSettingsComplexityExcludeAttributesL #-}

-- | 'passwordPolicyPasswordSettingsComplexityExcludeUsername' Lens
passwordPolicyPasswordSettingsComplexityExcludeUsernameL :: Lens_' PasswordPolicyPasswordSettingsComplexity (Maybe Bool)
passwordPolicyPasswordSettingsComplexityExcludeUsernameL f PasswordPolicyPasswordSettingsComplexity{..} = (\passwordPolicyPasswordSettingsComplexityExcludeUsername -> PasswordPolicyPasswordSettingsComplexity { passwordPolicyPasswordSettingsComplexityExcludeUsername, ..} ) <$> f passwordPolicyPasswordSettingsComplexityExcludeUsername
{-# INLINE passwordPolicyPasswordSettingsComplexityExcludeUsernameL #-}

-- | 'passwordPolicyPasswordSettingsComplexityMinLength' Lens
passwordPolicyPasswordSettingsComplexityMinLengthL :: Lens_' PasswordPolicyPasswordSettingsComplexity (Maybe Int)
passwordPolicyPasswordSettingsComplexityMinLengthL f PasswordPolicyPasswordSettingsComplexity{..} = (\passwordPolicyPasswordSettingsComplexityMinLength -> PasswordPolicyPasswordSettingsComplexity { passwordPolicyPasswordSettingsComplexityMinLength, ..} ) <$> f passwordPolicyPasswordSettingsComplexityMinLength
{-# INLINE passwordPolicyPasswordSettingsComplexityMinLengthL #-}

-- | 'passwordPolicyPasswordSettingsComplexityMinLowerCase' Lens
passwordPolicyPasswordSettingsComplexityMinLowerCaseL :: Lens_' PasswordPolicyPasswordSettingsComplexity (Maybe Int)
passwordPolicyPasswordSettingsComplexityMinLowerCaseL f PasswordPolicyPasswordSettingsComplexity{..} = (\passwordPolicyPasswordSettingsComplexityMinLowerCase -> PasswordPolicyPasswordSettingsComplexity { passwordPolicyPasswordSettingsComplexityMinLowerCase, ..} ) <$> f passwordPolicyPasswordSettingsComplexityMinLowerCase
{-# INLINE passwordPolicyPasswordSettingsComplexityMinLowerCaseL #-}

-- | 'passwordPolicyPasswordSettingsComplexityMinNumber' Lens
passwordPolicyPasswordSettingsComplexityMinNumberL :: Lens_' PasswordPolicyPasswordSettingsComplexity (Maybe Int)
passwordPolicyPasswordSettingsComplexityMinNumberL f PasswordPolicyPasswordSettingsComplexity{..} = (\passwordPolicyPasswordSettingsComplexityMinNumber -> PasswordPolicyPasswordSettingsComplexity { passwordPolicyPasswordSettingsComplexityMinNumber, ..} ) <$> f passwordPolicyPasswordSettingsComplexityMinNumber
{-# INLINE passwordPolicyPasswordSettingsComplexityMinNumberL #-}

-- | 'passwordPolicyPasswordSettingsComplexityMinSymbol' Lens
passwordPolicyPasswordSettingsComplexityMinSymbolL :: Lens_' PasswordPolicyPasswordSettingsComplexity (Maybe Int)
passwordPolicyPasswordSettingsComplexityMinSymbolL f PasswordPolicyPasswordSettingsComplexity{..} = (\passwordPolicyPasswordSettingsComplexityMinSymbol -> PasswordPolicyPasswordSettingsComplexity { passwordPolicyPasswordSettingsComplexityMinSymbol, ..} ) <$> f passwordPolicyPasswordSettingsComplexityMinSymbol
{-# INLINE passwordPolicyPasswordSettingsComplexityMinSymbolL #-}

-- | 'passwordPolicyPasswordSettingsComplexityMinUpperCase' Lens
passwordPolicyPasswordSettingsComplexityMinUpperCaseL :: Lens_' PasswordPolicyPasswordSettingsComplexity (Maybe Int)
passwordPolicyPasswordSettingsComplexityMinUpperCaseL f PasswordPolicyPasswordSettingsComplexity{..} = (\passwordPolicyPasswordSettingsComplexityMinUpperCase -> PasswordPolicyPasswordSettingsComplexity { passwordPolicyPasswordSettingsComplexityMinUpperCase, ..} ) <$> f passwordPolicyPasswordSettingsComplexityMinUpperCase
{-# INLINE passwordPolicyPasswordSettingsComplexityMinUpperCaseL #-}



-- * PasswordPolicyPasswordSettingsLockout

-- | 'passwordPolicyPasswordSettingsLockoutAutoUnlockMinutes' Lens
passwordPolicyPasswordSettingsLockoutAutoUnlockMinutesL :: Lens_' PasswordPolicyPasswordSettingsLockout (Maybe Int)
passwordPolicyPasswordSettingsLockoutAutoUnlockMinutesL f PasswordPolicyPasswordSettingsLockout{..} = (\passwordPolicyPasswordSettingsLockoutAutoUnlockMinutes -> PasswordPolicyPasswordSettingsLockout { passwordPolicyPasswordSettingsLockoutAutoUnlockMinutes, ..} ) <$> f passwordPolicyPasswordSettingsLockoutAutoUnlockMinutes
{-# INLINE passwordPolicyPasswordSettingsLockoutAutoUnlockMinutesL #-}

-- | 'passwordPolicyPasswordSettingsLockoutMaxAttempts' Lens
passwordPolicyPasswordSettingsLockoutMaxAttemptsL :: Lens_' PasswordPolicyPasswordSettingsLockout (Maybe Int)
passwordPolicyPasswordSettingsLockoutMaxAttemptsL f PasswordPolicyPasswordSettingsLockout{..} = (\passwordPolicyPasswordSettingsLockoutMaxAttempts -> PasswordPolicyPasswordSettingsLockout { passwordPolicyPasswordSettingsLockoutMaxAttempts, ..} ) <$> f passwordPolicyPasswordSettingsLockoutMaxAttempts
{-# INLINE passwordPolicyPasswordSettingsLockoutMaxAttemptsL #-}

-- | 'passwordPolicyPasswordSettingsLockoutShowLockoutFailures' Lens
passwordPolicyPasswordSettingsLockoutShowLockoutFailuresL :: Lens_' PasswordPolicyPasswordSettingsLockout (Maybe Bool)
passwordPolicyPasswordSettingsLockoutShowLockoutFailuresL f PasswordPolicyPasswordSettingsLockout{..} = (\passwordPolicyPasswordSettingsLockoutShowLockoutFailures -> PasswordPolicyPasswordSettingsLockout { passwordPolicyPasswordSettingsLockoutShowLockoutFailures, ..} ) <$> f passwordPolicyPasswordSettingsLockoutShowLockoutFailures
{-# INLINE passwordPolicyPasswordSettingsLockoutShowLockoutFailuresL #-}

-- | 'passwordPolicyPasswordSettingsLockoutUserLockoutNotificationChannels' Lens
passwordPolicyPasswordSettingsLockoutUserLockoutNotificationChannelsL :: Lens_' PasswordPolicyPasswordSettingsLockout (Maybe [Text])
passwordPolicyPasswordSettingsLockoutUserLockoutNotificationChannelsL f PasswordPolicyPasswordSettingsLockout{..} = (\passwordPolicyPasswordSettingsLockoutUserLockoutNotificationChannels -> PasswordPolicyPasswordSettingsLockout { passwordPolicyPasswordSettingsLockoutUserLockoutNotificationChannels, ..} ) <$> f passwordPolicyPasswordSettingsLockoutUserLockoutNotificationChannels
{-# INLINE passwordPolicyPasswordSettingsLockoutUserLockoutNotificationChannelsL #-}



-- * PasswordPolicyRecoveryEmail

-- | 'passwordPolicyRecoveryEmailProperties' Lens
passwordPolicyRecoveryEmailPropertiesL :: Lens_' PasswordPolicyRecoveryEmail (Maybe PasswordPolicyRecoveryEmailProperties)
passwordPolicyRecoveryEmailPropertiesL f PasswordPolicyRecoveryEmail{..} = (\passwordPolicyRecoveryEmailProperties -> PasswordPolicyRecoveryEmail { passwordPolicyRecoveryEmailProperties, ..} ) <$> f passwordPolicyRecoveryEmailProperties
{-# INLINE passwordPolicyRecoveryEmailPropertiesL #-}

-- | 'passwordPolicyRecoveryEmailStatus' Lens
passwordPolicyRecoveryEmailStatusL :: Lens_' PasswordPolicyRecoveryEmail (Maybe E'Status2)
passwordPolicyRecoveryEmailStatusL f PasswordPolicyRecoveryEmail{..} = (\passwordPolicyRecoveryEmailStatus -> PasswordPolicyRecoveryEmail { passwordPolicyRecoveryEmailStatus, ..} ) <$> f passwordPolicyRecoveryEmailStatus
{-# INLINE passwordPolicyRecoveryEmailStatusL #-}



-- * PasswordPolicyRecoveryEmailProperties

-- | 'passwordPolicyRecoveryEmailPropertiesRecoveryToken' Lens
passwordPolicyRecoveryEmailPropertiesRecoveryTokenL :: Lens_' PasswordPolicyRecoveryEmailProperties (Maybe PasswordPolicyRecoveryEmailRecoveryToken)
passwordPolicyRecoveryEmailPropertiesRecoveryTokenL f PasswordPolicyRecoveryEmailProperties{..} = (\passwordPolicyRecoveryEmailPropertiesRecoveryToken -> PasswordPolicyRecoveryEmailProperties { passwordPolicyRecoveryEmailPropertiesRecoveryToken, ..} ) <$> f passwordPolicyRecoveryEmailPropertiesRecoveryToken
{-# INLINE passwordPolicyRecoveryEmailPropertiesRecoveryTokenL #-}



-- * PasswordPolicyRecoveryEmailRecoveryToken

-- | 'passwordPolicyRecoveryEmailRecoveryTokenTokenLifetimeMinutes' Lens
passwordPolicyRecoveryEmailRecoveryTokenTokenLifetimeMinutesL :: Lens_' PasswordPolicyRecoveryEmailRecoveryToken (Maybe Int)
passwordPolicyRecoveryEmailRecoveryTokenTokenLifetimeMinutesL f PasswordPolicyRecoveryEmailRecoveryToken{..} = (\passwordPolicyRecoveryEmailRecoveryTokenTokenLifetimeMinutes -> PasswordPolicyRecoveryEmailRecoveryToken { passwordPolicyRecoveryEmailRecoveryTokenTokenLifetimeMinutes, ..} ) <$> f passwordPolicyRecoveryEmailRecoveryTokenTokenLifetimeMinutes
{-# INLINE passwordPolicyRecoveryEmailRecoveryTokenTokenLifetimeMinutesL #-}



-- * PasswordPolicyRecoveryFactorSettings

-- | 'passwordPolicyRecoveryFactorSettingsStatus' Lens
passwordPolicyRecoveryFactorSettingsStatusL :: Lens_' PasswordPolicyRecoveryFactorSettings (Maybe E'Status2)
passwordPolicyRecoveryFactorSettingsStatusL f PasswordPolicyRecoveryFactorSettings{..} = (\passwordPolicyRecoveryFactorSettingsStatus -> PasswordPolicyRecoveryFactorSettings { passwordPolicyRecoveryFactorSettingsStatus, ..} ) <$> f passwordPolicyRecoveryFactorSettingsStatus
{-# INLINE passwordPolicyRecoveryFactorSettingsStatusL #-}



-- * PasswordPolicyRecoveryFactors

-- | 'passwordPolicyRecoveryFactorsOktaCall' Lens
passwordPolicyRecoveryFactorsOktaCallL :: Lens_' PasswordPolicyRecoveryFactors (Maybe PasswordPolicyRecoveryFactorSettings)
passwordPolicyRecoveryFactorsOktaCallL f PasswordPolicyRecoveryFactors{..} = (\passwordPolicyRecoveryFactorsOktaCall -> PasswordPolicyRecoveryFactors { passwordPolicyRecoveryFactorsOktaCall, ..} ) <$> f passwordPolicyRecoveryFactorsOktaCall
{-# INLINE passwordPolicyRecoveryFactorsOktaCallL #-}

-- | 'passwordPolicyRecoveryFactorsOktaEmail' Lens
passwordPolicyRecoveryFactorsOktaEmailL :: Lens_' PasswordPolicyRecoveryFactors (Maybe PasswordPolicyRecoveryEmail)
passwordPolicyRecoveryFactorsOktaEmailL f PasswordPolicyRecoveryFactors{..} = (\passwordPolicyRecoveryFactorsOktaEmail -> PasswordPolicyRecoveryFactors { passwordPolicyRecoveryFactorsOktaEmail, ..} ) <$> f passwordPolicyRecoveryFactorsOktaEmail
{-# INLINE passwordPolicyRecoveryFactorsOktaEmailL #-}

-- | 'passwordPolicyRecoveryFactorsOktaSms' Lens
passwordPolicyRecoveryFactorsOktaSmsL :: Lens_' PasswordPolicyRecoveryFactors (Maybe PasswordPolicyRecoveryFactorSettings)
passwordPolicyRecoveryFactorsOktaSmsL f PasswordPolicyRecoveryFactors{..} = (\passwordPolicyRecoveryFactorsOktaSms -> PasswordPolicyRecoveryFactors { passwordPolicyRecoveryFactorsOktaSms, ..} ) <$> f passwordPolicyRecoveryFactorsOktaSms
{-# INLINE passwordPolicyRecoveryFactorsOktaSmsL #-}

-- | 'passwordPolicyRecoveryFactorsRecoveryQuestion' Lens
passwordPolicyRecoveryFactorsRecoveryQuestionL :: Lens_' PasswordPolicyRecoveryFactors (Maybe PasswordPolicyRecoveryQuestion)
passwordPolicyRecoveryFactorsRecoveryQuestionL f PasswordPolicyRecoveryFactors{..} = (\passwordPolicyRecoveryFactorsRecoveryQuestion -> PasswordPolicyRecoveryFactors { passwordPolicyRecoveryFactorsRecoveryQuestion, ..} ) <$> f passwordPolicyRecoveryFactorsRecoveryQuestion
{-# INLINE passwordPolicyRecoveryFactorsRecoveryQuestionL #-}



-- * PasswordPolicyRecoveryQuestion

-- | 'passwordPolicyRecoveryQuestionProperties' Lens
passwordPolicyRecoveryQuestionPropertiesL :: Lens_' PasswordPolicyRecoveryQuestion (Maybe PasswordPolicyRecoveryQuestionProperties)
passwordPolicyRecoveryQuestionPropertiesL f PasswordPolicyRecoveryQuestion{..} = (\passwordPolicyRecoveryQuestionProperties -> PasswordPolicyRecoveryQuestion { passwordPolicyRecoveryQuestionProperties, ..} ) <$> f passwordPolicyRecoveryQuestionProperties
{-# INLINE passwordPolicyRecoveryQuestionPropertiesL #-}

-- | 'passwordPolicyRecoveryQuestionStatus' Lens
passwordPolicyRecoveryQuestionStatusL :: Lens_' PasswordPolicyRecoveryQuestion (Maybe E'Status2)
passwordPolicyRecoveryQuestionStatusL f PasswordPolicyRecoveryQuestion{..} = (\passwordPolicyRecoveryQuestionStatus -> PasswordPolicyRecoveryQuestion { passwordPolicyRecoveryQuestionStatus, ..} ) <$> f passwordPolicyRecoveryQuestionStatus
{-# INLINE passwordPolicyRecoveryQuestionStatusL #-}



-- * PasswordPolicyRecoveryQuestionComplexity

-- | 'passwordPolicyRecoveryQuestionComplexityMinLength' Lens
passwordPolicyRecoveryQuestionComplexityMinLengthL :: Lens_' PasswordPolicyRecoveryQuestionComplexity (Maybe Int)
passwordPolicyRecoveryQuestionComplexityMinLengthL f PasswordPolicyRecoveryQuestionComplexity{..} = (\passwordPolicyRecoveryQuestionComplexityMinLength -> PasswordPolicyRecoveryQuestionComplexity { passwordPolicyRecoveryQuestionComplexityMinLength, ..} ) <$> f passwordPolicyRecoveryQuestionComplexityMinLength
{-# INLINE passwordPolicyRecoveryQuestionComplexityMinLengthL #-}



-- * PasswordPolicyRecoveryQuestionProperties

-- | 'passwordPolicyRecoveryQuestionPropertiesComplexity' Lens
passwordPolicyRecoveryQuestionPropertiesComplexityL :: Lens_' PasswordPolicyRecoveryQuestionProperties (Maybe PasswordPolicyRecoveryQuestionComplexity)
passwordPolicyRecoveryQuestionPropertiesComplexityL f PasswordPolicyRecoveryQuestionProperties{..} = (\passwordPolicyRecoveryQuestionPropertiesComplexity -> PasswordPolicyRecoveryQuestionProperties { passwordPolicyRecoveryQuestionPropertiesComplexity, ..} ) <$> f passwordPolicyRecoveryQuestionPropertiesComplexity
{-# INLINE passwordPolicyRecoveryQuestionPropertiesComplexityL #-}



-- * PasswordPolicyRecoverySettings

-- | 'passwordPolicyRecoverySettingsFactors' Lens
passwordPolicyRecoverySettingsFactorsL :: Lens_' PasswordPolicyRecoverySettings (Maybe PasswordPolicyRecoveryFactors)
passwordPolicyRecoverySettingsFactorsL f PasswordPolicyRecoverySettings{..} = (\passwordPolicyRecoverySettingsFactors -> PasswordPolicyRecoverySettings { passwordPolicyRecoverySettingsFactors, ..} ) <$> f passwordPolicyRecoverySettingsFactors
{-# INLINE passwordPolicyRecoverySettingsFactorsL #-}



-- * PasswordPolicyRule

-- | 'passwordPolicyRuleActions' Lens
passwordPolicyRuleActionsL :: Lens_' PasswordPolicyRule (Maybe PasswordPolicyRuleActions)
passwordPolicyRuleActionsL f PasswordPolicyRule{..} = (\passwordPolicyRuleActions -> PasswordPolicyRule { passwordPolicyRuleActions, ..} ) <$> f passwordPolicyRuleActions
{-# INLINE passwordPolicyRuleActionsL #-}

-- | 'passwordPolicyRuleConditions' Lens
passwordPolicyRuleConditionsL :: Lens_' PasswordPolicyRule (Maybe PasswordPolicyRuleConditions)
passwordPolicyRuleConditionsL f PasswordPolicyRule{..} = (\passwordPolicyRuleConditions -> PasswordPolicyRule { passwordPolicyRuleConditions, ..} ) <$> f passwordPolicyRuleConditions
{-# INLINE passwordPolicyRuleConditionsL #-}

-- | 'passwordPolicyRuleName' Lens
passwordPolicyRuleNameL :: Lens_' PasswordPolicyRule (Maybe Text)
passwordPolicyRuleNameL f PasswordPolicyRule{..} = (\passwordPolicyRuleName -> PasswordPolicyRule { passwordPolicyRuleName, ..} ) <$> f passwordPolicyRuleName
{-# INLINE passwordPolicyRuleNameL #-}



-- * PasswordPolicyRuleAction

-- | 'passwordPolicyRuleActionAccess' Lens
passwordPolicyRuleActionAccessL :: Lens_' PasswordPolicyRuleAction (Maybe E'Access)
passwordPolicyRuleActionAccessL f PasswordPolicyRuleAction{..} = (\passwordPolicyRuleActionAccess -> PasswordPolicyRuleAction { passwordPolicyRuleActionAccess, ..} ) <$> f passwordPolicyRuleActionAccess
{-# INLINE passwordPolicyRuleActionAccessL #-}



-- * PasswordPolicyRuleActions

-- | 'passwordPolicyRuleActionsPasswordChange' Lens
passwordPolicyRuleActionsPasswordChangeL :: Lens_' PasswordPolicyRuleActions (Maybe PasswordPolicyRuleAction)
passwordPolicyRuleActionsPasswordChangeL f PasswordPolicyRuleActions{..} = (\passwordPolicyRuleActionsPasswordChange -> PasswordPolicyRuleActions { passwordPolicyRuleActionsPasswordChange, ..} ) <$> f passwordPolicyRuleActionsPasswordChange
{-# INLINE passwordPolicyRuleActionsPasswordChangeL #-}

-- | 'passwordPolicyRuleActionsSelfServicePasswordReset' Lens
passwordPolicyRuleActionsSelfServicePasswordResetL :: Lens_' PasswordPolicyRuleActions (Maybe PasswordPolicyRuleAction)
passwordPolicyRuleActionsSelfServicePasswordResetL f PasswordPolicyRuleActions{..} = (\passwordPolicyRuleActionsSelfServicePasswordReset -> PasswordPolicyRuleActions { passwordPolicyRuleActionsSelfServicePasswordReset, ..} ) <$> f passwordPolicyRuleActionsSelfServicePasswordReset
{-# INLINE passwordPolicyRuleActionsSelfServicePasswordResetL #-}

-- | 'passwordPolicyRuleActionsSelfServiceUnlock' Lens
passwordPolicyRuleActionsSelfServiceUnlockL :: Lens_' PasswordPolicyRuleActions (Maybe PasswordPolicyRuleAction)
passwordPolicyRuleActionsSelfServiceUnlockL f PasswordPolicyRuleActions{..} = (\passwordPolicyRuleActionsSelfServiceUnlock -> PasswordPolicyRuleActions { passwordPolicyRuleActionsSelfServiceUnlock, ..} ) <$> f passwordPolicyRuleActionsSelfServiceUnlock
{-# INLINE passwordPolicyRuleActionsSelfServiceUnlockL #-}



-- * PasswordPolicyRuleConditions

-- | 'passwordPolicyRuleConditionsNetwork' Lens
passwordPolicyRuleConditionsNetworkL :: Lens_' PasswordPolicyRuleConditions (Maybe PolicyNetworkCondition)
passwordPolicyRuleConditionsNetworkL f PasswordPolicyRuleConditions{..} = (\passwordPolicyRuleConditionsNetwork -> PasswordPolicyRuleConditions { passwordPolicyRuleConditionsNetwork, ..} ) <$> f passwordPolicyRuleConditionsNetwork
{-# INLINE passwordPolicyRuleConditionsNetworkL #-}

-- | 'passwordPolicyRuleConditionsPeople' Lens
passwordPolicyRuleConditionsPeopleL :: Lens_' PasswordPolicyRuleConditions (Maybe PolicyPeopleCondition)
passwordPolicyRuleConditionsPeopleL f PasswordPolicyRuleConditions{..} = (\passwordPolicyRuleConditionsPeople -> PasswordPolicyRuleConditions { passwordPolicyRuleConditionsPeople, ..} ) <$> f passwordPolicyRuleConditionsPeople
{-# INLINE passwordPolicyRuleConditionsPeopleL #-}



-- * PasswordPolicySettings

-- | 'passwordPolicySettingsDelegation' Lens
passwordPolicySettingsDelegationL :: Lens_' PasswordPolicySettings (Maybe PasswordPolicyDelegationSettings)
passwordPolicySettingsDelegationL f PasswordPolicySettings{..} = (\passwordPolicySettingsDelegation -> PasswordPolicySettings { passwordPolicySettingsDelegation, ..} ) <$> f passwordPolicySettingsDelegation
{-# INLINE passwordPolicySettingsDelegationL #-}

-- | 'passwordPolicySettingsPassword' Lens
passwordPolicySettingsPasswordL :: Lens_' PasswordPolicySettings (Maybe PasswordPolicyPasswordSettings)
passwordPolicySettingsPasswordL f PasswordPolicySettings{..} = (\passwordPolicySettingsPassword -> PasswordPolicySettings { passwordPolicySettingsPassword, ..} ) <$> f passwordPolicySettingsPassword
{-# INLINE passwordPolicySettingsPasswordL #-}

-- | 'passwordPolicySettingsRecovery' Lens
passwordPolicySettingsRecoveryL :: Lens_' PasswordPolicySettings (Maybe PasswordPolicyRecoverySettings)
passwordPolicySettingsRecoveryL f PasswordPolicySettings{..} = (\passwordPolicySettingsRecovery -> PasswordPolicySettings { passwordPolicySettingsRecovery, ..} ) <$> f passwordPolicySettingsRecovery
{-# INLINE passwordPolicySettingsRecoveryL #-}



-- * PasswordSettingObject

-- | 'passwordSettingObjectChange' Lens
passwordSettingObjectChangeL :: Lens_' PasswordSettingObject (Maybe ChangeEnum)
passwordSettingObjectChangeL f PasswordSettingObject{..} = (\passwordSettingObjectChange -> PasswordSettingObject { passwordSettingObjectChange, ..} ) <$> f passwordSettingObjectChange
{-# INLINE passwordSettingObjectChangeL #-}

-- | 'passwordSettingObjectSeed' Lens
passwordSettingObjectSeedL :: Lens_' PasswordSettingObject (Maybe SeedEnum)
passwordSettingObjectSeedL f PasswordSettingObject{..} = (\passwordSettingObjectSeed -> PasswordSettingObject { passwordSettingObjectSeed, ..} ) <$> f passwordSettingObjectSeed
{-# INLINE passwordSettingObjectSeedL #-}

-- | 'passwordSettingObjectStatus' Lens
passwordSettingObjectStatusL :: Lens_' PasswordSettingObject (Maybe EnabledStatus)
passwordSettingObjectStatusL f PasswordSettingObject{..} = (\passwordSettingObjectStatus -> PasswordSettingObject { passwordSettingObjectStatus, ..} ) <$> f passwordSettingObjectStatus
{-# INLINE passwordSettingObjectStatusL #-}



-- * PlatformConditionEvaluatorPlatform

-- | 'platformConditionEvaluatorPlatformOs' Lens
platformConditionEvaluatorPlatformOsL :: Lens_' PlatformConditionEvaluatorPlatform (Maybe PlatformConditionEvaluatorPlatformOperatingSystem)
platformConditionEvaluatorPlatformOsL f PlatformConditionEvaluatorPlatform{..} = (\platformConditionEvaluatorPlatformOs -> PlatformConditionEvaluatorPlatform { platformConditionEvaluatorPlatformOs, ..} ) <$> f platformConditionEvaluatorPlatformOs
{-# INLINE platformConditionEvaluatorPlatformOsL #-}

-- | 'platformConditionEvaluatorPlatformType' Lens
platformConditionEvaluatorPlatformTypeL :: Lens_' PlatformConditionEvaluatorPlatform (Maybe E'Type6)
platformConditionEvaluatorPlatformTypeL f PlatformConditionEvaluatorPlatform{..} = (\platformConditionEvaluatorPlatformType -> PlatformConditionEvaluatorPlatform { platformConditionEvaluatorPlatformType, ..} ) <$> f platformConditionEvaluatorPlatformType
{-# INLINE platformConditionEvaluatorPlatformTypeL #-}



-- * PlatformConditionEvaluatorPlatformOperatingSystem

-- | 'platformConditionEvaluatorPlatformOperatingSystemExpression' Lens
platformConditionEvaluatorPlatformOperatingSystemExpressionL :: Lens_' PlatformConditionEvaluatorPlatformOperatingSystem (Maybe Text)
platformConditionEvaluatorPlatformOperatingSystemExpressionL f PlatformConditionEvaluatorPlatformOperatingSystem{..} = (\platformConditionEvaluatorPlatformOperatingSystemExpression -> PlatformConditionEvaluatorPlatformOperatingSystem { platformConditionEvaluatorPlatformOperatingSystemExpression, ..} ) <$> f platformConditionEvaluatorPlatformOperatingSystemExpression
{-# INLINE platformConditionEvaluatorPlatformOperatingSystemExpressionL #-}

-- | 'platformConditionEvaluatorPlatformOperatingSystemType' Lens
platformConditionEvaluatorPlatformOperatingSystemTypeL :: Lens_' PlatformConditionEvaluatorPlatformOperatingSystem (Maybe E'Type7)
platformConditionEvaluatorPlatformOperatingSystemTypeL f PlatformConditionEvaluatorPlatformOperatingSystem{..} = (\platformConditionEvaluatorPlatformOperatingSystemType -> PlatformConditionEvaluatorPlatformOperatingSystem { platformConditionEvaluatorPlatformOperatingSystemType, ..} ) <$> f platformConditionEvaluatorPlatformOperatingSystemType
{-# INLINE platformConditionEvaluatorPlatformOperatingSystemTypeL #-}

-- | 'platformConditionEvaluatorPlatformOperatingSystemVersion' Lens
platformConditionEvaluatorPlatformOperatingSystemVersionL :: Lens_' PlatformConditionEvaluatorPlatformOperatingSystem (Maybe PlatformConditionEvaluatorPlatformOperatingSystemVersion)
platformConditionEvaluatorPlatformOperatingSystemVersionL f PlatformConditionEvaluatorPlatformOperatingSystem{..} = (\platformConditionEvaluatorPlatformOperatingSystemVersion -> PlatformConditionEvaluatorPlatformOperatingSystem { platformConditionEvaluatorPlatformOperatingSystemVersion, ..} ) <$> f platformConditionEvaluatorPlatformOperatingSystemVersion
{-# INLINE platformConditionEvaluatorPlatformOperatingSystemVersionL #-}



-- * PlatformConditionEvaluatorPlatformOperatingSystemVersion

-- | 'platformConditionEvaluatorPlatformOperatingSystemVersionMatchType' Lens
platformConditionEvaluatorPlatformOperatingSystemVersionMatchTypeL :: Lens_' PlatformConditionEvaluatorPlatformOperatingSystemVersion (Maybe E'MatchType)
platformConditionEvaluatorPlatformOperatingSystemVersionMatchTypeL f PlatformConditionEvaluatorPlatformOperatingSystemVersion{..} = (\platformConditionEvaluatorPlatformOperatingSystemVersionMatchType -> PlatformConditionEvaluatorPlatformOperatingSystemVersion { platformConditionEvaluatorPlatformOperatingSystemVersionMatchType, ..} ) <$> f platformConditionEvaluatorPlatformOperatingSystemVersionMatchType
{-# INLINE platformConditionEvaluatorPlatformOperatingSystemVersionMatchTypeL #-}

-- | 'platformConditionEvaluatorPlatformOperatingSystemVersionValue' Lens
platformConditionEvaluatorPlatformOperatingSystemVersionValueL :: Lens_' PlatformConditionEvaluatorPlatformOperatingSystemVersion (Maybe Text)
platformConditionEvaluatorPlatformOperatingSystemVersionValueL f PlatformConditionEvaluatorPlatformOperatingSystemVersion{..} = (\platformConditionEvaluatorPlatformOperatingSystemVersionValue -> PlatformConditionEvaluatorPlatformOperatingSystemVersion { platformConditionEvaluatorPlatformOperatingSystemVersionValue, ..} ) <$> f platformConditionEvaluatorPlatformOperatingSystemVersionValue
{-# INLINE platformConditionEvaluatorPlatformOperatingSystemVersionValueL #-}



-- * PlatformPolicyRuleCondition

-- | 'platformPolicyRuleConditionExclude' Lens
platformPolicyRuleConditionExcludeL :: Lens_' PlatformPolicyRuleCondition (Maybe [PlatformConditionEvaluatorPlatform])
platformPolicyRuleConditionExcludeL f PlatformPolicyRuleCondition{..} = (\platformPolicyRuleConditionExclude -> PlatformPolicyRuleCondition { platformPolicyRuleConditionExclude, ..} ) <$> f platformPolicyRuleConditionExclude
{-# INLINE platformPolicyRuleConditionExcludeL #-}

-- | 'platformPolicyRuleConditionInclude' Lens
platformPolicyRuleConditionIncludeL :: Lens_' PlatformPolicyRuleCondition (Maybe [PlatformConditionEvaluatorPlatform])
platformPolicyRuleConditionIncludeL f PlatformPolicyRuleCondition{..} = (\platformPolicyRuleConditionInclude -> PlatformPolicyRuleCondition { platformPolicyRuleConditionInclude, ..} ) <$> f platformPolicyRuleConditionInclude
{-# INLINE platformPolicyRuleConditionIncludeL #-}



-- * Policy

-- | 'policyEmbedded' Lens
policyEmbeddedL :: Lens_' Policy (Maybe (Map.Map String A.Value))
policyEmbeddedL f Policy{..} = (\policyEmbedded -> Policy { policyEmbedded, ..} ) <$> f policyEmbedded
{-# INLINE policyEmbeddedL #-}

-- | 'policyLinks' Lens
policyLinksL :: Lens_' Policy (Maybe (Map.Map String A.Value))
policyLinksL f Policy{..} = (\policyLinks -> Policy { policyLinks, ..} ) <$> f policyLinks
{-# INLINE policyLinksL #-}

-- | 'policyConditions' Lens
policyConditionsL :: Lens_' Policy (Maybe PolicyRuleConditions)
policyConditionsL f Policy{..} = (\policyConditions -> Policy { policyConditions, ..} ) <$> f policyConditions
{-# INLINE policyConditionsL #-}

-- | 'policyCreated' Lens
policyCreatedL :: Lens_' Policy (Maybe DateTime)
policyCreatedL f Policy{..} = (\policyCreated -> Policy { policyCreated, ..} ) <$> f policyCreated
{-# INLINE policyCreatedL #-}

-- | 'policyDescription' Lens
policyDescriptionL :: Lens_' Policy (Maybe Text)
policyDescriptionL f Policy{..} = (\policyDescription -> Policy { policyDescription, ..} ) <$> f policyDescription
{-# INLINE policyDescriptionL #-}

-- | 'policyId' Lens
policyIdL :: Lens_' Policy (Maybe Text)
policyIdL f Policy{..} = (\policyId -> Policy { policyId, ..} ) <$> f policyId
{-# INLINE policyIdL #-}

-- | 'policyLastUpdated' Lens
policyLastUpdatedL :: Lens_' Policy (Maybe DateTime)
policyLastUpdatedL f Policy{..} = (\policyLastUpdated -> Policy { policyLastUpdated, ..} ) <$> f policyLastUpdated
{-# INLINE policyLastUpdatedL #-}

-- | 'policyName' Lens
policyNameL :: Lens_' Policy (Maybe Text)
policyNameL f Policy{..} = (\policyName -> Policy { policyName, ..} ) <$> f policyName
{-# INLINE policyNameL #-}

-- | 'policyPriority' Lens
policyPriorityL :: Lens_' Policy (Maybe Int)
policyPriorityL f Policy{..} = (\policyPriority -> Policy { policyPriority, ..} ) <$> f policyPriority
{-# INLINE policyPriorityL #-}

-- | 'policyStatus' Lens
policyStatusL :: Lens_' Policy (Maybe E'Status2)
policyStatusL f Policy{..} = (\policyStatus -> Policy { policyStatus, ..} ) <$> f policyStatus
{-# INLINE policyStatusL #-}

-- | 'policySystem' Lens
policySystemL :: Lens_' Policy (Maybe Bool)
policySystemL f Policy{..} = (\policySystem -> Policy { policySystem, ..} ) <$> f policySystem
{-# INLINE policySystemL #-}

-- | 'policyType' Lens
policyTypeL :: Lens_' Policy (Maybe PolicyType)
policyTypeL f Policy{..} = (\policyType -> Policy { policyType, ..} ) <$> f policyType
{-# INLINE policyTypeL #-}



-- * PolicyAccountLink

-- | 'policyAccountLinkAction' Lens
policyAccountLinkActionL :: Lens_' PolicyAccountLink (Maybe E'Action)
policyAccountLinkActionL f PolicyAccountLink{..} = (\policyAccountLinkAction -> PolicyAccountLink { policyAccountLinkAction, ..} ) <$> f policyAccountLinkAction
{-# INLINE policyAccountLinkActionL #-}

-- | 'policyAccountLinkFilter' Lens
policyAccountLinkFilterL :: Lens_' PolicyAccountLink (Maybe PolicyAccountLinkFilter)
policyAccountLinkFilterL f PolicyAccountLink{..} = (\policyAccountLinkFilter -> PolicyAccountLink { policyAccountLinkFilter, ..} ) <$> f policyAccountLinkFilter
{-# INLINE policyAccountLinkFilterL #-}



-- * PolicyAccountLinkFilter

-- | 'policyAccountLinkFilterGroups' Lens
policyAccountLinkFilterGroupsL :: Lens_' PolicyAccountLinkFilter (Maybe PolicyAccountLinkFilterGroups)
policyAccountLinkFilterGroupsL f PolicyAccountLinkFilter{..} = (\policyAccountLinkFilterGroups -> PolicyAccountLinkFilter { policyAccountLinkFilterGroups, ..} ) <$> f policyAccountLinkFilterGroups
{-# INLINE policyAccountLinkFilterGroupsL #-}



-- * PolicyAccountLinkFilterGroups

-- | 'policyAccountLinkFilterGroupsInclude' Lens
policyAccountLinkFilterGroupsIncludeL :: Lens_' PolicyAccountLinkFilterGroups (Maybe [Text])
policyAccountLinkFilterGroupsIncludeL f PolicyAccountLinkFilterGroups{..} = (\policyAccountLinkFilterGroupsInclude -> PolicyAccountLinkFilterGroups { policyAccountLinkFilterGroupsInclude, ..} ) <$> f policyAccountLinkFilterGroupsInclude
{-# INLINE policyAccountLinkFilterGroupsIncludeL #-}



-- * PolicyNetworkCondition

-- | 'policyNetworkConditionConnection' Lens
policyNetworkConditionConnectionL :: Lens_' PolicyNetworkCondition (Maybe E'Connection)
policyNetworkConditionConnectionL f PolicyNetworkCondition{..} = (\policyNetworkConditionConnection -> PolicyNetworkCondition { policyNetworkConditionConnection, ..} ) <$> f policyNetworkConditionConnection
{-# INLINE policyNetworkConditionConnectionL #-}

-- | 'policyNetworkConditionExclude' Lens
policyNetworkConditionExcludeL :: Lens_' PolicyNetworkCondition (Maybe [Text])
policyNetworkConditionExcludeL f PolicyNetworkCondition{..} = (\policyNetworkConditionExclude -> PolicyNetworkCondition { policyNetworkConditionExclude, ..} ) <$> f policyNetworkConditionExclude
{-# INLINE policyNetworkConditionExcludeL #-}

-- | 'policyNetworkConditionInclude' Lens
policyNetworkConditionIncludeL :: Lens_' PolicyNetworkCondition (Maybe [Text])
policyNetworkConditionIncludeL f PolicyNetworkCondition{..} = (\policyNetworkConditionInclude -> PolicyNetworkCondition { policyNetworkConditionInclude, ..} ) <$> f policyNetworkConditionInclude
{-# INLINE policyNetworkConditionIncludeL #-}



-- * PolicyPeopleCondition

-- | 'policyPeopleConditionGroups' Lens
policyPeopleConditionGroupsL :: Lens_' PolicyPeopleCondition (Maybe GroupCondition)
policyPeopleConditionGroupsL f PolicyPeopleCondition{..} = (\policyPeopleConditionGroups -> PolicyPeopleCondition { policyPeopleConditionGroups, ..} ) <$> f policyPeopleConditionGroups
{-# INLINE policyPeopleConditionGroupsL #-}

-- | 'policyPeopleConditionUsers' Lens
policyPeopleConditionUsersL :: Lens_' PolicyPeopleCondition (Maybe UserCondition)
policyPeopleConditionUsersL f PolicyPeopleCondition{..} = (\policyPeopleConditionUsers -> PolicyPeopleCondition { policyPeopleConditionUsers, ..} ) <$> f policyPeopleConditionUsers
{-# INLINE policyPeopleConditionUsersL #-}



-- * PolicyRule

-- | 'policyRuleCreated' Lens
policyRuleCreatedL :: Lens_' PolicyRule (Maybe DateTime)
policyRuleCreatedL f PolicyRule{..} = (\policyRuleCreated -> PolicyRule { policyRuleCreated, ..} ) <$> f policyRuleCreated
{-# INLINE policyRuleCreatedL #-}

-- | 'policyRuleId' Lens
policyRuleIdL :: Lens_' PolicyRule (Maybe Text)
policyRuleIdL f PolicyRule{..} = (\policyRuleId -> PolicyRule { policyRuleId, ..} ) <$> f policyRuleId
{-# INLINE policyRuleIdL #-}

-- | 'policyRuleLastUpdated' Lens
policyRuleLastUpdatedL :: Lens_' PolicyRule (Maybe DateTime)
policyRuleLastUpdatedL f PolicyRule{..} = (\policyRuleLastUpdated -> PolicyRule { policyRuleLastUpdated, ..} ) <$> f policyRuleLastUpdated
{-# INLINE policyRuleLastUpdatedL #-}

-- | 'policyRulePriority' Lens
policyRulePriorityL :: Lens_' PolicyRule (Maybe Int)
policyRulePriorityL f PolicyRule{..} = (\policyRulePriority -> PolicyRule { policyRulePriority, ..} ) <$> f policyRulePriority
{-# INLINE policyRulePriorityL #-}

-- | 'policyRuleStatus' Lens
policyRuleStatusL :: Lens_' PolicyRule (Maybe E'Status2)
policyRuleStatusL f PolicyRule{..} = (\policyRuleStatus -> PolicyRule { policyRuleStatus, ..} ) <$> f policyRuleStatus
{-# INLINE policyRuleStatusL #-}

-- | 'policyRuleSystem' Lens
policyRuleSystemL :: Lens_' PolicyRule (Maybe Bool)
policyRuleSystemL f PolicyRule{..} = (\policyRuleSystem -> PolicyRule { policyRuleSystem, ..} ) <$> f policyRuleSystem
{-# INLINE policyRuleSystemL #-}

-- | 'policyRuleType' Lens
policyRuleTypeL :: Lens_' PolicyRule (Maybe E'Type8)
policyRuleTypeL f PolicyRule{..} = (\policyRuleType -> PolicyRule { policyRuleType, ..} ) <$> f policyRuleType
{-# INLINE policyRuleTypeL #-}

-- | 'policyRuleName' Lens
policyRuleNameL :: Lens_' PolicyRule (Maybe Text)
policyRuleNameL f PolicyRule{..} = (\policyRuleName -> PolicyRule { policyRuleName, ..} ) <$> f policyRuleName
{-# INLINE policyRuleNameL #-}

-- | 'policyRuleConditions' Lens
policyRuleConditionsL :: Lens_' PolicyRule (Maybe PolicyRuleConditions)
policyRuleConditionsL f PolicyRule{..} = (\policyRuleConditions -> PolicyRule { policyRuleConditions, ..} ) <$> f policyRuleConditions
{-# INLINE policyRuleConditionsL #-}

-- | 'policyRuleActions' Lens
policyRuleActionsL :: Lens_' PolicyRule (Maybe PolicyRuleActions)
policyRuleActionsL f PolicyRule{..} = (\policyRuleActions -> PolicyRule { policyRuleActions, ..} ) <$> f policyRuleActions
{-# INLINE policyRuleActionsL #-}



-- * PolicyRuleActions

-- | 'policyRuleActionsEnroll' Lens
policyRuleActionsEnrollL :: Lens_' PolicyRuleActions (Maybe PolicyRuleActionsEnroll)
policyRuleActionsEnrollL f PolicyRuleActions{..} = (\policyRuleActionsEnroll -> PolicyRuleActions { policyRuleActionsEnroll, ..} ) <$> f policyRuleActionsEnroll
{-# INLINE policyRuleActionsEnrollL #-}

-- | 'policyRuleActionsSignon' Lens
policyRuleActionsSignonL :: Lens_' PolicyRuleActions (Maybe OktaSignOnPolicyRuleSignonActions)
policyRuleActionsSignonL f PolicyRuleActions{..} = (\policyRuleActionsSignon -> PolicyRuleActions { policyRuleActionsSignon, ..} ) <$> f policyRuleActionsSignon
{-# INLINE policyRuleActionsSignonL #-}

-- | 'policyRuleActionsPasswordChange' Lens
policyRuleActionsPasswordChangeL :: Lens_' PolicyRuleActions (Maybe PasswordPolicyRuleAction)
policyRuleActionsPasswordChangeL f PolicyRuleActions{..} = (\policyRuleActionsPasswordChange -> PolicyRuleActions { policyRuleActionsPasswordChange, ..} ) <$> f policyRuleActionsPasswordChange
{-# INLINE policyRuleActionsPasswordChangeL #-}

-- | 'policyRuleActionsSelfServicePasswordReset' Lens
policyRuleActionsSelfServicePasswordResetL :: Lens_' PolicyRuleActions (Maybe PasswordPolicyRuleAction)
policyRuleActionsSelfServicePasswordResetL f PolicyRuleActions{..} = (\policyRuleActionsSelfServicePasswordReset -> PolicyRuleActions { policyRuleActionsSelfServicePasswordReset, ..} ) <$> f policyRuleActionsSelfServicePasswordReset
{-# INLINE policyRuleActionsSelfServicePasswordResetL #-}

-- | 'policyRuleActionsSelfServiceUnlock' Lens
policyRuleActionsSelfServiceUnlockL :: Lens_' PolicyRuleActions (Maybe PasswordPolicyRuleAction)
policyRuleActionsSelfServiceUnlockL f PolicyRuleActions{..} = (\policyRuleActionsSelfServiceUnlock -> PolicyRuleActions { policyRuleActionsSelfServiceUnlock, ..} ) <$> f policyRuleActionsSelfServiceUnlock
{-# INLINE policyRuleActionsSelfServiceUnlockL #-}

-- | 'policyRuleActionsIdp' Lens
policyRuleActionsIdpL :: Lens_' PolicyRuleActions (Maybe IdpPolicyRuleAction)
policyRuleActionsIdpL f PolicyRuleActions{..} = (\policyRuleActionsIdp -> PolicyRuleActions { policyRuleActionsIdp, ..} ) <$> f policyRuleActionsIdp
{-# INLINE policyRuleActionsIdpL #-}



-- * PolicyRuleActionsEnroll

-- | 'policyRuleActionsEnrollSelf' Lens
policyRuleActionsEnrollSelfL :: Lens_' PolicyRuleActionsEnroll (Maybe PolicyRuleActionsEnrollSelf)
policyRuleActionsEnrollSelfL f PolicyRuleActionsEnroll{..} = (\policyRuleActionsEnrollSelf -> PolicyRuleActionsEnroll { policyRuleActionsEnrollSelf, ..} ) <$> f policyRuleActionsEnrollSelf
{-# INLINE policyRuleActionsEnrollSelfL #-}



-- * PolicyRuleActionsEnrollSelf



-- * PolicyRuleAuthContextCondition

-- | 'policyRuleAuthContextConditionAuthType' Lens
policyRuleAuthContextConditionAuthTypeL :: Lens_' PolicyRuleAuthContextCondition (Maybe E'AuthType)
policyRuleAuthContextConditionAuthTypeL f PolicyRuleAuthContextCondition{..} = (\policyRuleAuthContextConditionAuthType -> PolicyRuleAuthContextCondition { policyRuleAuthContextConditionAuthType, ..} ) <$> f policyRuleAuthContextConditionAuthType
{-# INLINE policyRuleAuthContextConditionAuthTypeL #-}



-- * PolicyRuleConditions

-- | 'policyRuleConditionsApp' Lens
policyRuleConditionsAppL :: Lens_' PolicyRuleConditions (Maybe AppAndInstancePolicyRuleCondition)
policyRuleConditionsAppL f PolicyRuleConditions{..} = (\policyRuleConditionsApp -> PolicyRuleConditions { policyRuleConditionsApp, ..} ) <$> f policyRuleConditionsApp
{-# INLINE policyRuleConditionsAppL #-}

-- | 'policyRuleConditionsApps' Lens
policyRuleConditionsAppsL :: Lens_' PolicyRuleConditions (Maybe AppInstancePolicyRuleCondition)
policyRuleConditionsAppsL f PolicyRuleConditions{..} = (\policyRuleConditionsApps -> PolicyRuleConditions { policyRuleConditionsApps, ..} ) <$> f policyRuleConditionsApps
{-# INLINE policyRuleConditionsAppsL #-}

-- | 'policyRuleConditionsAuthContext' Lens
policyRuleConditionsAuthContextL :: Lens_' PolicyRuleConditions (Maybe PolicyRuleAuthContextCondition)
policyRuleConditionsAuthContextL f PolicyRuleConditions{..} = (\policyRuleConditionsAuthContext -> PolicyRuleConditions { policyRuleConditionsAuthContext, ..} ) <$> f policyRuleConditionsAuthContext
{-# INLINE policyRuleConditionsAuthContextL #-}

-- | 'policyRuleConditionsAuthProvider' Lens
policyRuleConditionsAuthProviderL :: Lens_' PolicyRuleConditions (Maybe PasswordPolicyAuthenticationProviderCondition)
policyRuleConditionsAuthProviderL f PolicyRuleConditions{..} = (\policyRuleConditionsAuthProvider -> PolicyRuleConditions { policyRuleConditionsAuthProvider, ..} ) <$> f policyRuleConditionsAuthProvider
{-# INLINE policyRuleConditionsAuthProviderL #-}

-- | 'policyRuleConditionsBeforeScheduledAction' Lens
policyRuleConditionsBeforeScheduledActionL :: Lens_' PolicyRuleConditions (Maybe BeforeScheduledActionPolicyRuleCondition)
policyRuleConditionsBeforeScheduledActionL f PolicyRuleConditions{..} = (\policyRuleConditionsBeforeScheduledAction -> PolicyRuleConditions { policyRuleConditionsBeforeScheduledAction, ..} ) <$> f policyRuleConditionsBeforeScheduledAction
{-# INLINE policyRuleConditionsBeforeScheduledActionL #-}

-- | 'policyRuleConditionsClients' Lens
policyRuleConditionsClientsL :: Lens_' PolicyRuleConditions (Maybe ClientPolicyCondition)
policyRuleConditionsClientsL f PolicyRuleConditions{..} = (\policyRuleConditionsClients -> PolicyRuleConditions { policyRuleConditionsClients, ..} ) <$> f policyRuleConditionsClients
{-# INLINE policyRuleConditionsClientsL #-}

-- | 'policyRuleConditionsContext' Lens
policyRuleConditionsContextL :: Lens_' PolicyRuleConditions (Maybe ContextPolicyRuleCondition)
policyRuleConditionsContextL f PolicyRuleConditions{..} = (\policyRuleConditionsContext -> PolicyRuleConditions { policyRuleConditionsContext, ..} ) <$> f policyRuleConditionsContext
{-# INLINE policyRuleConditionsContextL #-}

-- | 'policyRuleConditionsDevice' Lens
policyRuleConditionsDeviceL :: Lens_' PolicyRuleConditions (Maybe DevicePolicyRuleCondition)
policyRuleConditionsDeviceL f PolicyRuleConditions{..} = (\policyRuleConditionsDevice -> PolicyRuleConditions { policyRuleConditionsDevice, ..} ) <$> f policyRuleConditionsDevice
{-# INLINE policyRuleConditionsDeviceL #-}

-- | 'policyRuleConditionsGrantTypes' Lens
policyRuleConditionsGrantTypesL :: Lens_' PolicyRuleConditions (Maybe GrantTypePolicyRuleCondition)
policyRuleConditionsGrantTypesL f PolicyRuleConditions{..} = (\policyRuleConditionsGrantTypes -> PolicyRuleConditions { policyRuleConditionsGrantTypes, ..} ) <$> f policyRuleConditionsGrantTypes
{-# INLINE policyRuleConditionsGrantTypesL #-}

-- | 'policyRuleConditionsGroups' Lens
policyRuleConditionsGroupsL :: Lens_' PolicyRuleConditions (Maybe GroupPolicyRuleCondition)
policyRuleConditionsGroupsL f PolicyRuleConditions{..} = (\policyRuleConditionsGroups -> PolicyRuleConditions { policyRuleConditionsGroups, ..} ) <$> f policyRuleConditionsGroups
{-# INLINE policyRuleConditionsGroupsL #-}

-- | 'policyRuleConditionsIdentityProvider' Lens
policyRuleConditionsIdentityProviderL :: Lens_' PolicyRuleConditions (Maybe IdentityProviderPolicyRuleCondition)
policyRuleConditionsIdentityProviderL f PolicyRuleConditions{..} = (\policyRuleConditionsIdentityProvider -> PolicyRuleConditions { policyRuleConditionsIdentityProvider, ..} ) <$> f policyRuleConditionsIdentityProvider
{-# INLINE policyRuleConditionsIdentityProviderL #-}

-- | 'policyRuleConditionsMdmEnrollment' Lens
policyRuleConditionsMdmEnrollmentL :: Lens_' PolicyRuleConditions (Maybe MDMEnrollmentPolicyRuleCondition)
policyRuleConditionsMdmEnrollmentL f PolicyRuleConditions{..} = (\policyRuleConditionsMdmEnrollment -> PolicyRuleConditions { policyRuleConditionsMdmEnrollment, ..} ) <$> f policyRuleConditionsMdmEnrollment
{-# INLINE policyRuleConditionsMdmEnrollmentL #-}

-- | 'policyRuleConditionsNetwork' Lens
policyRuleConditionsNetworkL :: Lens_' PolicyRuleConditions (Maybe PolicyNetworkCondition)
policyRuleConditionsNetworkL f PolicyRuleConditions{..} = (\policyRuleConditionsNetwork -> PolicyRuleConditions { policyRuleConditionsNetwork, ..} ) <$> f policyRuleConditionsNetwork
{-# INLINE policyRuleConditionsNetworkL #-}

-- | 'policyRuleConditionsPeople' Lens
policyRuleConditionsPeopleL :: Lens_' PolicyRuleConditions (Maybe PolicyPeopleCondition)
policyRuleConditionsPeopleL f PolicyRuleConditions{..} = (\policyRuleConditionsPeople -> PolicyRuleConditions { policyRuleConditionsPeople, ..} ) <$> f policyRuleConditionsPeople
{-# INLINE policyRuleConditionsPeopleL #-}

-- | 'policyRuleConditionsPlatform' Lens
policyRuleConditionsPlatformL :: Lens_' PolicyRuleConditions (Maybe PlatformPolicyRuleCondition)
policyRuleConditionsPlatformL f PolicyRuleConditions{..} = (\policyRuleConditionsPlatform -> PolicyRuleConditions { policyRuleConditionsPlatform, ..} ) <$> f policyRuleConditionsPlatform
{-# INLINE policyRuleConditionsPlatformL #-}

-- | 'policyRuleConditionsRisk' Lens
policyRuleConditionsRiskL :: Lens_' PolicyRuleConditions (Maybe RiskPolicyRuleCondition)
policyRuleConditionsRiskL f PolicyRuleConditions{..} = (\policyRuleConditionsRisk -> PolicyRuleConditions { policyRuleConditionsRisk, ..} ) <$> f policyRuleConditionsRisk
{-# INLINE policyRuleConditionsRiskL #-}

-- | 'policyRuleConditionsRiskScore' Lens
policyRuleConditionsRiskScoreL :: Lens_' PolicyRuleConditions (Maybe RiskScorePolicyRuleCondition)
policyRuleConditionsRiskScoreL f PolicyRuleConditions{..} = (\policyRuleConditionsRiskScore -> PolicyRuleConditions { policyRuleConditionsRiskScore, ..} ) <$> f policyRuleConditionsRiskScore
{-# INLINE policyRuleConditionsRiskScoreL #-}

-- | 'policyRuleConditionsScopes' Lens
policyRuleConditionsScopesL :: Lens_' PolicyRuleConditions (Maybe OAuth2ScopesMediationPolicyRuleCondition)
policyRuleConditionsScopesL f PolicyRuleConditions{..} = (\policyRuleConditionsScopes -> PolicyRuleConditions { policyRuleConditionsScopes, ..} ) <$> f policyRuleConditionsScopes
{-# INLINE policyRuleConditionsScopesL #-}

-- | 'policyRuleConditionsUserIdentifier' Lens
policyRuleConditionsUserIdentifierL :: Lens_' PolicyRuleConditions (Maybe UserIdentifierPolicyRuleCondition)
policyRuleConditionsUserIdentifierL f PolicyRuleConditions{..} = (\policyRuleConditionsUserIdentifier -> PolicyRuleConditions { policyRuleConditionsUserIdentifier, ..} ) <$> f policyRuleConditionsUserIdentifier
{-# INLINE policyRuleConditionsUserIdentifierL #-}

-- | 'policyRuleConditionsUserStatus' Lens
policyRuleConditionsUserStatusL :: Lens_' PolicyRuleConditions (Maybe UserStatusPolicyRuleCondition)
policyRuleConditionsUserStatusL f PolicyRuleConditions{..} = (\policyRuleConditionsUserStatus -> PolicyRuleConditions { policyRuleConditionsUserStatus, ..} ) <$> f policyRuleConditionsUserStatus
{-# INLINE policyRuleConditionsUserStatusL #-}

-- | 'policyRuleConditionsUsers' Lens
policyRuleConditionsUsersL :: Lens_' PolicyRuleConditions (Maybe UserPolicyRuleCondition)
policyRuleConditionsUsersL f PolicyRuleConditions{..} = (\policyRuleConditionsUsers -> PolicyRuleConditions { policyRuleConditionsUsers, ..} ) <$> f policyRuleConditionsUsers
{-# INLINE policyRuleConditionsUsersL #-}



-- * PolicySubject

-- | 'policySubjectFilter' Lens
policySubjectFilterL :: Lens_' PolicySubject (Maybe Text)
policySubjectFilterL f PolicySubject{..} = (\policySubjectFilter -> PolicySubject { policySubjectFilter, ..} ) <$> f policySubjectFilter
{-# INLINE policySubjectFilterL #-}

-- | 'policySubjectFormat' Lens
policySubjectFormatL :: Lens_' PolicySubject (Maybe [Text])
policySubjectFormatL f PolicySubject{..} = (\policySubjectFormat -> PolicySubject { policySubjectFormat, ..} ) <$> f policySubjectFormat
{-# INLINE policySubjectFormatL #-}

-- | 'policySubjectMatchAttribute' Lens
policySubjectMatchAttributeL :: Lens_' PolicySubject (Maybe Text)
policySubjectMatchAttributeL f PolicySubject{..} = (\policySubjectMatchAttribute -> PolicySubject { policySubjectMatchAttribute, ..} ) <$> f policySubjectMatchAttribute
{-# INLINE policySubjectMatchAttributeL #-}

-- | 'policySubjectMatchType' Lens
policySubjectMatchTypeL :: Lens_' PolicySubject (Maybe PolicySubjectMatchType)
policySubjectMatchTypeL f PolicySubject{..} = (\policySubjectMatchType -> PolicySubject { policySubjectMatchType, ..} ) <$> f policySubjectMatchType
{-# INLINE policySubjectMatchTypeL #-}

-- | 'policySubjectUserNameTemplate' Lens
policySubjectUserNameTemplateL :: Lens_' PolicySubject (Maybe PolicyUserNameTemplate)
policySubjectUserNameTemplateL f PolicySubject{..} = (\policySubjectUserNameTemplate -> PolicySubject { policySubjectUserNameTemplate, ..} ) <$> f policySubjectUserNameTemplate
{-# INLINE policySubjectUserNameTemplateL #-}



-- * PolicySubjectMatchType



-- * PolicyType



-- * PolicyUserNameTemplate

-- | 'policyUserNameTemplateTemplate' Lens
policyUserNameTemplateTemplateL :: Lens_' PolicyUserNameTemplate (Maybe Text)
policyUserNameTemplateTemplateL f PolicyUserNameTemplate{..} = (\policyUserNameTemplateTemplate -> PolicyUserNameTemplate { policyUserNameTemplateTemplate, ..} ) <$> f policyUserNameTemplateTemplate
{-# INLINE policyUserNameTemplateTemplateL #-}



-- * PossessionConstraint

-- | 'possessionConstraintHardwareProtection' Lens
possessionConstraintHardwareProtectionL :: Lens_' PossessionConstraint (Maybe Text)
possessionConstraintHardwareProtectionL f PossessionConstraint{..} = (\possessionConstraintHardwareProtection -> PossessionConstraint { possessionConstraintHardwareProtection, ..} ) <$> f possessionConstraintHardwareProtection
{-# INLINE possessionConstraintHardwareProtectionL #-}

-- | 'possessionConstraintDeviceBound' Lens
possessionConstraintDeviceBoundL :: Lens_' PossessionConstraint (Maybe Text)
possessionConstraintDeviceBoundL f PossessionConstraint{..} = (\possessionConstraintDeviceBound -> PossessionConstraint { possessionConstraintDeviceBound, ..} ) <$> f possessionConstraintDeviceBound
{-# INLINE possessionConstraintDeviceBoundL #-}

-- | 'possessionConstraintPhishingResistant' Lens
possessionConstraintPhishingResistantL :: Lens_' PossessionConstraint (Maybe Text)
possessionConstraintPhishingResistantL f PossessionConstraint{..} = (\possessionConstraintPhishingResistant -> PossessionConstraint { possessionConstraintPhishingResistant, ..} ) <$> f possessionConstraintPhishingResistant
{-# INLINE possessionConstraintPhishingResistantL #-}

-- | 'possessionConstraintUserPresence' Lens
possessionConstraintUserPresenceL :: Lens_' PossessionConstraint (Maybe Text)
possessionConstraintUserPresenceL f PossessionConstraint{..} = (\possessionConstraintUserPresence -> PossessionConstraint { possessionConstraintUserPresence, ..} ) <$> f possessionConstraintUserPresence
{-# INLINE possessionConstraintUserPresenceL #-}



-- * PreRegistrationInlineHook

-- | 'preRegistrationInlineHookInlineHookId' Lens
preRegistrationInlineHookInlineHookIdL :: Lens_' PreRegistrationInlineHook (Maybe Text)
preRegistrationInlineHookInlineHookIdL f PreRegistrationInlineHook{..} = (\preRegistrationInlineHookInlineHookId -> PreRegistrationInlineHook { preRegistrationInlineHookInlineHookId, ..} ) <$> f preRegistrationInlineHookInlineHookId
{-# INLINE preRegistrationInlineHookInlineHookIdL #-}



-- * ProfileEnrollmentPolicyRule

-- | 'profileEnrollmentPolicyRuleActions' Lens
profileEnrollmentPolicyRuleActionsL :: Lens_' ProfileEnrollmentPolicyRule (Maybe ProfileEnrollmentPolicyRuleActions)
profileEnrollmentPolicyRuleActionsL f ProfileEnrollmentPolicyRule{..} = (\profileEnrollmentPolicyRuleActions -> ProfileEnrollmentPolicyRule { profileEnrollmentPolicyRuleActions, ..} ) <$> f profileEnrollmentPolicyRuleActions
{-# INLINE profileEnrollmentPolicyRuleActionsL #-}

-- | 'profileEnrollmentPolicyRuleName' Lens
profileEnrollmentPolicyRuleNameL :: Lens_' ProfileEnrollmentPolicyRule (Maybe Text)
profileEnrollmentPolicyRuleNameL f ProfileEnrollmentPolicyRule{..} = (\profileEnrollmentPolicyRuleName -> ProfileEnrollmentPolicyRule { profileEnrollmentPolicyRuleName, ..} ) <$> f profileEnrollmentPolicyRuleName
{-# INLINE profileEnrollmentPolicyRuleNameL #-}



-- * ProfileEnrollmentPolicyRuleAction

-- | 'profileEnrollmentPolicyRuleActionAccess' Lens
profileEnrollmentPolicyRuleActionAccessL :: Lens_' ProfileEnrollmentPolicyRuleAction (Maybe Text)
profileEnrollmentPolicyRuleActionAccessL f ProfileEnrollmentPolicyRuleAction{..} = (\profileEnrollmentPolicyRuleActionAccess -> ProfileEnrollmentPolicyRuleAction { profileEnrollmentPolicyRuleActionAccess, ..} ) <$> f profileEnrollmentPolicyRuleActionAccess
{-# INLINE profileEnrollmentPolicyRuleActionAccessL #-}

-- | 'profileEnrollmentPolicyRuleActionPreRegistrationInlineHooks' Lens
profileEnrollmentPolicyRuleActionPreRegistrationInlineHooksL :: Lens_' ProfileEnrollmentPolicyRuleAction (Maybe [PreRegistrationInlineHook])
profileEnrollmentPolicyRuleActionPreRegistrationInlineHooksL f ProfileEnrollmentPolicyRuleAction{..} = (\profileEnrollmentPolicyRuleActionPreRegistrationInlineHooks -> ProfileEnrollmentPolicyRuleAction { profileEnrollmentPolicyRuleActionPreRegistrationInlineHooks, ..} ) <$> f profileEnrollmentPolicyRuleActionPreRegistrationInlineHooks
{-# INLINE profileEnrollmentPolicyRuleActionPreRegistrationInlineHooksL #-}

-- | 'profileEnrollmentPolicyRuleActionProfileAttributes' Lens
profileEnrollmentPolicyRuleActionProfileAttributesL :: Lens_' ProfileEnrollmentPolicyRuleAction (Maybe [ProfileEnrollmentPolicyRuleProfileAttribute])
profileEnrollmentPolicyRuleActionProfileAttributesL f ProfileEnrollmentPolicyRuleAction{..} = (\profileEnrollmentPolicyRuleActionProfileAttributes -> ProfileEnrollmentPolicyRuleAction { profileEnrollmentPolicyRuleActionProfileAttributes, ..} ) <$> f profileEnrollmentPolicyRuleActionProfileAttributes
{-# INLINE profileEnrollmentPolicyRuleActionProfileAttributesL #-}

-- | 'profileEnrollmentPolicyRuleActionActivationRequirements' Lens
profileEnrollmentPolicyRuleActionActivationRequirementsL :: Lens_' ProfileEnrollmentPolicyRuleAction (Maybe ProfileEnrollmentPolicyRuleActivationRequirement)
profileEnrollmentPolicyRuleActionActivationRequirementsL f ProfileEnrollmentPolicyRuleAction{..} = (\profileEnrollmentPolicyRuleActionActivationRequirements -> ProfileEnrollmentPolicyRuleAction { profileEnrollmentPolicyRuleActionActivationRequirements, ..} ) <$> f profileEnrollmentPolicyRuleActionActivationRequirements
{-# INLINE profileEnrollmentPolicyRuleActionActivationRequirementsL #-}

-- | 'profileEnrollmentPolicyRuleActionTargetGroupIds' Lens
profileEnrollmentPolicyRuleActionTargetGroupIdsL :: Lens_' ProfileEnrollmentPolicyRuleAction (Maybe [Text])
profileEnrollmentPolicyRuleActionTargetGroupIdsL f ProfileEnrollmentPolicyRuleAction{..} = (\profileEnrollmentPolicyRuleActionTargetGroupIds -> ProfileEnrollmentPolicyRuleAction { profileEnrollmentPolicyRuleActionTargetGroupIds, ..} ) <$> f profileEnrollmentPolicyRuleActionTargetGroupIds
{-# INLINE profileEnrollmentPolicyRuleActionTargetGroupIdsL #-}

-- | 'profileEnrollmentPolicyRuleActionUnknownUserAction' Lens
profileEnrollmentPolicyRuleActionUnknownUserActionL :: Lens_' ProfileEnrollmentPolicyRuleAction (Maybe Text)
profileEnrollmentPolicyRuleActionUnknownUserActionL f ProfileEnrollmentPolicyRuleAction{..} = (\profileEnrollmentPolicyRuleActionUnknownUserAction -> ProfileEnrollmentPolicyRuleAction { profileEnrollmentPolicyRuleActionUnknownUserAction, ..} ) <$> f profileEnrollmentPolicyRuleActionUnknownUserAction
{-# INLINE profileEnrollmentPolicyRuleActionUnknownUserActionL #-}



-- * ProfileEnrollmentPolicyRuleActions

-- | 'profileEnrollmentPolicyRuleActionsProfileEnrollment' Lens
profileEnrollmentPolicyRuleActionsProfileEnrollmentL :: Lens_' ProfileEnrollmentPolicyRuleActions (Maybe ProfileEnrollmentPolicyRuleAction)
profileEnrollmentPolicyRuleActionsProfileEnrollmentL f ProfileEnrollmentPolicyRuleActions{..} = (\profileEnrollmentPolicyRuleActionsProfileEnrollment -> ProfileEnrollmentPolicyRuleActions { profileEnrollmentPolicyRuleActionsProfileEnrollment, ..} ) <$> f profileEnrollmentPolicyRuleActionsProfileEnrollment
{-# INLINE profileEnrollmentPolicyRuleActionsProfileEnrollmentL #-}



-- * ProfileEnrollmentPolicyRuleActivationRequirement

-- | 'profileEnrollmentPolicyRuleActivationRequirementEmailVerification' Lens
profileEnrollmentPolicyRuleActivationRequirementEmailVerificationL :: Lens_' ProfileEnrollmentPolicyRuleActivationRequirement (Maybe Bool)
profileEnrollmentPolicyRuleActivationRequirementEmailVerificationL f ProfileEnrollmentPolicyRuleActivationRequirement{..} = (\profileEnrollmentPolicyRuleActivationRequirementEmailVerification -> ProfileEnrollmentPolicyRuleActivationRequirement { profileEnrollmentPolicyRuleActivationRequirementEmailVerification, ..} ) <$> f profileEnrollmentPolicyRuleActivationRequirementEmailVerification
{-# INLINE profileEnrollmentPolicyRuleActivationRequirementEmailVerificationL #-}



-- * ProfileEnrollmentPolicyRuleProfileAttribute

-- | 'profileEnrollmentPolicyRuleProfileAttributeLabel' Lens
profileEnrollmentPolicyRuleProfileAttributeLabelL :: Lens_' ProfileEnrollmentPolicyRuleProfileAttribute (Maybe Text)
profileEnrollmentPolicyRuleProfileAttributeLabelL f ProfileEnrollmentPolicyRuleProfileAttribute{..} = (\profileEnrollmentPolicyRuleProfileAttributeLabel -> ProfileEnrollmentPolicyRuleProfileAttribute { profileEnrollmentPolicyRuleProfileAttributeLabel, ..} ) <$> f profileEnrollmentPolicyRuleProfileAttributeLabel
{-# INLINE profileEnrollmentPolicyRuleProfileAttributeLabelL #-}

-- | 'profileEnrollmentPolicyRuleProfileAttributeName' Lens
profileEnrollmentPolicyRuleProfileAttributeNameL :: Lens_' ProfileEnrollmentPolicyRuleProfileAttribute (Maybe Text)
profileEnrollmentPolicyRuleProfileAttributeNameL f ProfileEnrollmentPolicyRuleProfileAttribute{..} = (\profileEnrollmentPolicyRuleProfileAttributeName -> ProfileEnrollmentPolicyRuleProfileAttribute { profileEnrollmentPolicyRuleProfileAttributeName, ..} ) <$> f profileEnrollmentPolicyRuleProfileAttributeName
{-# INLINE profileEnrollmentPolicyRuleProfileAttributeNameL #-}

-- | 'profileEnrollmentPolicyRuleProfileAttributeRequired' Lens
profileEnrollmentPolicyRuleProfileAttributeRequiredL :: Lens_' ProfileEnrollmentPolicyRuleProfileAttribute (Maybe Bool)
profileEnrollmentPolicyRuleProfileAttributeRequiredL f ProfileEnrollmentPolicyRuleProfileAttribute{..} = (\profileEnrollmentPolicyRuleProfileAttributeRequired -> ProfileEnrollmentPolicyRuleProfileAttribute { profileEnrollmentPolicyRuleProfileAttributeRequired, ..} ) <$> f profileEnrollmentPolicyRuleProfileAttributeRequired
{-# INLINE profileEnrollmentPolicyRuleProfileAttributeRequiredL #-}



-- * ProfileMapping

-- | 'profileMappingLinks' Lens
profileMappingLinksL :: Lens_' ProfileMapping (Maybe (Map.Map String A.Value))
profileMappingLinksL f ProfileMapping{..} = (\profileMappingLinks -> ProfileMapping { profileMappingLinks, ..} ) <$> f profileMappingLinks
{-# INLINE profileMappingLinksL #-}

-- | 'profileMappingId' Lens
profileMappingIdL :: Lens_' ProfileMapping (Maybe Text)
profileMappingIdL f ProfileMapping{..} = (\profileMappingId -> ProfileMapping { profileMappingId, ..} ) <$> f profileMappingId
{-# INLINE profileMappingIdL #-}

-- | 'profileMappingProperties' Lens
profileMappingPropertiesL :: Lens_' ProfileMapping (Maybe (Map.Map String ProfileMappingProperty))
profileMappingPropertiesL f ProfileMapping{..} = (\profileMappingProperties -> ProfileMapping { profileMappingProperties, ..} ) <$> f profileMappingProperties
{-# INLINE profileMappingPropertiesL #-}

-- | 'profileMappingSource' Lens
profileMappingSourceL :: Lens_' ProfileMapping (Maybe ProfileMappingSource)
profileMappingSourceL f ProfileMapping{..} = (\profileMappingSource -> ProfileMapping { profileMappingSource, ..} ) <$> f profileMappingSource
{-# INLINE profileMappingSourceL #-}

-- | 'profileMappingTarget' Lens
profileMappingTargetL :: Lens_' ProfileMapping (Maybe ProfileMappingSource)
profileMappingTargetL f ProfileMapping{..} = (\profileMappingTarget -> ProfileMapping { profileMappingTarget, ..} ) <$> f profileMappingTarget
{-# INLINE profileMappingTargetL #-}



-- * ProfileMappingProperty

-- | 'profileMappingPropertyExpression' Lens
profileMappingPropertyExpressionL :: Lens_' ProfileMappingProperty (Maybe Text)
profileMappingPropertyExpressionL f ProfileMappingProperty{..} = (\profileMappingPropertyExpression -> ProfileMappingProperty { profileMappingPropertyExpression, ..} ) <$> f profileMappingPropertyExpression
{-# INLINE profileMappingPropertyExpressionL #-}

-- | 'profileMappingPropertyPushStatus' Lens
profileMappingPropertyPushStatusL :: Lens_' ProfileMappingProperty (Maybe ProfileMappingPropertyPushStatus)
profileMappingPropertyPushStatusL f ProfileMappingProperty{..} = (\profileMappingPropertyPushStatus -> ProfileMappingProperty { profileMappingPropertyPushStatus, ..} ) <$> f profileMappingPropertyPushStatus
{-# INLINE profileMappingPropertyPushStatusL #-}



-- * ProfileMappingPropertyPushStatus



-- * ProfileMappingSource

-- | 'profileMappingSourceLinks' Lens
profileMappingSourceLinksL :: Lens_' ProfileMappingSource (Maybe (Map.Map String A.Value))
profileMappingSourceLinksL f ProfileMappingSource{..} = (\profileMappingSourceLinks -> ProfileMappingSource { profileMappingSourceLinks, ..} ) <$> f profileMappingSourceLinks
{-# INLINE profileMappingSourceLinksL #-}

-- | 'profileMappingSourceId' Lens
profileMappingSourceIdL :: Lens_' ProfileMappingSource (Maybe Text)
profileMappingSourceIdL f ProfileMappingSource{..} = (\profileMappingSourceId -> ProfileMappingSource { profileMappingSourceId, ..} ) <$> f profileMappingSourceId
{-# INLINE profileMappingSourceIdL #-}

-- | 'profileMappingSourceName' Lens
profileMappingSourceNameL :: Lens_' ProfileMappingSource (Maybe Text)
profileMappingSourceNameL f ProfileMappingSource{..} = (\profileMappingSourceName -> ProfileMappingSource { profileMappingSourceName, ..} ) <$> f profileMappingSourceName
{-# INLINE profileMappingSourceNameL #-}

-- | 'profileMappingSourceType' Lens
profileMappingSourceTypeL :: Lens_' ProfileMappingSource (Maybe Text)
profileMappingSourceTypeL f ProfileMappingSource{..} = (\profileMappingSourceType -> ProfileMappingSource { profileMappingSourceType, ..} ) <$> f profileMappingSourceType
{-# INLINE profileMappingSourceTypeL #-}



-- * ProfileSettingObject

-- | 'profileSettingObjectStatus' Lens
profileSettingObjectStatusL :: Lens_' ProfileSettingObject (Maybe EnabledStatus)
profileSettingObjectStatusL f ProfileSettingObject{..} = (\profileSettingObjectStatus -> ProfileSettingObject { profileSettingObjectStatus, ..} ) <$> f profileSettingObjectStatus
{-# INLINE profileSettingObjectStatusL #-}



-- * Protocol

-- | 'protocolAlgorithms' Lens
protocolAlgorithmsL :: Lens_' Protocol (Maybe ProtocolAlgorithms)
protocolAlgorithmsL f Protocol{..} = (\protocolAlgorithms -> Protocol { protocolAlgorithms, ..} ) <$> f protocolAlgorithms
{-# INLINE protocolAlgorithmsL #-}

-- | 'protocolCredentials' Lens
protocolCredentialsL :: Lens_' Protocol (Maybe IdentityProviderCredentials)
protocolCredentialsL f Protocol{..} = (\protocolCredentials -> Protocol { protocolCredentials, ..} ) <$> f protocolCredentials
{-# INLINE protocolCredentialsL #-}

-- | 'protocolEndpoints' Lens
protocolEndpointsL :: Lens_' Protocol (Maybe ProtocolEndpoints)
protocolEndpointsL f Protocol{..} = (\protocolEndpoints -> Protocol { protocolEndpoints, ..} ) <$> f protocolEndpoints
{-# INLINE protocolEndpointsL #-}

-- | 'protocolIssuer' Lens
protocolIssuerL :: Lens_' Protocol (Maybe ProtocolEndpoint)
protocolIssuerL f Protocol{..} = (\protocolIssuer -> Protocol { protocolIssuer, ..} ) <$> f protocolIssuer
{-# INLINE protocolIssuerL #-}

-- | 'protocolRelayState' Lens
protocolRelayStateL :: Lens_' Protocol (Maybe ProtocolRelayState)
protocolRelayStateL f Protocol{..} = (\protocolRelayState -> Protocol { protocolRelayState, ..} ) <$> f protocolRelayState
{-# INLINE protocolRelayStateL #-}

-- | 'protocolScopes' Lens
protocolScopesL :: Lens_' Protocol (Maybe [Text])
protocolScopesL f Protocol{..} = (\protocolScopes -> Protocol { protocolScopes, ..} ) <$> f protocolScopes
{-# INLINE protocolScopesL #-}

-- | 'protocolSettings' Lens
protocolSettingsL :: Lens_' Protocol (Maybe ProtocolSettings)
protocolSettingsL f Protocol{..} = (\protocolSettings -> Protocol { protocolSettings, ..} ) <$> f protocolSettings
{-# INLINE protocolSettingsL #-}

-- | 'protocolType' Lens
protocolTypeL :: Lens_' Protocol (Maybe E'Type9)
protocolTypeL f Protocol{..} = (\protocolType -> Protocol { protocolType, ..} ) <$> f protocolType
{-# INLINE protocolTypeL #-}



-- * ProtocolAlgorithmType

-- | 'protocolAlgorithmTypeSignature' Lens
protocolAlgorithmTypeSignatureL :: Lens_' ProtocolAlgorithmType (Maybe ProtocolAlgorithmTypeSignature)
protocolAlgorithmTypeSignatureL f ProtocolAlgorithmType{..} = (\protocolAlgorithmTypeSignature -> ProtocolAlgorithmType { protocolAlgorithmTypeSignature, ..} ) <$> f protocolAlgorithmTypeSignature
{-# INLINE protocolAlgorithmTypeSignatureL #-}



-- * ProtocolAlgorithmTypeSignature

-- | 'protocolAlgorithmTypeSignatureAlgorithm' Lens
protocolAlgorithmTypeSignatureAlgorithmL :: Lens_' ProtocolAlgorithmTypeSignature (Maybe Text)
protocolAlgorithmTypeSignatureAlgorithmL f ProtocolAlgorithmTypeSignature{..} = (\protocolAlgorithmTypeSignatureAlgorithm -> ProtocolAlgorithmTypeSignature { protocolAlgorithmTypeSignatureAlgorithm, ..} ) <$> f protocolAlgorithmTypeSignatureAlgorithm
{-# INLINE protocolAlgorithmTypeSignatureAlgorithmL #-}

-- | 'protocolAlgorithmTypeSignatureScope' Lens
protocolAlgorithmTypeSignatureScopeL :: Lens_' ProtocolAlgorithmTypeSignature (Maybe E'Scope)
protocolAlgorithmTypeSignatureScopeL f ProtocolAlgorithmTypeSignature{..} = (\protocolAlgorithmTypeSignatureScope -> ProtocolAlgorithmTypeSignature { protocolAlgorithmTypeSignatureScope, ..} ) <$> f protocolAlgorithmTypeSignatureScope
{-# INLINE protocolAlgorithmTypeSignatureScopeL #-}



-- * ProtocolAlgorithms

-- | 'protocolAlgorithmsRequest' Lens
protocolAlgorithmsRequestL :: Lens_' ProtocolAlgorithms (Maybe ProtocolAlgorithmType)
protocolAlgorithmsRequestL f ProtocolAlgorithms{..} = (\protocolAlgorithmsRequest -> ProtocolAlgorithms { protocolAlgorithmsRequest, ..} ) <$> f protocolAlgorithmsRequest
{-# INLINE protocolAlgorithmsRequestL #-}

-- | 'protocolAlgorithmsResponse' Lens
protocolAlgorithmsResponseL :: Lens_' ProtocolAlgorithms (Maybe ProtocolAlgorithmType)
protocolAlgorithmsResponseL f ProtocolAlgorithms{..} = (\protocolAlgorithmsResponse -> ProtocolAlgorithms { protocolAlgorithmsResponse, ..} ) <$> f protocolAlgorithmsResponse
{-# INLINE protocolAlgorithmsResponseL #-}



-- * ProtocolEndpoint

-- | 'protocolEndpointBinding' Lens
protocolEndpointBindingL :: Lens_' ProtocolEndpoint (Maybe E'Binding)
protocolEndpointBindingL f ProtocolEndpoint{..} = (\protocolEndpointBinding -> ProtocolEndpoint { protocolEndpointBinding, ..} ) <$> f protocolEndpointBinding
{-# INLINE protocolEndpointBindingL #-}

-- | 'protocolEndpointDestination' Lens
protocolEndpointDestinationL :: Lens_' ProtocolEndpoint (Maybe Text)
protocolEndpointDestinationL f ProtocolEndpoint{..} = (\protocolEndpointDestination -> ProtocolEndpoint { protocolEndpointDestination, ..} ) <$> f protocolEndpointDestination
{-# INLINE protocolEndpointDestinationL #-}

-- | 'protocolEndpointType' Lens
protocolEndpointTypeL :: Lens_' ProtocolEndpoint (Maybe E'Type10)
protocolEndpointTypeL f ProtocolEndpoint{..} = (\protocolEndpointType -> ProtocolEndpoint { protocolEndpointType, ..} ) <$> f protocolEndpointType
{-# INLINE protocolEndpointTypeL #-}

-- | 'protocolEndpointUrl' Lens
protocolEndpointUrlL :: Lens_' ProtocolEndpoint (Maybe Text)
protocolEndpointUrlL f ProtocolEndpoint{..} = (\protocolEndpointUrl -> ProtocolEndpoint { protocolEndpointUrl, ..} ) <$> f protocolEndpointUrl
{-# INLINE protocolEndpointUrlL #-}



-- * ProtocolEndpoints

-- | 'protocolEndpointsAcs' Lens
protocolEndpointsAcsL :: Lens_' ProtocolEndpoints (Maybe ProtocolEndpoint)
protocolEndpointsAcsL f ProtocolEndpoints{..} = (\protocolEndpointsAcs -> ProtocolEndpoints { protocolEndpointsAcs, ..} ) <$> f protocolEndpointsAcs
{-# INLINE protocolEndpointsAcsL #-}

-- | 'protocolEndpointsAuthorization' Lens
protocolEndpointsAuthorizationL :: Lens_' ProtocolEndpoints (Maybe ProtocolEndpoint)
protocolEndpointsAuthorizationL f ProtocolEndpoints{..} = (\protocolEndpointsAuthorization -> ProtocolEndpoints { protocolEndpointsAuthorization, ..} ) <$> f protocolEndpointsAuthorization
{-# INLINE protocolEndpointsAuthorizationL #-}

-- | 'protocolEndpointsJwks' Lens
protocolEndpointsJwksL :: Lens_' ProtocolEndpoints (Maybe ProtocolEndpoint)
protocolEndpointsJwksL f ProtocolEndpoints{..} = (\protocolEndpointsJwks -> ProtocolEndpoints { protocolEndpointsJwks, ..} ) <$> f protocolEndpointsJwks
{-# INLINE protocolEndpointsJwksL #-}

-- | 'protocolEndpointsMetadata' Lens
protocolEndpointsMetadataL :: Lens_' ProtocolEndpoints (Maybe ProtocolEndpoint)
protocolEndpointsMetadataL f ProtocolEndpoints{..} = (\protocolEndpointsMetadata -> ProtocolEndpoints { protocolEndpointsMetadata, ..} ) <$> f protocolEndpointsMetadata
{-# INLINE protocolEndpointsMetadataL #-}

-- | 'protocolEndpointsSlo' Lens
protocolEndpointsSloL :: Lens_' ProtocolEndpoints (Maybe ProtocolEndpoint)
protocolEndpointsSloL f ProtocolEndpoints{..} = (\protocolEndpointsSlo -> ProtocolEndpoints { protocolEndpointsSlo, ..} ) <$> f protocolEndpointsSlo
{-# INLINE protocolEndpointsSloL #-}

-- | 'protocolEndpointsSso' Lens
protocolEndpointsSsoL :: Lens_' ProtocolEndpoints (Maybe ProtocolEndpoint)
protocolEndpointsSsoL f ProtocolEndpoints{..} = (\protocolEndpointsSso -> ProtocolEndpoints { protocolEndpointsSso, ..} ) <$> f protocolEndpointsSso
{-# INLINE protocolEndpointsSsoL #-}

-- | 'protocolEndpointsToken' Lens
protocolEndpointsTokenL :: Lens_' ProtocolEndpoints (Maybe ProtocolEndpoint)
protocolEndpointsTokenL f ProtocolEndpoints{..} = (\protocolEndpointsToken -> ProtocolEndpoints { protocolEndpointsToken, ..} ) <$> f protocolEndpointsToken
{-# INLINE protocolEndpointsTokenL #-}

-- | 'protocolEndpointsUserInfo' Lens
protocolEndpointsUserInfoL :: Lens_' ProtocolEndpoints (Maybe ProtocolEndpoint)
protocolEndpointsUserInfoL f ProtocolEndpoints{..} = (\protocolEndpointsUserInfo -> ProtocolEndpoints { protocolEndpointsUserInfo, ..} ) <$> f protocolEndpointsUserInfo
{-# INLINE protocolEndpointsUserInfoL #-}



-- * ProtocolRelayState

-- | 'protocolRelayStateFormat' Lens
protocolRelayStateFormatL :: Lens_' ProtocolRelayState (Maybe ProtocolRelayStateFormat)
protocolRelayStateFormatL f ProtocolRelayState{..} = (\protocolRelayStateFormat -> ProtocolRelayState { protocolRelayStateFormat, ..} ) <$> f protocolRelayStateFormat
{-# INLINE protocolRelayStateFormatL #-}



-- * ProtocolRelayStateFormat



-- * ProtocolSettings

-- | 'protocolSettingsNameFormat' Lens
protocolSettingsNameFormatL :: Lens_' ProtocolSettings (Maybe Text)
protocolSettingsNameFormatL f ProtocolSettings{..} = (\protocolSettingsNameFormat -> ProtocolSettings { protocolSettingsNameFormat, ..} ) <$> f protocolSettingsNameFormat
{-# INLINE protocolSettingsNameFormatL #-}



-- * Provisioning

-- | 'provisioningAction' Lens
provisioningActionL :: Lens_' Provisioning (Maybe E'Action2)
provisioningActionL f Provisioning{..} = (\provisioningAction -> Provisioning { provisioningAction, ..} ) <$> f provisioningAction
{-# INLINE provisioningActionL #-}

-- | 'provisioningConditions' Lens
provisioningConditionsL :: Lens_' Provisioning (Maybe ProvisioningConditions)
provisioningConditionsL f Provisioning{..} = (\provisioningConditions -> Provisioning { provisioningConditions, ..} ) <$> f provisioningConditions
{-# INLINE provisioningConditionsL #-}

-- | 'provisioningGroups' Lens
provisioningGroupsL :: Lens_' Provisioning (Maybe ProvisioningGroups)
provisioningGroupsL f Provisioning{..} = (\provisioningGroups -> Provisioning { provisioningGroups, ..} ) <$> f provisioningGroups
{-# INLINE provisioningGroupsL #-}

-- | 'provisioningProfileMaster' Lens
provisioningProfileMasterL :: Lens_' Provisioning (Maybe Bool)
provisioningProfileMasterL f Provisioning{..} = (\provisioningProfileMaster -> Provisioning { provisioningProfileMaster, ..} ) <$> f provisioningProfileMaster
{-# INLINE provisioningProfileMasterL #-}



-- * ProvisioningConditions

-- | 'provisioningConditionsDeprovisioned' Lens
provisioningConditionsDeprovisionedL :: Lens_' ProvisioningConditions (Maybe ProvisioningDeprovisionedCondition)
provisioningConditionsDeprovisionedL f ProvisioningConditions{..} = (\provisioningConditionsDeprovisioned -> ProvisioningConditions { provisioningConditionsDeprovisioned, ..} ) <$> f provisioningConditionsDeprovisioned
{-# INLINE provisioningConditionsDeprovisionedL #-}

-- | 'provisioningConditionsSuspended' Lens
provisioningConditionsSuspendedL :: Lens_' ProvisioningConditions (Maybe ProvisioningSuspendedCondition)
provisioningConditionsSuspendedL f ProvisioningConditions{..} = (\provisioningConditionsSuspended -> ProvisioningConditions { provisioningConditionsSuspended, ..} ) <$> f provisioningConditionsSuspended
{-# INLINE provisioningConditionsSuspendedL #-}



-- * ProvisioningConnection

-- | 'provisioningConnectionAuthScheme' Lens
provisioningConnectionAuthSchemeL :: Lens_' ProvisioningConnection (Maybe ProvisioningConnectionAuthScheme)
provisioningConnectionAuthSchemeL f ProvisioningConnection{..} = (\provisioningConnectionAuthScheme -> ProvisioningConnection { provisioningConnectionAuthScheme, ..} ) <$> f provisioningConnectionAuthScheme
{-# INLINE provisioningConnectionAuthSchemeL #-}

-- | 'provisioningConnectionStatus' Lens
provisioningConnectionStatusL :: Lens_' ProvisioningConnection (Maybe ProvisioningConnectionStatus)
provisioningConnectionStatusL f ProvisioningConnection{..} = (\provisioningConnectionStatus -> ProvisioningConnection { provisioningConnectionStatus, ..} ) <$> f provisioningConnectionStatus
{-# INLINE provisioningConnectionStatusL #-}

-- | 'provisioningConnectionLinks' Lens
provisioningConnectionLinksL :: Lens_' ProvisioningConnection (Maybe (Map.Map String A.Value))
provisioningConnectionLinksL f ProvisioningConnection{..} = (\provisioningConnectionLinks -> ProvisioningConnection { provisioningConnectionLinks, ..} ) <$> f provisioningConnectionLinks
{-# INLINE provisioningConnectionLinksL #-}



-- * ProvisioningConnectionAuthScheme



-- * ProvisioningConnectionProfile

-- | 'provisioningConnectionProfileAuthScheme' Lens
provisioningConnectionProfileAuthSchemeL :: Lens_' ProvisioningConnectionProfile (Maybe ProvisioningConnectionAuthScheme)
provisioningConnectionProfileAuthSchemeL f ProvisioningConnectionProfile{..} = (\provisioningConnectionProfileAuthScheme -> ProvisioningConnectionProfile { provisioningConnectionProfileAuthScheme, ..} ) <$> f provisioningConnectionProfileAuthScheme
{-# INLINE provisioningConnectionProfileAuthSchemeL #-}

-- | 'provisioningConnectionProfileToken' Lens
provisioningConnectionProfileTokenL :: Lens_' ProvisioningConnectionProfile (Maybe Text)
provisioningConnectionProfileTokenL f ProvisioningConnectionProfile{..} = (\provisioningConnectionProfileToken -> ProvisioningConnectionProfile { provisioningConnectionProfileToken, ..} ) <$> f provisioningConnectionProfileToken
{-# INLINE provisioningConnectionProfileTokenL #-}



-- * ProvisioningConnectionRequest

-- | 'provisioningConnectionRequestProfile' Lens
provisioningConnectionRequestProfileL :: Lens_' ProvisioningConnectionRequest (Maybe ProvisioningConnectionProfile)
provisioningConnectionRequestProfileL f ProvisioningConnectionRequest{..} = (\provisioningConnectionRequestProfile -> ProvisioningConnectionRequest { provisioningConnectionRequestProfile, ..} ) <$> f provisioningConnectionRequestProfile
{-# INLINE provisioningConnectionRequestProfileL #-}



-- * ProvisioningConnectionStatus



-- * ProvisioningDeprovisionedCondition

-- | 'provisioningDeprovisionedConditionAction' Lens
provisioningDeprovisionedConditionActionL :: Lens_' ProvisioningDeprovisionedCondition (Maybe E'Action3)
provisioningDeprovisionedConditionActionL f ProvisioningDeprovisionedCondition{..} = (\provisioningDeprovisionedConditionAction -> ProvisioningDeprovisionedCondition { provisioningDeprovisionedConditionAction, ..} ) <$> f provisioningDeprovisionedConditionAction
{-# INLINE provisioningDeprovisionedConditionActionL #-}



-- * ProvisioningGroups

-- | 'provisioningGroupsAction' Lens
provisioningGroupsActionL :: Lens_' ProvisioningGroups (Maybe E'Action4)
provisioningGroupsActionL f ProvisioningGroups{..} = (\provisioningGroupsAction -> ProvisioningGroups { provisioningGroupsAction, ..} ) <$> f provisioningGroupsAction
{-# INLINE provisioningGroupsActionL #-}

-- | 'provisioningGroupsAssignments' Lens
provisioningGroupsAssignmentsL :: Lens_' ProvisioningGroups (Maybe [Text])
provisioningGroupsAssignmentsL f ProvisioningGroups{..} = (\provisioningGroupsAssignments -> ProvisioningGroups { provisioningGroupsAssignments, ..} ) <$> f provisioningGroupsAssignments
{-# INLINE provisioningGroupsAssignmentsL #-}

-- | 'provisioningGroupsFilter' Lens
provisioningGroupsFilterL :: Lens_' ProvisioningGroups (Maybe [Text])
provisioningGroupsFilterL f ProvisioningGroups{..} = (\provisioningGroupsFilter -> ProvisioningGroups { provisioningGroupsFilter, ..} ) <$> f provisioningGroupsFilter
{-# INLINE provisioningGroupsFilterL #-}

-- | 'provisioningGroupsSourceAttributeName' Lens
provisioningGroupsSourceAttributeNameL :: Lens_' ProvisioningGroups (Maybe Text)
provisioningGroupsSourceAttributeNameL f ProvisioningGroups{..} = (\provisioningGroupsSourceAttributeName -> ProvisioningGroups { provisioningGroupsSourceAttributeName, ..} ) <$> f provisioningGroupsSourceAttributeName
{-# INLINE provisioningGroupsSourceAttributeNameL #-}



-- * ProvisioningSuspendedCondition

-- | 'provisioningSuspendedConditionAction' Lens
provisioningSuspendedConditionActionL :: Lens_' ProvisioningSuspendedCondition (Maybe E'Action5)
provisioningSuspendedConditionActionL f ProvisioningSuspendedCondition{..} = (\provisioningSuspendedConditionAction -> ProvisioningSuspendedCondition { provisioningSuspendedConditionAction, ..} ) <$> f provisioningSuspendedConditionAction
{-# INLINE provisioningSuspendedConditionActionL #-}



-- * PushUserFactor

-- | 'pushUserFactorExpiresAt' Lens
pushUserFactorExpiresAtL :: Lens_' PushUserFactor (Maybe DateTime)
pushUserFactorExpiresAtL f PushUserFactor{..} = (\pushUserFactorExpiresAt -> PushUserFactor { pushUserFactorExpiresAt, ..} ) <$> f pushUserFactorExpiresAt
{-# INLINE pushUserFactorExpiresAtL #-}

-- | 'pushUserFactorFactorResult' Lens
pushUserFactorFactorResultL :: Lens_' PushUserFactor (Maybe FactorResultType)
pushUserFactorFactorResultL f PushUserFactor{..} = (\pushUserFactorFactorResult -> PushUserFactor { pushUserFactorFactorResult, ..} ) <$> f pushUserFactorFactorResult
{-# INLINE pushUserFactorFactorResultL #-}

-- | 'pushUserFactorProfile' Lens
pushUserFactorProfileL :: Lens_' PushUserFactor (Maybe PushUserFactorProfile)
pushUserFactorProfileL f PushUserFactor{..} = (\pushUserFactorProfile -> PushUserFactor { pushUserFactorProfile, ..} ) <$> f pushUserFactorProfile
{-# INLINE pushUserFactorProfileL #-}



-- * PushUserFactorProfile

-- | 'pushUserFactorProfileCredentialId' Lens
pushUserFactorProfileCredentialIdL :: Lens_' PushUserFactorProfile (Maybe Text)
pushUserFactorProfileCredentialIdL f PushUserFactorProfile{..} = (\pushUserFactorProfileCredentialId -> PushUserFactorProfile { pushUserFactorProfileCredentialId, ..} ) <$> f pushUserFactorProfileCredentialId
{-# INLINE pushUserFactorProfileCredentialIdL #-}

-- | 'pushUserFactorProfileDeviceToken' Lens
pushUserFactorProfileDeviceTokenL :: Lens_' PushUserFactorProfile (Maybe Text)
pushUserFactorProfileDeviceTokenL f PushUserFactorProfile{..} = (\pushUserFactorProfileDeviceToken -> PushUserFactorProfile { pushUserFactorProfileDeviceToken, ..} ) <$> f pushUserFactorProfileDeviceToken
{-# INLINE pushUserFactorProfileDeviceTokenL #-}

-- | 'pushUserFactorProfileDeviceType' Lens
pushUserFactorProfileDeviceTypeL :: Lens_' PushUserFactorProfile (Maybe Text)
pushUserFactorProfileDeviceTypeL f PushUserFactorProfile{..} = (\pushUserFactorProfileDeviceType -> PushUserFactorProfile { pushUserFactorProfileDeviceType, ..} ) <$> f pushUserFactorProfileDeviceType
{-# INLINE pushUserFactorProfileDeviceTypeL #-}

-- | 'pushUserFactorProfileName' Lens
pushUserFactorProfileNameL :: Lens_' PushUserFactorProfile (Maybe Text)
pushUserFactorProfileNameL f PushUserFactorProfile{..} = (\pushUserFactorProfileName -> PushUserFactorProfile { pushUserFactorProfileName, ..} ) <$> f pushUserFactorProfileName
{-# INLINE pushUserFactorProfileNameL #-}

-- | 'pushUserFactorProfilePlatform' Lens
pushUserFactorProfilePlatformL :: Lens_' PushUserFactorProfile (Maybe Text)
pushUserFactorProfilePlatformL f PushUserFactorProfile{..} = (\pushUserFactorProfilePlatform -> PushUserFactorProfile { pushUserFactorProfilePlatform, ..} ) <$> f pushUserFactorProfilePlatform
{-# INLINE pushUserFactorProfilePlatformL #-}

-- | 'pushUserFactorProfileVersion' Lens
pushUserFactorProfileVersionL :: Lens_' PushUserFactorProfile (Maybe Text)
pushUserFactorProfileVersionL f PushUserFactorProfile{..} = (\pushUserFactorProfileVersion -> PushUserFactorProfile { pushUserFactorProfileVersion, ..} ) <$> f pushUserFactorProfileVersion
{-# INLINE pushUserFactorProfileVersionL #-}



-- * RecoveryQuestionCredential

-- | 'recoveryQuestionCredentialAnswer' Lens
recoveryQuestionCredentialAnswerL :: Lens_' RecoveryQuestionCredential (Maybe Text)
recoveryQuestionCredentialAnswerL f RecoveryQuestionCredential{..} = (\recoveryQuestionCredentialAnswer -> RecoveryQuestionCredential { recoveryQuestionCredentialAnswer, ..} ) <$> f recoveryQuestionCredentialAnswer
{-# INLINE recoveryQuestionCredentialAnswerL #-}

-- | 'recoveryQuestionCredentialQuestion' Lens
recoveryQuestionCredentialQuestionL :: Lens_' RecoveryQuestionCredential (Maybe Text)
recoveryQuestionCredentialQuestionL f RecoveryQuestionCredential{..} = (\recoveryQuestionCredentialQuestion -> RecoveryQuestionCredential { recoveryQuestionCredentialQuestion, ..} ) <$> f recoveryQuestionCredentialQuestion
{-# INLINE recoveryQuestionCredentialQuestionL #-}



-- * RequiredEnum



-- * ResetPasswordToken

-- | 'resetPasswordTokenResetPasswordUrl' Lens
resetPasswordTokenResetPasswordUrlL :: Lens_' ResetPasswordToken (Maybe Text)
resetPasswordTokenResetPasswordUrlL f ResetPasswordToken{..} = (\resetPasswordTokenResetPasswordUrl -> ResetPasswordToken { resetPasswordTokenResetPasswordUrl, ..} ) <$> f resetPasswordTokenResetPasswordUrl
{-# INLINE resetPasswordTokenResetPasswordUrlL #-}



-- * ResponseLinks

-- | 'responseLinksLinks' Lens
responseLinksLinksL :: Lens_' ResponseLinks (Maybe (Map.Map String A.Value))
responseLinksLinksL f ResponseLinks{..} = (\responseLinksLinks -> ResponseLinks { responseLinksLinks, ..} ) <$> f responseLinksLinks
{-# INLINE responseLinksLinksL #-}



-- * RiskPolicyRuleCondition

-- | 'riskPolicyRuleConditionBehaviors' Lens
riskPolicyRuleConditionBehaviorsL :: Lens_' RiskPolicyRuleCondition (Maybe [Text])
riskPolicyRuleConditionBehaviorsL f RiskPolicyRuleCondition{..} = (\riskPolicyRuleConditionBehaviors -> RiskPolicyRuleCondition { riskPolicyRuleConditionBehaviors, ..} ) <$> f riskPolicyRuleConditionBehaviors
{-# INLINE riskPolicyRuleConditionBehaviorsL #-}



-- * RiskScorePolicyRuleCondition

-- | 'riskScorePolicyRuleConditionLevel' Lens
riskScorePolicyRuleConditionLevelL :: Lens_' RiskScorePolicyRuleCondition (Maybe Text)
riskScorePolicyRuleConditionLevelL f RiskScorePolicyRuleCondition{..} = (\riskScorePolicyRuleConditionLevel -> RiskScorePolicyRuleCondition { riskScorePolicyRuleConditionLevel, ..} ) <$> f riskScorePolicyRuleConditionLevel
{-# INLINE riskScorePolicyRuleConditionLevelL #-}



-- * Role

-- | 'roleEmbedded' Lens
roleEmbeddedL :: Lens_' Role (Maybe (Map.Map String A.Value))
roleEmbeddedL f Role{..} = (\roleEmbedded -> Role { roleEmbedded, ..} ) <$> f roleEmbedded
{-# INLINE roleEmbeddedL #-}

-- | 'roleLinks' Lens
roleLinksL :: Lens_' Role (Maybe (Map.Map String A.Value))
roleLinksL f Role{..} = (\roleLinks -> Role { roleLinks, ..} ) <$> f roleLinks
{-# INLINE roleLinksL #-}

-- | 'roleAssignmentType' Lens
roleAssignmentTypeL :: Lens_' Role (Maybe RoleAssignmentType)
roleAssignmentTypeL f Role{..} = (\roleAssignmentType -> Role { roleAssignmentType, ..} ) <$> f roleAssignmentType
{-# INLINE roleAssignmentTypeL #-}

-- | 'roleCreated' Lens
roleCreatedL :: Lens_' Role (Maybe DateTime)
roleCreatedL f Role{..} = (\roleCreated -> Role { roleCreated, ..} ) <$> f roleCreated
{-# INLINE roleCreatedL #-}

-- | 'roleDescription' Lens
roleDescriptionL :: Lens_' Role (Maybe Text)
roleDescriptionL f Role{..} = (\roleDescription -> Role { roleDescription, ..} ) <$> f roleDescription
{-# INLINE roleDescriptionL #-}

-- | 'roleId' Lens
roleIdL :: Lens_' Role (Maybe Text)
roleIdL f Role{..} = (\roleId -> Role { roleId, ..} ) <$> f roleId
{-# INLINE roleIdL #-}

-- | 'roleLabel' Lens
roleLabelL :: Lens_' Role (Maybe Text)
roleLabelL f Role{..} = (\roleLabel -> Role { roleLabel, ..} ) <$> f roleLabel
{-# INLINE roleLabelL #-}

-- | 'roleLastUpdated' Lens
roleLastUpdatedL :: Lens_' Role (Maybe DateTime)
roleLastUpdatedL f Role{..} = (\roleLastUpdated -> Role { roleLastUpdated, ..} ) <$> f roleLastUpdated
{-# INLINE roleLastUpdatedL #-}

-- | 'roleStatus' Lens
roleStatusL :: Lens_' Role (Maybe RoleStatus)
roleStatusL f Role{..} = (\roleStatus -> Role { roleStatus, ..} ) <$> f roleStatus
{-# INLINE roleStatusL #-}

-- | 'roleType' Lens
roleTypeL :: Lens_' Role (Maybe RoleType)
roleTypeL f Role{..} = (\roleType -> Role { roleType, ..} ) <$> f roleType
{-# INLINE roleTypeL #-}



-- * RoleAssignmentType



-- * RoleStatus



-- * RoleType



-- * SamlApplication

-- | 'samlApplicationSettings' Lens
samlApplicationSettingsL :: Lens_' SamlApplication (Maybe SamlApplicationSettings)
samlApplicationSettingsL f SamlApplication{..} = (\samlApplicationSettings -> SamlApplication { samlApplicationSettings, ..} ) <$> f samlApplicationSettings
{-# INLINE samlApplicationSettingsL #-}



-- * SamlApplicationSettings

-- | 'samlApplicationSettingsSignOn' Lens
samlApplicationSettingsSignOnL :: Lens_' SamlApplicationSettings (Maybe SamlApplicationSettingsSignOn)
samlApplicationSettingsSignOnL f SamlApplicationSettings{..} = (\samlApplicationSettingsSignOn -> SamlApplicationSettings { samlApplicationSettingsSignOn, ..} ) <$> f samlApplicationSettingsSignOn
{-# INLINE samlApplicationSettingsSignOnL #-}



-- * SamlApplicationSettingsSignOn

-- | 'samlApplicationSettingsSignOnAcsEndpoints' Lens
samlApplicationSettingsSignOnAcsEndpointsL :: Lens_' SamlApplicationSettingsSignOn (Maybe [AcsEndpoint])
samlApplicationSettingsSignOnAcsEndpointsL f SamlApplicationSettingsSignOn{..} = (\samlApplicationSettingsSignOnAcsEndpoints -> SamlApplicationSettingsSignOn { samlApplicationSettingsSignOnAcsEndpoints, ..} ) <$> f samlApplicationSettingsSignOnAcsEndpoints
{-# INLINE samlApplicationSettingsSignOnAcsEndpointsL #-}

-- | 'samlApplicationSettingsSignOnAllowMultipleAcsEndpoints' Lens
samlApplicationSettingsSignOnAllowMultipleAcsEndpointsL :: Lens_' SamlApplicationSettingsSignOn (Maybe Bool)
samlApplicationSettingsSignOnAllowMultipleAcsEndpointsL f SamlApplicationSettingsSignOn{..} = (\samlApplicationSettingsSignOnAllowMultipleAcsEndpoints -> SamlApplicationSettingsSignOn { samlApplicationSettingsSignOnAllowMultipleAcsEndpoints, ..} ) <$> f samlApplicationSettingsSignOnAllowMultipleAcsEndpoints
{-# INLINE samlApplicationSettingsSignOnAllowMultipleAcsEndpointsL #-}

-- | 'samlApplicationSettingsSignOnAssertionSigned' Lens
samlApplicationSettingsSignOnAssertionSignedL :: Lens_' SamlApplicationSettingsSignOn (Maybe Bool)
samlApplicationSettingsSignOnAssertionSignedL f SamlApplicationSettingsSignOn{..} = (\samlApplicationSettingsSignOnAssertionSigned -> SamlApplicationSettingsSignOn { samlApplicationSettingsSignOnAssertionSigned, ..} ) <$> f samlApplicationSettingsSignOnAssertionSigned
{-# INLINE samlApplicationSettingsSignOnAssertionSignedL #-}

-- | 'samlApplicationSettingsSignOnAttributeStatements' Lens
samlApplicationSettingsSignOnAttributeStatementsL :: Lens_' SamlApplicationSettingsSignOn (Maybe [SamlAttributeStatement])
samlApplicationSettingsSignOnAttributeStatementsL f SamlApplicationSettingsSignOn{..} = (\samlApplicationSettingsSignOnAttributeStatements -> SamlApplicationSettingsSignOn { samlApplicationSettingsSignOnAttributeStatements, ..} ) <$> f samlApplicationSettingsSignOnAttributeStatements
{-# INLINE samlApplicationSettingsSignOnAttributeStatementsL #-}

-- | 'samlApplicationSettingsSignOnAudience' Lens
samlApplicationSettingsSignOnAudienceL :: Lens_' SamlApplicationSettingsSignOn (Maybe Text)
samlApplicationSettingsSignOnAudienceL f SamlApplicationSettingsSignOn{..} = (\samlApplicationSettingsSignOnAudience -> SamlApplicationSettingsSignOn { samlApplicationSettingsSignOnAudience, ..} ) <$> f samlApplicationSettingsSignOnAudience
{-# INLINE samlApplicationSettingsSignOnAudienceL #-}

-- | 'samlApplicationSettingsSignOnAudienceOverride' Lens
samlApplicationSettingsSignOnAudienceOverrideL :: Lens_' SamlApplicationSettingsSignOn (Maybe Text)
samlApplicationSettingsSignOnAudienceOverrideL f SamlApplicationSettingsSignOn{..} = (\samlApplicationSettingsSignOnAudienceOverride -> SamlApplicationSettingsSignOn { samlApplicationSettingsSignOnAudienceOverride, ..} ) <$> f samlApplicationSettingsSignOnAudienceOverride
{-# INLINE samlApplicationSettingsSignOnAudienceOverrideL #-}

-- | 'samlApplicationSettingsSignOnAuthnContextClassRef' Lens
samlApplicationSettingsSignOnAuthnContextClassRefL :: Lens_' SamlApplicationSettingsSignOn (Maybe Text)
samlApplicationSettingsSignOnAuthnContextClassRefL f SamlApplicationSettingsSignOn{..} = (\samlApplicationSettingsSignOnAuthnContextClassRef -> SamlApplicationSettingsSignOn { samlApplicationSettingsSignOnAuthnContextClassRef, ..} ) <$> f samlApplicationSettingsSignOnAuthnContextClassRef
{-# INLINE samlApplicationSettingsSignOnAuthnContextClassRefL #-}

-- | 'samlApplicationSettingsSignOnDefaultRelayState' Lens
samlApplicationSettingsSignOnDefaultRelayStateL :: Lens_' SamlApplicationSettingsSignOn (Maybe Text)
samlApplicationSettingsSignOnDefaultRelayStateL f SamlApplicationSettingsSignOn{..} = (\samlApplicationSettingsSignOnDefaultRelayState -> SamlApplicationSettingsSignOn { samlApplicationSettingsSignOnDefaultRelayState, ..} ) <$> f samlApplicationSettingsSignOnDefaultRelayState
{-# INLINE samlApplicationSettingsSignOnDefaultRelayStateL #-}

-- | 'samlApplicationSettingsSignOnDestination' Lens
samlApplicationSettingsSignOnDestinationL :: Lens_' SamlApplicationSettingsSignOn (Maybe Text)
samlApplicationSettingsSignOnDestinationL f SamlApplicationSettingsSignOn{..} = (\samlApplicationSettingsSignOnDestination -> SamlApplicationSettingsSignOn { samlApplicationSettingsSignOnDestination, ..} ) <$> f samlApplicationSettingsSignOnDestination
{-# INLINE samlApplicationSettingsSignOnDestinationL #-}

-- | 'samlApplicationSettingsSignOnDestinationOverride' Lens
samlApplicationSettingsSignOnDestinationOverrideL :: Lens_' SamlApplicationSettingsSignOn (Maybe Text)
samlApplicationSettingsSignOnDestinationOverrideL f SamlApplicationSettingsSignOn{..} = (\samlApplicationSettingsSignOnDestinationOverride -> SamlApplicationSettingsSignOn { samlApplicationSettingsSignOnDestinationOverride, ..} ) <$> f samlApplicationSettingsSignOnDestinationOverride
{-# INLINE samlApplicationSettingsSignOnDestinationOverrideL #-}

-- | 'samlApplicationSettingsSignOnDigestAlgorithm' Lens
samlApplicationSettingsSignOnDigestAlgorithmL :: Lens_' SamlApplicationSettingsSignOn (Maybe Text)
samlApplicationSettingsSignOnDigestAlgorithmL f SamlApplicationSettingsSignOn{..} = (\samlApplicationSettingsSignOnDigestAlgorithm -> SamlApplicationSettingsSignOn { samlApplicationSettingsSignOnDigestAlgorithm, ..} ) <$> f samlApplicationSettingsSignOnDigestAlgorithm
{-# INLINE samlApplicationSettingsSignOnDigestAlgorithmL #-}

-- | 'samlApplicationSettingsSignOnHonorForceAuthn' Lens
samlApplicationSettingsSignOnHonorForceAuthnL :: Lens_' SamlApplicationSettingsSignOn (Maybe Bool)
samlApplicationSettingsSignOnHonorForceAuthnL f SamlApplicationSettingsSignOn{..} = (\samlApplicationSettingsSignOnHonorForceAuthn -> SamlApplicationSettingsSignOn { samlApplicationSettingsSignOnHonorForceAuthn, ..} ) <$> f samlApplicationSettingsSignOnHonorForceAuthn
{-# INLINE samlApplicationSettingsSignOnHonorForceAuthnL #-}

-- | 'samlApplicationSettingsSignOnIdpIssuer' Lens
samlApplicationSettingsSignOnIdpIssuerL :: Lens_' SamlApplicationSettingsSignOn (Maybe Text)
samlApplicationSettingsSignOnIdpIssuerL f SamlApplicationSettingsSignOn{..} = (\samlApplicationSettingsSignOnIdpIssuer -> SamlApplicationSettingsSignOn { samlApplicationSettingsSignOnIdpIssuer, ..} ) <$> f samlApplicationSettingsSignOnIdpIssuer
{-# INLINE samlApplicationSettingsSignOnIdpIssuerL #-}

-- | 'samlApplicationSettingsSignOnInlineHooks' Lens
samlApplicationSettingsSignOnInlineHooksL :: Lens_' SamlApplicationSettingsSignOn (Maybe [SignOnInlineHook])
samlApplicationSettingsSignOnInlineHooksL f SamlApplicationSettingsSignOn{..} = (\samlApplicationSettingsSignOnInlineHooks -> SamlApplicationSettingsSignOn { samlApplicationSettingsSignOnInlineHooks, ..} ) <$> f samlApplicationSettingsSignOnInlineHooks
{-# INLINE samlApplicationSettingsSignOnInlineHooksL #-}

-- | 'samlApplicationSettingsSignOnRecipient' Lens
samlApplicationSettingsSignOnRecipientL :: Lens_' SamlApplicationSettingsSignOn (Maybe Text)
samlApplicationSettingsSignOnRecipientL f SamlApplicationSettingsSignOn{..} = (\samlApplicationSettingsSignOnRecipient -> SamlApplicationSettingsSignOn { samlApplicationSettingsSignOnRecipient, ..} ) <$> f samlApplicationSettingsSignOnRecipient
{-# INLINE samlApplicationSettingsSignOnRecipientL #-}

-- | 'samlApplicationSettingsSignOnRecipientOverride' Lens
samlApplicationSettingsSignOnRecipientOverrideL :: Lens_' SamlApplicationSettingsSignOn (Maybe Text)
samlApplicationSettingsSignOnRecipientOverrideL f SamlApplicationSettingsSignOn{..} = (\samlApplicationSettingsSignOnRecipientOverride -> SamlApplicationSettingsSignOn { samlApplicationSettingsSignOnRecipientOverride, ..} ) <$> f samlApplicationSettingsSignOnRecipientOverride
{-# INLINE samlApplicationSettingsSignOnRecipientOverrideL #-}

-- | 'samlApplicationSettingsSignOnRequestCompressed' Lens
samlApplicationSettingsSignOnRequestCompressedL :: Lens_' SamlApplicationSettingsSignOn (Maybe Bool)
samlApplicationSettingsSignOnRequestCompressedL f SamlApplicationSettingsSignOn{..} = (\samlApplicationSettingsSignOnRequestCompressed -> SamlApplicationSettingsSignOn { samlApplicationSettingsSignOnRequestCompressed, ..} ) <$> f samlApplicationSettingsSignOnRequestCompressed
{-# INLINE samlApplicationSettingsSignOnRequestCompressedL #-}

-- | 'samlApplicationSettingsSignOnResponseSigned' Lens
samlApplicationSettingsSignOnResponseSignedL :: Lens_' SamlApplicationSettingsSignOn (Maybe Bool)
samlApplicationSettingsSignOnResponseSignedL f SamlApplicationSettingsSignOn{..} = (\samlApplicationSettingsSignOnResponseSigned -> SamlApplicationSettingsSignOn { samlApplicationSettingsSignOnResponseSigned, ..} ) <$> f samlApplicationSettingsSignOnResponseSigned
{-# INLINE samlApplicationSettingsSignOnResponseSignedL #-}

-- | 'samlApplicationSettingsSignOnSignatureAlgorithm' Lens
samlApplicationSettingsSignOnSignatureAlgorithmL :: Lens_' SamlApplicationSettingsSignOn (Maybe Text)
samlApplicationSettingsSignOnSignatureAlgorithmL f SamlApplicationSettingsSignOn{..} = (\samlApplicationSettingsSignOnSignatureAlgorithm -> SamlApplicationSettingsSignOn { samlApplicationSettingsSignOnSignatureAlgorithm, ..} ) <$> f samlApplicationSettingsSignOnSignatureAlgorithm
{-# INLINE samlApplicationSettingsSignOnSignatureAlgorithmL #-}

-- | 'samlApplicationSettingsSignOnSlo' Lens
samlApplicationSettingsSignOnSloL :: Lens_' SamlApplicationSettingsSignOn (Maybe SingleLogout)
samlApplicationSettingsSignOnSloL f SamlApplicationSettingsSignOn{..} = (\samlApplicationSettingsSignOnSlo -> SamlApplicationSettingsSignOn { samlApplicationSettingsSignOnSlo, ..} ) <$> f samlApplicationSettingsSignOnSlo
{-# INLINE samlApplicationSettingsSignOnSloL #-}

-- | 'samlApplicationSettingsSignOnSpIssuer' Lens
samlApplicationSettingsSignOnSpIssuerL :: Lens_' SamlApplicationSettingsSignOn (Maybe Text)
samlApplicationSettingsSignOnSpIssuerL f SamlApplicationSettingsSignOn{..} = (\samlApplicationSettingsSignOnSpIssuer -> SamlApplicationSettingsSignOn { samlApplicationSettingsSignOnSpIssuer, ..} ) <$> f samlApplicationSettingsSignOnSpIssuer
{-# INLINE samlApplicationSettingsSignOnSpIssuerL #-}

-- | 'samlApplicationSettingsSignOnSpCertificate' Lens
samlApplicationSettingsSignOnSpCertificateL :: Lens_' SamlApplicationSettingsSignOn (Maybe SpCertificate)
samlApplicationSettingsSignOnSpCertificateL f SamlApplicationSettingsSignOn{..} = (\samlApplicationSettingsSignOnSpCertificate -> SamlApplicationSettingsSignOn { samlApplicationSettingsSignOnSpCertificate, ..} ) <$> f samlApplicationSettingsSignOnSpCertificate
{-# INLINE samlApplicationSettingsSignOnSpCertificateL #-}

-- | 'samlApplicationSettingsSignOnSsoAcsUrl' Lens
samlApplicationSettingsSignOnSsoAcsUrlL :: Lens_' SamlApplicationSettingsSignOn (Maybe Text)
samlApplicationSettingsSignOnSsoAcsUrlL f SamlApplicationSettingsSignOn{..} = (\samlApplicationSettingsSignOnSsoAcsUrl -> SamlApplicationSettingsSignOn { samlApplicationSettingsSignOnSsoAcsUrl, ..} ) <$> f samlApplicationSettingsSignOnSsoAcsUrl
{-# INLINE samlApplicationSettingsSignOnSsoAcsUrlL #-}

-- | 'samlApplicationSettingsSignOnSsoAcsUrlOverride' Lens
samlApplicationSettingsSignOnSsoAcsUrlOverrideL :: Lens_' SamlApplicationSettingsSignOn (Maybe Text)
samlApplicationSettingsSignOnSsoAcsUrlOverrideL f SamlApplicationSettingsSignOn{..} = (\samlApplicationSettingsSignOnSsoAcsUrlOverride -> SamlApplicationSettingsSignOn { samlApplicationSettingsSignOnSsoAcsUrlOverride, ..} ) <$> f samlApplicationSettingsSignOnSsoAcsUrlOverride
{-# INLINE samlApplicationSettingsSignOnSsoAcsUrlOverrideL #-}

-- | 'samlApplicationSettingsSignOnSubjectNameIdFormat' Lens
samlApplicationSettingsSignOnSubjectNameIdFormatL :: Lens_' SamlApplicationSettingsSignOn (Maybe Text)
samlApplicationSettingsSignOnSubjectNameIdFormatL f SamlApplicationSettingsSignOn{..} = (\samlApplicationSettingsSignOnSubjectNameIdFormat -> SamlApplicationSettingsSignOn { samlApplicationSettingsSignOnSubjectNameIdFormat, ..} ) <$> f samlApplicationSettingsSignOnSubjectNameIdFormat
{-# INLINE samlApplicationSettingsSignOnSubjectNameIdFormatL #-}

-- | 'samlApplicationSettingsSignOnSubjectNameIdTemplate' Lens
samlApplicationSettingsSignOnSubjectNameIdTemplateL :: Lens_' SamlApplicationSettingsSignOn (Maybe Text)
samlApplicationSettingsSignOnSubjectNameIdTemplateL f SamlApplicationSettingsSignOn{..} = (\samlApplicationSettingsSignOnSubjectNameIdTemplate -> SamlApplicationSettingsSignOn { samlApplicationSettingsSignOnSubjectNameIdTemplate, ..} ) <$> f samlApplicationSettingsSignOnSubjectNameIdTemplate
{-# INLINE samlApplicationSettingsSignOnSubjectNameIdTemplateL #-}



-- * SamlAttributeStatement

-- | 'samlAttributeStatementName' Lens
samlAttributeStatementNameL :: Lens_' SamlAttributeStatement (Maybe Text)
samlAttributeStatementNameL f SamlAttributeStatement{..} = (\samlAttributeStatementName -> SamlAttributeStatement { samlAttributeStatementName, ..} ) <$> f samlAttributeStatementName
{-# INLINE samlAttributeStatementNameL #-}

-- | 'samlAttributeStatementNamespace' Lens
samlAttributeStatementNamespaceL :: Lens_' SamlAttributeStatement (Maybe Text)
samlAttributeStatementNamespaceL f SamlAttributeStatement{..} = (\samlAttributeStatementNamespace -> SamlAttributeStatement { samlAttributeStatementNamespace, ..} ) <$> f samlAttributeStatementNamespace
{-# INLINE samlAttributeStatementNamespaceL #-}

-- | 'samlAttributeStatementType' Lens
samlAttributeStatementTypeL :: Lens_' SamlAttributeStatement (Maybe Text)
samlAttributeStatementTypeL f SamlAttributeStatement{..} = (\samlAttributeStatementType -> SamlAttributeStatement { samlAttributeStatementType, ..} ) <$> f samlAttributeStatementType
{-# INLINE samlAttributeStatementTypeL #-}

-- | 'samlAttributeStatementFilterType' Lens
samlAttributeStatementFilterTypeL :: Lens_' SamlAttributeStatement (Maybe Text)
samlAttributeStatementFilterTypeL f SamlAttributeStatement{..} = (\samlAttributeStatementFilterType -> SamlAttributeStatement { samlAttributeStatementFilterType, ..} ) <$> f samlAttributeStatementFilterType
{-# INLINE samlAttributeStatementFilterTypeL #-}

-- | 'samlAttributeStatementFilterValue' Lens
samlAttributeStatementFilterValueL :: Lens_' SamlAttributeStatement (Maybe Text)
samlAttributeStatementFilterValueL f SamlAttributeStatement{..} = (\samlAttributeStatementFilterValue -> SamlAttributeStatement { samlAttributeStatementFilterValue, ..} ) <$> f samlAttributeStatementFilterValue
{-# INLINE samlAttributeStatementFilterValueL #-}

-- | 'samlAttributeStatementValues' Lens
samlAttributeStatementValuesL :: Lens_' SamlAttributeStatement (Maybe [Text])
samlAttributeStatementValuesL f SamlAttributeStatement{..} = (\samlAttributeStatementValues -> SamlAttributeStatement { samlAttributeStatementValues, ..} ) <$> f samlAttributeStatementValues
{-# INLINE samlAttributeStatementValuesL #-}



-- * ScheduledUserLifecycleAction

-- | 'scheduledUserLifecycleActionStatus' Lens
scheduledUserLifecycleActionStatusL :: Lens_' ScheduledUserLifecycleAction (Maybe E'Status4)
scheduledUserLifecycleActionStatusL f ScheduledUserLifecycleAction{..} = (\scheduledUserLifecycleActionStatus -> ScheduledUserLifecycleAction { scheduledUserLifecycleActionStatus, ..} ) <$> f scheduledUserLifecycleActionStatus
{-# INLINE scheduledUserLifecycleActionStatusL #-}



-- * SchemeApplicationCredentials

-- | 'schemeApplicationCredentialsPassword' Lens
schemeApplicationCredentialsPasswordL :: Lens_' SchemeApplicationCredentials (Maybe PasswordCredential)
schemeApplicationCredentialsPasswordL f SchemeApplicationCredentials{..} = (\schemeApplicationCredentialsPassword -> SchemeApplicationCredentials { schemeApplicationCredentialsPassword, ..} ) <$> f schemeApplicationCredentialsPassword
{-# INLINE schemeApplicationCredentialsPasswordL #-}

-- | 'schemeApplicationCredentialsRevealPassword' Lens
schemeApplicationCredentialsRevealPasswordL :: Lens_' SchemeApplicationCredentials (Maybe Bool)
schemeApplicationCredentialsRevealPasswordL f SchemeApplicationCredentials{..} = (\schemeApplicationCredentialsRevealPassword -> SchemeApplicationCredentials { schemeApplicationCredentialsRevealPassword, ..} ) <$> f schemeApplicationCredentialsRevealPassword
{-# INLINE schemeApplicationCredentialsRevealPasswordL #-}

-- | 'schemeApplicationCredentialsScheme' Lens
schemeApplicationCredentialsSchemeL :: Lens_' SchemeApplicationCredentials (Maybe ApplicationCredentialsScheme)
schemeApplicationCredentialsSchemeL f SchemeApplicationCredentials{..} = (\schemeApplicationCredentialsScheme -> SchemeApplicationCredentials { schemeApplicationCredentialsScheme, ..} ) <$> f schemeApplicationCredentialsScheme
{-# INLINE schemeApplicationCredentialsSchemeL #-}

-- | 'schemeApplicationCredentialsSigning' Lens
schemeApplicationCredentialsSigningL :: Lens_' SchemeApplicationCredentials (Maybe ApplicationCredentialsSigning)
schemeApplicationCredentialsSigningL f SchemeApplicationCredentials{..} = (\schemeApplicationCredentialsSigning -> SchemeApplicationCredentials { schemeApplicationCredentialsSigning, ..} ) <$> f schemeApplicationCredentialsSigning
{-# INLINE schemeApplicationCredentialsSigningL #-}

-- | 'schemeApplicationCredentialsUserName' Lens
schemeApplicationCredentialsUserNameL :: Lens_' SchemeApplicationCredentials (Maybe Text)
schemeApplicationCredentialsUserNameL f SchemeApplicationCredentials{..} = (\schemeApplicationCredentialsUserName -> SchemeApplicationCredentials { schemeApplicationCredentialsUserName, ..} ) <$> f schemeApplicationCredentialsUserName
{-# INLINE schemeApplicationCredentialsUserNameL #-}



-- * Scope

-- | 'scopeStringValue' Lens
scopeStringValueL :: Lens_' Scope (Maybe Text)
scopeStringValueL f Scope{..} = (\scopeStringValue -> Scope { scopeStringValue, ..} ) <$> f scopeStringValue
{-# INLINE scopeStringValueL #-}

-- | 'scopeType' Lens
scopeTypeL :: Lens_' Scope (Maybe ScopeType)
scopeTypeL f Scope{..} = (\scopeType -> Scope { scopeType, ..} ) <$> f scopeType
{-# INLINE scopeTypeL #-}

-- | 'scopeAllowedOktaApps' Lens
scopeAllowedOktaAppsL :: Lens_' Scope (Maybe [IframeEmbedScopeAllowedApps])
scopeAllowedOktaAppsL f Scope{..} = (\scopeAllowedOktaApps -> Scope { scopeAllowedOktaApps, ..} ) <$> f scopeAllowedOktaApps
{-# INLINE scopeAllowedOktaAppsL #-}



-- * ScopeType



-- * SecurePasswordStoreApplication

-- | 'securePasswordStoreApplicationCredentials' Lens
securePasswordStoreApplicationCredentialsL :: Lens_' SecurePasswordStoreApplication (Maybe SchemeApplicationCredentials)
securePasswordStoreApplicationCredentialsL f SecurePasswordStoreApplication{..} = (\securePasswordStoreApplicationCredentials -> SecurePasswordStoreApplication { securePasswordStoreApplicationCredentials, ..} ) <$> f securePasswordStoreApplicationCredentials
{-# INLINE securePasswordStoreApplicationCredentialsL #-}

-- | 'securePasswordStoreApplicationName' Lens
securePasswordStoreApplicationNameL :: Lens_' SecurePasswordStoreApplication (Maybe A.Value)
securePasswordStoreApplicationNameL f SecurePasswordStoreApplication{..} = (\securePasswordStoreApplicationName -> SecurePasswordStoreApplication { securePasswordStoreApplicationName, ..} ) <$> f securePasswordStoreApplicationName
{-# INLINE securePasswordStoreApplicationNameL #-}

-- | 'securePasswordStoreApplicationSettings' Lens
securePasswordStoreApplicationSettingsL :: Lens_' SecurePasswordStoreApplication (Maybe SecurePasswordStoreApplicationSettings)
securePasswordStoreApplicationSettingsL f SecurePasswordStoreApplication{..} = (\securePasswordStoreApplicationSettings -> SecurePasswordStoreApplication { securePasswordStoreApplicationSettings, ..} ) <$> f securePasswordStoreApplicationSettings
{-# INLINE securePasswordStoreApplicationSettingsL #-}



-- * SecurePasswordStoreApplicationSettings

-- | 'securePasswordStoreApplicationSettingsApp' Lens
securePasswordStoreApplicationSettingsAppL :: Lens_' SecurePasswordStoreApplicationSettings (Maybe SecurePasswordStoreApplicationSettingsApplication)
securePasswordStoreApplicationSettingsAppL f SecurePasswordStoreApplicationSettings{..} = (\securePasswordStoreApplicationSettingsApp -> SecurePasswordStoreApplicationSettings { securePasswordStoreApplicationSettingsApp, ..} ) <$> f securePasswordStoreApplicationSettingsApp
{-# INLINE securePasswordStoreApplicationSettingsAppL #-}



-- * SecurePasswordStoreApplicationSettingsApplication

-- | 'securePasswordStoreApplicationSettingsApplicationOptionalField1' Lens
securePasswordStoreApplicationSettingsApplicationOptionalField1L :: Lens_' SecurePasswordStoreApplicationSettingsApplication (Maybe Text)
securePasswordStoreApplicationSettingsApplicationOptionalField1L f SecurePasswordStoreApplicationSettingsApplication{..} = (\securePasswordStoreApplicationSettingsApplicationOptionalField1 -> SecurePasswordStoreApplicationSettingsApplication { securePasswordStoreApplicationSettingsApplicationOptionalField1, ..} ) <$> f securePasswordStoreApplicationSettingsApplicationOptionalField1
{-# INLINE securePasswordStoreApplicationSettingsApplicationOptionalField1L #-}

-- | 'securePasswordStoreApplicationSettingsApplicationOptionalField1Value' Lens
securePasswordStoreApplicationSettingsApplicationOptionalField1ValueL :: Lens_' SecurePasswordStoreApplicationSettingsApplication (Maybe Text)
securePasswordStoreApplicationSettingsApplicationOptionalField1ValueL f SecurePasswordStoreApplicationSettingsApplication{..} = (\securePasswordStoreApplicationSettingsApplicationOptionalField1Value -> SecurePasswordStoreApplicationSettingsApplication { securePasswordStoreApplicationSettingsApplicationOptionalField1Value, ..} ) <$> f securePasswordStoreApplicationSettingsApplicationOptionalField1Value
{-# INLINE securePasswordStoreApplicationSettingsApplicationOptionalField1ValueL #-}

-- | 'securePasswordStoreApplicationSettingsApplicationOptionalField2' Lens
securePasswordStoreApplicationSettingsApplicationOptionalField2L :: Lens_' SecurePasswordStoreApplicationSettingsApplication (Maybe Text)
securePasswordStoreApplicationSettingsApplicationOptionalField2L f SecurePasswordStoreApplicationSettingsApplication{..} = (\securePasswordStoreApplicationSettingsApplicationOptionalField2 -> SecurePasswordStoreApplicationSettingsApplication { securePasswordStoreApplicationSettingsApplicationOptionalField2, ..} ) <$> f securePasswordStoreApplicationSettingsApplicationOptionalField2
{-# INLINE securePasswordStoreApplicationSettingsApplicationOptionalField2L #-}

-- | 'securePasswordStoreApplicationSettingsApplicationOptionalField2Value' Lens
securePasswordStoreApplicationSettingsApplicationOptionalField2ValueL :: Lens_' SecurePasswordStoreApplicationSettingsApplication (Maybe Text)
securePasswordStoreApplicationSettingsApplicationOptionalField2ValueL f SecurePasswordStoreApplicationSettingsApplication{..} = (\securePasswordStoreApplicationSettingsApplicationOptionalField2Value -> SecurePasswordStoreApplicationSettingsApplication { securePasswordStoreApplicationSettingsApplicationOptionalField2Value, ..} ) <$> f securePasswordStoreApplicationSettingsApplicationOptionalField2Value
{-# INLINE securePasswordStoreApplicationSettingsApplicationOptionalField2ValueL #-}

-- | 'securePasswordStoreApplicationSettingsApplicationOptionalField3' Lens
securePasswordStoreApplicationSettingsApplicationOptionalField3L :: Lens_' SecurePasswordStoreApplicationSettingsApplication (Maybe Text)
securePasswordStoreApplicationSettingsApplicationOptionalField3L f SecurePasswordStoreApplicationSettingsApplication{..} = (\securePasswordStoreApplicationSettingsApplicationOptionalField3 -> SecurePasswordStoreApplicationSettingsApplication { securePasswordStoreApplicationSettingsApplicationOptionalField3, ..} ) <$> f securePasswordStoreApplicationSettingsApplicationOptionalField3
{-# INLINE securePasswordStoreApplicationSettingsApplicationOptionalField3L #-}

-- | 'securePasswordStoreApplicationSettingsApplicationOptionalField3Value' Lens
securePasswordStoreApplicationSettingsApplicationOptionalField3ValueL :: Lens_' SecurePasswordStoreApplicationSettingsApplication (Maybe Text)
securePasswordStoreApplicationSettingsApplicationOptionalField3ValueL f SecurePasswordStoreApplicationSettingsApplication{..} = (\securePasswordStoreApplicationSettingsApplicationOptionalField3Value -> SecurePasswordStoreApplicationSettingsApplication { securePasswordStoreApplicationSettingsApplicationOptionalField3Value, ..} ) <$> f securePasswordStoreApplicationSettingsApplicationOptionalField3Value
{-# INLINE securePasswordStoreApplicationSettingsApplicationOptionalField3ValueL #-}

-- | 'securePasswordStoreApplicationSettingsApplicationPasswordField' Lens
securePasswordStoreApplicationSettingsApplicationPasswordFieldL :: Lens_' SecurePasswordStoreApplicationSettingsApplication (Maybe Text)
securePasswordStoreApplicationSettingsApplicationPasswordFieldL f SecurePasswordStoreApplicationSettingsApplication{..} = (\securePasswordStoreApplicationSettingsApplicationPasswordField -> SecurePasswordStoreApplicationSettingsApplication { securePasswordStoreApplicationSettingsApplicationPasswordField, ..} ) <$> f securePasswordStoreApplicationSettingsApplicationPasswordField
{-# INLINE securePasswordStoreApplicationSettingsApplicationPasswordFieldL #-}

-- | 'securePasswordStoreApplicationSettingsApplicationUrl' Lens
securePasswordStoreApplicationSettingsApplicationUrlL :: Lens_' SecurePasswordStoreApplicationSettingsApplication (Maybe Text)
securePasswordStoreApplicationSettingsApplicationUrlL f SecurePasswordStoreApplicationSettingsApplication{..} = (\securePasswordStoreApplicationSettingsApplicationUrl -> SecurePasswordStoreApplicationSettingsApplication { securePasswordStoreApplicationSettingsApplicationUrl, ..} ) <$> f securePasswordStoreApplicationSettingsApplicationUrl
{-# INLINE securePasswordStoreApplicationSettingsApplicationUrlL #-}

-- | 'securePasswordStoreApplicationSettingsApplicationUsernameField' Lens
securePasswordStoreApplicationSettingsApplicationUsernameFieldL :: Lens_' SecurePasswordStoreApplicationSettingsApplication (Maybe Text)
securePasswordStoreApplicationSettingsApplicationUsernameFieldL f SecurePasswordStoreApplicationSettingsApplication{..} = (\securePasswordStoreApplicationSettingsApplicationUsernameField -> SecurePasswordStoreApplicationSettingsApplication { securePasswordStoreApplicationSettingsApplicationUsernameField, ..} ) <$> f securePasswordStoreApplicationSettingsApplicationUsernameField
{-# INLINE securePasswordStoreApplicationSettingsApplicationUsernameFieldL #-}



-- * SecurityQuestion

-- | 'securityQuestionAnswer' Lens
securityQuestionAnswerL :: Lens_' SecurityQuestion (Maybe Text)
securityQuestionAnswerL f SecurityQuestion{..} = (\securityQuestionAnswer -> SecurityQuestion { securityQuestionAnswer, ..} ) <$> f securityQuestionAnswer
{-# INLINE securityQuestionAnswerL #-}

-- | 'securityQuestionQuestion' Lens
securityQuestionQuestionL :: Lens_' SecurityQuestion (Maybe Text)
securityQuestionQuestionL f SecurityQuestion{..} = (\securityQuestionQuestion -> SecurityQuestion { securityQuestionQuestion, ..} ) <$> f securityQuestionQuestion
{-# INLINE securityQuestionQuestionL #-}

-- | 'securityQuestionQuestionText' Lens
securityQuestionQuestionTextL :: Lens_' SecurityQuestion (Maybe Text)
securityQuestionQuestionTextL f SecurityQuestion{..} = (\securityQuestionQuestionText -> SecurityQuestion { securityQuestionQuestionText, ..} ) <$> f securityQuestionQuestionText
{-# INLINE securityQuestionQuestionTextL #-}



-- * SecurityQuestionUserFactor

-- | 'securityQuestionUserFactorProfile' Lens
securityQuestionUserFactorProfileL :: Lens_' SecurityQuestionUserFactor (Maybe SecurityQuestionUserFactorProfile)
securityQuestionUserFactorProfileL f SecurityQuestionUserFactor{..} = (\securityQuestionUserFactorProfile -> SecurityQuestionUserFactor { securityQuestionUserFactorProfile, ..} ) <$> f securityQuestionUserFactorProfile
{-# INLINE securityQuestionUserFactorProfileL #-}



-- * SecurityQuestionUserFactorProfile

-- | 'securityQuestionUserFactorProfileAnswer' Lens
securityQuestionUserFactorProfileAnswerL :: Lens_' SecurityQuestionUserFactorProfile (Maybe Text)
securityQuestionUserFactorProfileAnswerL f SecurityQuestionUserFactorProfile{..} = (\securityQuestionUserFactorProfileAnswer -> SecurityQuestionUserFactorProfile { securityQuestionUserFactorProfileAnswer, ..} ) <$> f securityQuestionUserFactorProfileAnswer
{-# INLINE securityQuestionUserFactorProfileAnswerL #-}

-- | 'securityQuestionUserFactorProfileQuestion' Lens
securityQuestionUserFactorProfileQuestionL :: Lens_' SecurityQuestionUserFactorProfile (Maybe Text)
securityQuestionUserFactorProfileQuestionL f SecurityQuestionUserFactorProfile{..} = (\securityQuestionUserFactorProfileQuestion -> SecurityQuestionUserFactorProfile { securityQuestionUserFactorProfileQuestion, ..} ) <$> f securityQuestionUserFactorProfileQuestion
{-# INLINE securityQuestionUserFactorProfileQuestionL #-}

-- | 'securityQuestionUserFactorProfileQuestionText' Lens
securityQuestionUserFactorProfileQuestionTextL :: Lens_' SecurityQuestionUserFactorProfile (Maybe Text)
securityQuestionUserFactorProfileQuestionTextL f SecurityQuestionUserFactorProfile{..} = (\securityQuestionUserFactorProfileQuestionText -> SecurityQuestionUserFactorProfile { securityQuestionUserFactorProfileQuestionText, ..} ) <$> f securityQuestionUserFactorProfileQuestionText
{-# INLINE securityQuestionUserFactorProfileQuestionTextL #-}



-- * SeedEnum



-- * Session

-- | 'sessionLinks' Lens
sessionLinksL :: Lens_' Session (Maybe (Map.Map String A.Value))
sessionLinksL f Session{..} = (\sessionLinks -> Session { sessionLinks, ..} ) <$> f sessionLinks
{-# INLINE sessionLinksL #-}

-- | 'sessionAmr' Lens
sessionAmrL :: Lens_' Session (Maybe [SessionAuthenticationMethod])
sessionAmrL f Session{..} = (\sessionAmr -> Session { sessionAmr, ..} ) <$> f sessionAmr
{-# INLINE sessionAmrL #-}

-- | 'sessionCreatedAt' Lens
sessionCreatedAtL :: Lens_' Session (Maybe DateTime)
sessionCreatedAtL f Session{..} = (\sessionCreatedAt -> Session { sessionCreatedAt, ..} ) <$> f sessionCreatedAt
{-# INLINE sessionCreatedAtL #-}

-- | 'sessionExpiresAt' Lens
sessionExpiresAtL :: Lens_' Session (Maybe DateTime)
sessionExpiresAtL f Session{..} = (\sessionExpiresAt -> Session { sessionExpiresAt, ..} ) <$> f sessionExpiresAt
{-# INLINE sessionExpiresAtL #-}

-- | 'sessionId' Lens
sessionIdL :: Lens_' Session (Maybe Text)
sessionIdL f Session{..} = (\sessionId -> Session { sessionId, ..} ) <$> f sessionId
{-# INLINE sessionIdL #-}

-- | 'sessionIdp' Lens
sessionIdpL :: Lens_' Session (Maybe SessionIdentityProvider)
sessionIdpL f Session{..} = (\sessionIdp -> Session { sessionIdp, ..} ) <$> f sessionIdp
{-# INLINE sessionIdpL #-}

-- | 'sessionLastFactorVerification' Lens
sessionLastFactorVerificationL :: Lens_' Session (Maybe DateTime)
sessionLastFactorVerificationL f Session{..} = (\sessionLastFactorVerification -> Session { sessionLastFactorVerification, ..} ) <$> f sessionLastFactorVerification
{-# INLINE sessionLastFactorVerificationL #-}

-- | 'sessionLastPasswordVerification' Lens
sessionLastPasswordVerificationL :: Lens_' Session (Maybe DateTime)
sessionLastPasswordVerificationL f Session{..} = (\sessionLastPasswordVerification -> Session { sessionLastPasswordVerification, ..} ) <$> f sessionLastPasswordVerification
{-# INLINE sessionLastPasswordVerificationL #-}

-- | 'sessionLogin' Lens
sessionLoginL :: Lens_' Session (Maybe Text)
sessionLoginL f Session{..} = (\sessionLogin -> Session { sessionLogin, ..} ) <$> f sessionLogin
{-# INLINE sessionLoginL #-}

-- | 'sessionStatus' Lens
sessionStatusL :: Lens_' Session (Maybe SessionStatus)
sessionStatusL f Session{..} = (\sessionStatus -> Session { sessionStatus, ..} ) <$> f sessionStatus
{-# INLINE sessionStatusL #-}

-- | 'sessionUserId' Lens
sessionUserIdL :: Lens_' Session (Maybe Text)
sessionUserIdL f Session{..} = (\sessionUserId -> Session { sessionUserId, ..} ) <$> f sessionUserId
{-# INLINE sessionUserIdL #-}



-- * SessionAuthenticationMethod



-- * SessionIdentityProvider

-- | 'sessionIdentityProviderId' Lens
sessionIdentityProviderIdL :: Lens_' SessionIdentityProvider (Maybe Text)
sessionIdentityProviderIdL f SessionIdentityProvider{..} = (\sessionIdentityProviderId -> SessionIdentityProvider { sessionIdentityProviderId, ..} ) <$> f sessionIdentityProviderId
{-# INLINE sessionIdentityProviderIdL #-}

-- | 'sessionIdentityProviderType' Lens
sessionIdentityProviderTypeL :: Lens_' SessionIdentityProvider (Maybe SessionIdentityProviderType)
sessionIdentityProviderTypeL f SessionIdentityProvider{..} = (\sessionIdentityProviderType -> SessionIdentityProvider { sessionIdentityProviderType, ..} ) <$> f sessionIdentityProviderType
{-# INLINE sessionIdentityProviderTypeL #-}



-- * SessionIdentityProviderType



-- * SessionStatus



-- * SignInPageTouchPointVariant



-- * SignOnInlineHook

-- | 'signOnInlineHookId' Lens
signOnInlineHookIdL :: Lens_' SignOnInlineHook (Maybe Text)
signOnInlineHookIdL f SignOnInlineHook{..} = (\signOnInlineHookId -> SignOnInlineHook { signOnInlineHookId, ..} ) <$> f signOnInlineHookId
{-# INLINE signOnInlineHookIdL #-}



-- * SingleLogout

-- | 'singleLogoutEnabled' Lens
singleLogoutEnabledL :: Lens_' SingleLogout (Maybe Bool)
singleLogoutEnabledL f SingleLogout{..} = (\singleLogoutEnabled -> SingleLogout { singleLogoutEnabled, ..} ) <$> f singleLogoutEnabled
{-# INLINE singleLogoutEnabledL #-}

-- | 'singleLogoutIssuer' Lens
singleLogoutIssuerL :: Lens_' SingleLogout (Maybe Text)
singleLogoutIssuerL f SingleLogout{..} = (\singleLogoutIssuer -> SingleLogout { singleLogoutIssuer, ..} ) <$> f singleLogoutIssuer
{-# INLINE singleLogoutIssuerL #-}

-- | 'singleLogoutLogoutUrl' Lens
singleLogoutLogoutUrlL :: Lens_' SingleLogout (Maybe Text)
singleLogoutLogoutUrlL f SingleLogout{..} = (\singleLogoutLogoutUrl -> SingleLogout { singleLogoutLogoutUrl, ..} ) <$> f singleLogoutLogoutUrl
{-# INLINE singleLogoutLogoutUrlL #-}



-- * SmsTemplate

-- | 'smsTemplateCreated' Lens
smsTemplateCreatedL :: Lens_' SmsTemplate (Maybe DateTime)
smsTemplateCreatedL f SmsTemplate{..} = (\smsTemplateCreated -> SmsTemplate { smsTemplateCreated, ..} ) <$> f smsTemplateCreated
{-# INLINE smsTemplateCreatedL #-}

-- | 'smsTemplateId' Lens
smsTemplateIdL :: Lens_' SmsTemplate (Maybe Text)
smsTemplateIdL f SmsTemplate{..} = (\smsTemplateId -> SmsTemplate { smsTemplateId, ..} ) <$> f smsTemplateId
{-# INLINE smsTemplateIdL #-}

-- | 'smsTemplateLastUpdated' Lens
smsTemplateLastUpdatedL :: Lens_' SmsTemplate (Maybe DateTime)
smsTemplateLastUpdatedL f SmsTemplate{..} = (\smsTemplateLastUpdated -> SmsTemplate { smsTemplateLastUpdated, ..} ) <$> f smsTemplateLastUpdated
{-# INLINE smsTemplateLastUpdatedL #-}

-- | 'smsTemplateName' Lens
smsTemplateNameL :: Lens_' SmsTemplate (Maybe Text)
smsTemplateNameL f SmsTemplate{..} = (\smsTemplateName -> SmsTemplate { smsTemplateName, ..} ) <$> f smsTemplateName
{-# INLINE smsTemplateNameL #-}

-- | 'smsTemplateTemplate' Lens
smsTemplateTemplateL :: Lens_' SmsTemplate (Maybe Text)
smsTemplateTemplateL f SmsTemplate{..} = (\smsTemplateTemplate -> SmsTemplate { smsTemplateTemplate, ..} ) <$> f smsTemplateTemplate
{-# INLINE smsTemplateTemplateL #-}

-- | 'smsTemplateTranslations' Lens
smsTemplateTranslationsL :: Lens_' SmsTemplate (Maybe A.Value)
smsTemplateTranslationsL f SmsTemplate{..} = (\smsTemplateTranslations -> SmsTemplate { smsTemplateTranslations, ..} ) <$> f smsTemplateTranslations
{-# INLINE smsTemplateTranslationsL #-}

-- | 'smsTemplateType' Lens
smsTemplateTypeL :: Lens_' SmsTemplate (Maybe SmsTemplateType)
smsTemplateTypeL f SmsTemplate{..} = (\smsTemplateType -> SmsTemplate { smsTemplateType, ..} ) <$> f smsTemplateType
{-# INLINE smsTemplateTypeL #-}



-- * SmsTemplateType



-- * SmsUserFactor

-- | 'smsUserFactorProfile' Lens
smsUserFactorProfileL :: Lens_' SmsUserFactor (Maybe SmsUserFactorProfile)
smsUserFactorProfileL f SmsUserFactor{..} = (\smsUserFactorProfile -> SmsUserFactor { smsUserFactorProfile, ..} ) <$> f smsUserFactorProfile
{-# INLINE smsUserFactorProfileL #-}



-- * SmsUserFactorProfile

-- | 'smsUserFactorProfilePhoneNumber' Lens
smsUserFactorProfilePhoneNumberL :: Lens_' SmsUserFactorProfile (Maybe Text)
smsUserFactorProfilePhoneNumberL f SmsUserFactorProfile{..} = (\smsUserFactorProfilePhoneNumber -> SmsUserFactorProfile { smsUserFactorProfilePhoneNumber, ..} ) <$> f smsUserFactorProfilePhoneNumber
{-# INLINE smsUserFactorProfilePhoneNumberL #-}



-- * SocialAuthToken

-- | 'socialAuthTokenExpiresAt' Lens
socialAuthTokenExpiresAtL :: Lens_' SocialAuthToken (Maybe DateTime)
socialAuthTokenExpiresAtL f SocialAuthToken{..} = (\socialAuthTokenExpiresAt -> SocialAuthToken { socialAuthTokenExpiresAt, ..} ) <$> f socialAuthTokenExpiresAt
{-# INLINE socialAuthTokenExpiresAtL #-}

-- | 'socialAuthTokenId' Lens
socialAuthTokenIdL :: Lens_' SocialAuthToken (Maybe Text)
socialAuthTokenIdL f SocialAuthToken{..} = (\socialAuthTokenId -> SocialAuthToken { socialAuthTokenId, ..} ) <$> f socialAuthTokenId
{-# INLINE socialAuthTokenIdL #-}

-- | 'socialAuthTokenScopes' Lens
socialAuthTokenScopesL :: Lens_' SocialAuthToken (Maybe [Text])
socialAuthTokenScopesL f SocialAuthToken{..} = (\socialAuthTokenScopes -> SocialAuthToken { socialAuthTokenScopes, ..} ) <$> f socialAuthTokenScopes
{-# INLINE socialAuthTokenScopesL #-}

-- | 'socialAuthTokenToken' Lens
socialAuthTokenTokenL :: Lens_' SocialAuthToken (Maybe Text)
socialAuthTokenTokenL f SocialAuthToken{..} = (\socialAuthTokenToken -> SocialAuthToken { socialAuthTokenToken, ..} ) <$> f socialAuthTokenToken
{-# INLINE socialAuthTokenTokenL #-}

-- | 'socialAuthTokenTokenAuthScheme' Lens
socialAuthTokenTokenAuthSchemeL :: Lens_' SocialAuthToken (Maybe Text)
socialAuthTokenTokenAuthSchemeL f SocialAuthToken{..} = (\socialAuthTokenTokenAuthScheme -> SocialAuthToken { socialAuthTokenTokenAuthScheme, ..} ) <$> f socialAuthTokenTokenAuthScheme
{-# INLINE socialAuthTokenTokenAuthSchemeL #-}

-- | 'socialAuthTokenTokenType' Lens
socialAuthTokenTokenTypeL :: Lens_' SocialAuthToken (Maybe Text)
socialAuthTokenTokenTypeL f SocialAuthToken{..} = (\socialAuthTokenTokenType -> SocialAuthToken { socialAuthTokenTokenType, ..} ) <$> f socialAuthTokenTokenType
{-# INLINE socialAuthTokenTokenTypeL #-}



-- * SpCertificate

-- | 'spCertificateX5c' Lens
spCertificateX5cL :: Lens_' SpCertificate (Maybe [Text])
spCertificateX5cL f SpCertificate{..} = (\spCertificateX5c -> SpCertificate { spCertificateX5c, ..} ) <$> f spCertificateX5c
{-# INLINE spCertificateX5cL #-}



-- * Subscription

-- | 'subscriptionNotificationType' Lens
subscriptionNotificationTypeL :: Lens_' Subscription (Maybe NotificationType)
subscriptionNotificationTypeL f Subscription{..} = (\subscriptionNotificationType -> Subscription { subscriptionNotificationType, ..} ) <$> f subscriptionNotificationType
{-# INLINE subscriptionNotificationTypeL #-}

-- | 'subscriptionChannels' Lens
subscriptionChannelsL :: Lens_' Subscription (Maybe [Text])
subscriptionChannelsL f Subscription{..} = (\subscriptionChannels -> Subscription { subscriptionChannels, ..} ) <$> f subscriptionChannels
{-# INLINE subscriptionChannelsL #-}

-- | 'subscriptionStatus' Lens
subscriptionStatusL :: Lens_' Subscription (Maybe SubscriptionStatus)
subscriptionStatusL f Subscription{..} = (\subscriptionStatus -> Subscription { subscriptionStatus, ..} ) <$> f subscriptionStatus
{-# INLINE subscriptionStatusL #-}

-- | 'subscriptionLinks' Lens
subscriptionLinksL :: Lens_' Subscription (Maybe (Map.Map String A.Value))
subscriptionLinksL f Subscription{..} = (\subscriptionLinks -> Subscription { subscriptionLinks, ..} ) <$> f subscriptionLinks
{-# INLINE subscriptionLinksL #-}



-- * SubscriptionStatus



-- * SwaApplication

-- | 'swaApplicationName' Lens
swaApplicationNameL :: Lens_' SwaApplication (Maybe A.Value)
swaApplicationNameL f SwaApplication{..} = (\swaApplicationName -> SwaApplication { swaApplicationName, ..} ) <$> f swaApplicationName
{-# INLINE swaApplicationNameL #-}

-- | 'swaApplicationSettings' Lens
swaApplicationSettingsL :: Lens_' SwaApplication (Maybe SwaApplicationSettings)
swaApplicationSettingsL f SwaApplication{..} = (\swaApplicationSettings -> SwaApplication { swaApplicationSettings, ..} ) <$> f swaApplicationSettings
{-# INLINE swaApplicationSettingsL #-}



-- * SwaApplicationSettings

-- | 'swaApplicationSettingsApp' Lens
swaApplicationSettingsAppL :: Lens_' SwaApplicationSettings (Maybe SwaApplicationSettingsApplication)
swaApplicationSettingsAppL f SwaApplicationSettings{..} = (\swaApplicationSettingsApp -> SwaApplicationSettings { swaApplicationSettingsApp, ..} ) <$> f swaApplicationSettingsApp
{-# INLINE swaApplicationSettingsAppL #-}



-- * SwaApplicationSettingsApplication

-- | 'swaApplicationSettingsApplicationButtonField' Lens
swaApplicationSettingsApplicationButtonFieldL :: Lens_' SwaApplicationSettingsApplication (Maybe Text)
swaApplicationSettingsApplicationButtonFieldL f SwaApplicationSettingsApplication{..} = (\swaApplicationSettingsApplicationButtonField -> SwaApplicationSettingsApplication { swaApplicationSettingsApplicationButtonField, ..} ) <$> f swaApplicationSettingsApplicationButtonField
{-# INLINE swaApplicationSettingsApplicationButtonFieldL #-}

-- | 'swaApplicationSettingsApplicationLoginUrlRegex' Lens
swaApplicationSettingsApplicationLoginUrlRegexL :: Lens_' SwaApplicationSettingsApplication (Maybe Text)
swaApplicationSettingsApplicationLoginUrlRegexL f SwaApplicationSettingsApplication{..} = (\swaApplicationSettingsApplicationLoginUrlRegex -> SwaApplicationSettingsApplication { swaApplicationSettingsApplicationLoginUrlRegex, ..} ) <$> f swaApplicationSettingsApplicationLoginUrlRegex
{-# INLINE swaApplicationSettingsApplicationLoginUrlRegexL #-}

-- | 'swaApplicationSettingsApplicationPasswordField' Lens
swaApplicationSettingsApplicationPasswordFieldL :: Lens_' SwaApplicationSettingsApplication (Maybe Text)
swaApplicationSettingsApplicationPasswordFieldL f SwaApplicationSettingsApplication{..} = (\swaApplicationSettingsApplicationPasswordField -> SwaApplicationSettingsApplication { swaApplicationSettingsApplicationPasswordField, ..} ) <$> f swaApplicationSettingsApplicationPasswordField
{-# INLINE swaApplicationSettingsApplicationPasswordFieldL #-}

-- | 'swaApplicationSettingsApplicationUrl' Lens
swaApplicationSettingsApplicationUrlL :: Lens_' SwaApplicationSettingsApplication (Maybe Text)
swaApplicationSettingsApplicationUrlL f SwaApplicationSettingsApplication{..} = (\swaApplicationSettingsApplicationUrl -> SwaApplicationSettingsApplication { swaApplicationSettingsApplicationUrl, ..} ) <$> f swaApplicationSettingsApplicationUrl
{-# INLINE swaApplicationSettingsApplicationUrlL #-}

-- | 'swaApplicationSettingsApplicationUsernameField' Lens
swaApplicationSettingsApplicationUsernameFieldL :: Lens_' SwaApplicationSettingsApplication (Maybe Text)
swaApplicationSettingsApplicationUsernameFieldL f SwaApplicationSettingsApplication{..} = (\swaApplicationSettingsApplicationUsernameField -> SwaApplicationSettingsApplication { swaApplicationSettingsApplicationUsernameField, ..} ) <$> f swaApplicationSettingsApplicationUsernameField
{-# INLINE swaApplicationSettingsApplicationUsernameFieldL #-}

-- | 'swaApplicationSettingsApplicationRedirectUrl' Lens
swaApplicationSettingsApplicationRedirectUrlL :: Lens_' SwaApplicationSettingsApplication (Maybe Text)
swaApplicationSettingsApplicationRedirectUrlL f SwaApplicationSettingsApplication{..} = (\swaApplicationSettingsApplicationRedirectUrl -> SwaApplicationSettingsApplication { swaApplicationSettingsApplicationRedirectUrl, ..} ) <$> f swaApplicationSettingsApplicationRedirectUrl
{-# INLINE swaApplicationSettingsApplicationRedirectUrlL #-}

-- | 'swaApplicationSettingsApplicationCheckbox' Lens
swaApplicationSettingsApplicationCheckboxL :: Lens_' SwaApplicationSettingsApplication (Maybe Text)
swaApplicationSettingsApplicationCheckboxL f SwaApplicationSettingsApplication{..} = (\swaApplicationSettingsApplicationCheckbox -> SwaApplicationSettingsApplication { swaApplicationSettingsApplicationCheckbox, ..} ) <$> f swaApplicationSettingsApplicationCheckbox
{-# INLINE swaApplicationSettingsApplicationCheckboxL #-}



-- * SwaThreeFieldApplication

-- | 'swaThreeFieldApplicationName' Lens
swaThreeFieldApplicationNameL :: Lens_' SwaThreeFieldApplication (Maybe A.Value)
swaThreeFieldApplicationNameL f SwaThreeFieldApplication{..} = (\swaThreeFieldApplicationName -> SwaThreeFieldApplication { swaThreeFieldApplicationName, ..} ) <$> f swaThreeFieldApplicationName
{-# INLINE swaThreeFieldApplicationNameL #-}

-- | 'swaThreeFieldApplicationSettings' Lens
swaThreeFieldApplicationSettingsL :: Lens_' SwaThreeFieldApplication (Maybe SwaThreeFieldApplicationSettings)
swaThreeFieldApplicationSettingsL f SwaThreeFieldApplication{..} = (\swaThreeFieldApplicationSettings -> SwaThreeFieldApplication { swaThreeFieldApplicationSettings, ..} ) <$> f swaThreeFieldApplicationSettings
{-# INLINE swaThreeFieldApplicationSettingsL #-}



-- * SwaThreeFieldApplicationSettings

-- | 'swaThreeFieldApplicationSettingsApp' Lens
swaThreeFieldApplicationSettingsAppL :: Lens_' SwaThreeFieldApplicationSettings (Maybe SwaThreeFieldApplicationSettingsApplication)
swaThreeFieldApplicationSettingsAppL f SwaThreeFieldApplicationSettings{..} = (\swaThreeFieldApplicationSettingsApp -> SwaThreeFieldApplicationSettings { swaThreeFieldApplicationSettingsApp, ..} ) <$> f swaThreeFieldApplicationSettingsApp
{-# INLINE swaThreeFieldApplicationSettingsAppL #-}



-- * SwaThreeFieldApplicationSettingsApplication

-- | 'swaThreeFieldApplicationSettingsApplicationButtonSelector' Lens
swaThreeFieldApplicationSettingsApplicationButtonSelectorL :: Lens_' SwaThreeFieldApplicationSettingsApplication (Maybe Text)
swaThreeFieldApplicationSettingsApplicationButtonSelectorL f SwaThreeFieldApplicationSettingsApplication{..} = (\swaThreeFieldApplicationSettingsApplicationButtonSelector -> SwaThreeFieldApplicationSettingsApplication { swaThreeFieldApplicationSettingsApplicationButtonSelector, ..} ) <$> f swaThreeFieldApplicationSettingsApplicationButtonSelector
{-# INLINE swaThreeFieldApplicationSettingsApplicationButtonSelectorL #-}

-- | 'swaThreeFieldApplicationSettingsApplicationExtraFieldSelector' Lens
swaThreeFieldApplicationSettingsApplicationExtraFieldSelectorL :: Lens_' SwaThreeFieldApplicationSettingsApplication (Maybe Text)
swaThreeFieldApplicationSettingsApplicationExtraFieldSelectorL f SwaThreeFieldApplicationSettingsApplication{..} = (\swaThreeFieldApplicationSettingsApplicationExtraFieldSelector -> SwaThreeFieldApplicationSettingsApplication { swaThreeFieldApplicationSettingsApplicationExtraFieldSelector, ..} ) <$> f swaThreeFieldApplicationSettingsApplicationExtraFieldSelector
{-# INLINE swaThreeFieldApplicationSettingsApplicationExtraFieldSelectorL #-}

-- | 'swaThreeFieldApplicationSettingsApplicationExtraFieldValue' Lens
swaThreeFieldApplicationSettingsApplicationExtraFieldValueL :: Lens_' SwaThreeFieldApplicationSettingsApplication (Maybe Text)
swaThreeFieldApplicationSettingsApplicationExtraFieldValueL f SwaThreeFieldApplicationSettingsApplication{..} = (\swaThreeFieldApplicationSettingsApplicationExtraFieldValue -> SwaThreeFieldApplicationSettingsApplication { swaThreeFieldApplicationSettingsApplicationExtraFieldValue, ..} ) <$> f swaThreeFieldApplicationSettingsApplicationExtraFieldValue
{-# INLINE swaThreeFieldApplicationSettingsApplicationExtraFieldValueL #-}

-- | 'swaThreeFieldApplicationSettingsApplicationLoginUrlRegex' Lens
swaThreeFieldApplicationSettingsApplicationLoginUrlRegexL :: Lens_' SwaThreeFieldApplicationSettingsApplication (Maybe Text)
swaThreeFieldApplicationSettingsApplicationLoginUrlRegexL f SwaThreeFieldApplicationSettingsApplication{..} = (\swaThreeFieldApplicationSettingsApplicationLoginUrlRegex -> SwaThreeFieldApplicationSettingsApplication { swaThreeFieldApplicationSettingsApplicationLoginUrlRegex, ..} ) <$> f swaThreeFieldApplicationSettingsApplicationLoginUrlRegex
{-# INLINE swaThreeFieldApplicationSettingsApplicationLoginUrlRegexL #-}

-- | 'swaThreeFieldApplicationSettingsApplicationPasswordSelector' Lens
swaThreeFieldApplicationSettingsApplicationPasswordSelectorL :: Lens_' SwaThreeFieldApplicationSettingsApplication (Maybe Text)
swaThreeFieldApplicationSettingsApplicationPasswordSelectorL f SwaThreeFieldApplicationSettingsApplication{..} = (\swaThreeFieldApplicationSettingsApplicationPasswordSelector -> SwaThreeFieldApplicationSettingsApplication { swaThreeFieldApplicationSettingsApplicationPasswordSelector, ..} ) <$> f swaThreeFieldApplicationSettingsApplicationPasswordSelector
{-# INLINE swaThreeFieldApplicationSettingsApplicationPasswordSelectorL #-}

-- | 'swaThreeFieldApplicationSettingsApplicationTargetUrl' Lens
swaThreeFieldApplicationSettingsApplicationTargetUrlL :: Lens_' SwaThreeFieldApplicationSettingsApplication (Maybe Text)
swaThreeFieldApplicationSettingsApplicationTargetUrlL f SwaThreeFieldApplicationSettingsApplication{..} = (\swaThreeFieldApplicationSettingsApplicationTargetUrl -> SwaThreeFieldApplicationSettingsApplication { swaThreeFieldApplicationSettingsApplicationTargetUrl, ..} ) <$> f swaThreeFieldApplicationSettingsApplicationTargetUrl
{-# INLINE swaThreeFieldApplicationSettingsApplicationTargetUrlL #-}

-- | 'swaThreeFieldApplicationSettingsApplicationUserNameSelector' Lens
swaThreeFieldApplicationSettingsApplicationUserNameSelectorL :: Lens_' SwaThreeFieldApplicationSettingsApplication (Maybe Text)
swaThreeFieldApplicationSettingsApplicationUserNameSelectorL f SwaThreeFieldApplicationSettingsApplication{..} = (\swaThreeFieldApplicationSettingsApplicationUserNameSelector -> SwaThreeFieldApplicationSettingsApplication { swaThreeFieldApplicationSettingsApplicationUserNameSelector, ..} ) <$> f swaThreeFieldApplicationSettingsApplicationUserNameSelector
{-# INLINE swaThreeFieldApplicationSettingsApplicationUserNameSelectorL #-}



-- * TempPassword

-- | 'tempPasswordTempPassword' Lens
tempPasswordTempPasswordL :: Lens_' TempPassword (Maybe Text)
tempPasswordTempPasswordL f TempPassword{..} = (\tempPasswordTempPassword -> TempPassword { tempPasswordTempPassword, ..} ) <$> f tempPasswordTempPassword
{-# INLINE tempPasswordTempPasswordL #-}



-- * Theme

-- | 'themeBackgroundImage' Lens
themeBackgroundImageL :: Lens_' Theme (Maybe Text)
themeBackgroundImageL f Theme{..} = (\themeBackgroundImage -> Theme { themeBackgroundImage, ..} ) <$> f themeBackgroundImage
{-# INLINE themeBackgroundImageL #-}

-- | 'themePrimaryColorHex' Lens
themePrimaryColorHexL :: Lens_' Theme (Maybe Text)
themePrimaryColorHexL f Theme{..} = (\themePrimaryColorHex -> Theme { themePrimaryColorHex, ..} ) <$> f themePrimaryColorHex
{-# INLINE themePrimaryColorHexL #-}

-- | 'themePrimaryColorContrastHex' Lens
themePrimaryColorContrastHexL :: Lens_' Theme (Maybe Text)
themePrimaryColorContrastHexL f Theme{..} = (\themePrimaryColorContrastHex -> Theme { themePrimaryColorContrastHex, ..} ) <$> f themePrimaryColorContrastHex
{-# INLINE themePrimaryColorContrastHexL #-}

-- | 'themeSecondaryColorHex' Lens
themeSecondaryColorHexL :: Lens_' Theme (Maybe Text)
themeSecondaryColorHexL f Theme{..} = (\themeSecondaryColorHex -> Theme { themeSecondaryColorHex, ..} ) <$> f themeSecondaryColorHex
{-# INLINE themeSecondaryColorHexL #-}

-- | 'themeSecondaryColorContrastHex' Lens
themeSecondaryColorContrastHexL :: Lens_' Theme (Maybe Text)
themeSecondaryColorContrastHexL f Theme{..} = (\themeSecondaryColorContrastHex -> Theme { themeSecondaryColorContrastHex, ..} ) <$> f themeSecondaryColorContrastHex
{-# INLINE themeSecondaryColorContrastHexL #-}

-- | 'themeSignInPageTouchPointVariant' Lens
themeSignInPageTouchPointVariantL :: Lens_' Theme (Maybe SignInPageTouchPointVariant)
themeSignInPageTouchPointVariantL f Theme{..} = (\themeSignInPageTouchPointVariant -> Theme { themeSignInPageTouchPointVariant, ..} ) <$> f themeSignInPageTouchPointVariant
{-# INLINE themeSignInPageTouchPointVariantL #-}

-- | 'themeEndUserDashboardTouchPointVariant' Lens
themeEndUserDashboardTouchPointVariantL :: Lens_' Theme (Maybe EndUserDashboardTouchPointVariant)
themeEndUserDashboardTouchPointVariantL f Theme{..} = (\themeEndUserDashboardTouchPointVariant -> Theme { themeEndUserDashboardTouchPointVariant, ..} ) <$> f themeEndUserDashboardTouchPointVariant
{-# INLINE themeEndUserDashboardTouchPointVariantL #-}

-- | 'themeErrorPageTouchPointVariant' Lens
themeErrorPageTouchPointVariantL :: Lens_' Theme (Maybe ErrorPageTouchPointVariant)
themeErrorPageTouchPointVariantL f Theme{..} = (\themeErrorPageTouchPointVariant -> Theme { themeErrorPageTouchPointVariant, ..} ) <$> f themeErrorPageTouchPointVariant
{-# INLINE themeErrorPageTouchPointVariantL #-}

-- | 'themeEmailTemplateTouchPointVariant' Lens
themeEmailTemplateTouchPointVariantL :: Lens_' Theme (Maybe EmailTemplateTouchPointVariant)
themeEmailTemplateTouchPointVariantL f Theme{..} = (\themeEmailTemplateTouchPointVariant -> Theme { themeEmailTemplateTouchPointVariant, ..} ) <$> f themeEmailTemplateTouchPointVariant
{-# INLINE themeEmailTemplateTouchPointVariantL #-}

-- | 'themeLinks' Lens
themeLinksL :: Lens_' Theme (Maybe (Map.Map String A.Value))
themeLinksL f Theme{..} = (\themeLinks -> Theme { themeLinks, ..} ) <$> f themeLinks
{-# INLINE themeLinksL #-}



-- * ThemeResponse

-- | 'themeResponseId' Lens
themeResponseIdL :: Lens_' ThemeResponse (Maybe Text)
themeResponseIdL f ThemeResponse{..} = (\themeResponseId -> ThemeResponse { themeResponseId, ..} ) <$> f themeResponseId
{-# INLINE themeResponseIdL #-}

-- | 'themeResponseLogo' Lens
themeResponseLogoL :: Lens_' ThemeResponse (Maybe Text)
themeResponseLogoL f ThemeResponse{..} = (\themeResponseLogo -> ThemeResponse { themeResponseLogo, ..} ) <$> f themeResponseLogo
{-# INLINE themeResponseLogoL #-}

-- | 'themeResponseFavicon' Lens
themeResponseFaviconL :: Lens_' ThemeResponse (Maybe Text)
themeResponseFaviconL f ThemeResponse{..} = (\themeResponseFavicon -> ThemeResponse { themeResponseFavicon, ..} ) <$> f themeResponseFavicon
{-# INLINE themeResponseFaviconL #-}

-- | 'themeResponseBackgroundImage' Lens
themeResponseBackgroundImageL :: Lens_' ThemeResponse (Maybe Text)
themeResponseBackgroundImageL f ThemeResponse{..} = (\themeResponseBackgroundImage -> ThemeResponse { themeResponseBackgroundImage, ..} ) <$> f themeResponseBackgroundImage
{-# INLINE themeResponseBackgroundImageL #-}

-- | 'themeResponsePrimaryColorHex' Lens
themeResponsePrimaryColorHexL :: Lens_' ThemeResponse (Maybe Text)
themeResponsePrimaryColorHexL f ThemeResponse{..} = (\themeResponsePrimaryColorHex -> ThemeResponse { themeResponsePrimaryColorHex, ..} ) <$> f themeResponsePrimaryColorHex
{-# INLINE themeResponsePrimaryColorHexL #-}

-- | 'themeResponsePrimaryColorContrastHex' Lens
themeResponsePrimaryColorContrastHexL :: Lens_' ThemeResponse (Maybe Text)
themeResponsePrimaryColorContrastHexL f ThemeResponse{..} = (\themeResponsePrimaryColorContrastHex -> ThemeResponse { themeResponsePrimaryColorContrastHex, ..} ) <$> f themeResponsePrimaryColorContrastHex
{-# INLINE themeResponsePrimaryColorContrastHexL #-}

-- | 'themeResponseSecondaryColorHex' Lens
themeResponseSecondaryColorHexL :: Lens_' ThemeResponse (Maybe Text)
themeResponseSecondaryColorHexL f ThemeResponse{..} = (\themeResponseSecondaryColorHex -> ThemeResponse { themeResponseSecondaryColorHex, ..} ) <$> f themeResponseSecondaryColorHex
{-# INLINE themeResponseSecondaryColorHexL #-}

-- | 'themeResponseSecondaryColorContrastHex' Lens
themeResponseSecondaryColorContrastHexL :: Lens_' ThemeResponse (Maybe Text)
themeResponseSecondaryColorContrastHexL f ThemeResponse{..} = (\themeResponseSecondaryColorContrastHex -> ThemeResponse { themeResponseSecondaryColorContrastHex, ..} ) <$> f themeResponseSecondaryColorContrastHex
{-# INLINE themeResponseSecondaryColorContrastHexL #-}

-- | 'themeResponseSignInPageTouchPointVariant' Lens
themeResponseSignInPageTouchPointVariantL :: Lens_' ThemeResponse (Maybe SignInPageTouchPointVariant)
themeResponseSignInPageTouchPointVariantL f ThemeResponse{..} = (\themeResponseSignInPageTouchPointVariant -> ThemeResponse { themeResponseSignInPageTouchPointVariant, ..} ) <$> f themeResponseSignInPageTouchPointVariant
{-# INLINE themeResponseSignInPageTouchPointVariantL #-}

-- | 'themeResponseEndUserDashboardTouchPointVariant' Lens
themeResponseEndUserDashboardTouchPointVariantL :: Lens_' ThemeResponse (Maybe EndUserDashboardTouchPointVariant)
themeResponseEndUserDashboardTouchPointVariantL f ThemeResponse{..} = (\themeResponseEndUserDashboardTouchPointVariant -> ThemeResponse { themeResponseEndUserDashboardTouchPointVariant, ..} ) <$> f themeResponseEndUserDashboardTouchPointVariant
{-# INLINE themeResponseEndUserDashboardTouchPointVariantL #-}

-- | 'themeResponseErrorPageTouchPointVariant' Lens
themeResponseErrorPageTouchPointVariantL :: Lens_' ThemeResponse (Maybe ErrorPageTouchPointVariant)
themeResponseErrorPageTouchPointVariantL f ThemeResponse{..} = (\themeResponseErrorPageTouchPointVariant -> ThemeResponse { themeResponseErrorPageTouchPointVariant, ..} ) <$> f themeResponseErrorPageTouchPointVariant
{-# INLINE themeResponseErrorPageTouchPointVariantL #-}

-- | 'themeResponseEmailTemplateTouchPointVariant' Lens
themeResponseEmailTemplateTouchPointVariantL :: Lens_' ThemeResponse (Maybe EmailTemplateTouchPointVariant)
themeResponseEmailTemplateTouchPointVariantL f ThemeResponse{..} = (\themeResponseEmailTemplateTouchPointVariant -> ThemeResponse { themeResponseEmailTemplateTouchPointVariant, ..} ) <$> f themeResponseEmailTemplateTouchPointVariant
{-# INLINE themeResponseEmailTemplateTouchPointVariantL #-}

-- | 'themeResponseLinks' Lens
themeResponseLinksL :: Lens_' ThemeResponse (Maybe (Map.Map String A.Value))
themeResponseLinksL f ThemeResponse{..} = (\themeResponseLinks -> ThemeResponse { themeResponseLinks, ..} ) <$> f themeResponseLinks
{-# INLINE themeResponseLinksL #-}



-- * ThreatInsightConfiguration

-- | 'threatInsightConfigurationAction' Lens
threatInsightConfigurationActionL :: Lens_' ThreatInsightConfiguration (Maybe Text)
threatInsightConfigurationActionL f ThreatInsightConfiguration{..} = (\threatInsightConfigurationAction -> ThreatInsightConfiguration { threatInsightConfigurationAction, ..} ) <$> f threatInsightConfigurationAction
{-# INLINE threatInsightConfigurationActionL #-}

-- | 'threatInsightConfigurationExcludeZones' Lens
threatInsightConfigurationExcludeZonesL :: Lens_' ThreatInsightConfiguration (Maybe [Text])
threatInsightConfigurationExcludeZonesL f ThreatInsightConfiguration{..} = (\threatInsightConfigurationExcludeZones -> ThreatInsightConfiguration { threatInsightConfigurationExcludeZones, ..} ) <$> f threatInsightConfigurationExcludeZones
{-# INLINE threatInsightConfigurationExcludeZonesL #-}

-- | 'threatInsightConfigurationCreated' Lens
threatInsightConfigurationCreatedL :: Lens_' ThreatInsightConfiguration (Maybe DateTime)
threatInsightConfigurationCreatedL f ThreatInsightConfiguration{..} = (\threatInsightConfigurationCreated -> ThreatInsightConfiguration { threatInsightConfigurationCreated, ..} ) <$> f threatInsightConfigurationCreated
{-# INLINE threatInsightConfigurationCreatedL #-}

-- | 'threatInsightConfigurationLastUpdated' Lens
threatInsightConfigurationLastUpdatedL :: Lens_' ThreatInsightConfiguration (Maybe DateTime)
threatInsightConfigurationLastUpdatedL f ThreatInsightConfiguration{..} = (\threatInsightConfigurationLastUpdated -> ThreatInsightConfiguration { threatInsightConfigurationLastUpdated, ..} ) <$> f threatInsightConfigurationLastUpdated
{-# INLINE threatInsightConfigurationLastUpdatedL #-}

-- | 'threatInsightConfigurationLinks' Lens
threatInsightConfigurationLinksL :: Lens_' ThreatInsightConfiguration (Maybe (Map.Map String A.Value))
threatInsightConfigurationLinksL f ThreatInsightConfiguration{..} = (\threatInsightConfigurationLinks -> ThreatInsightConfiguration { threatInsightConfigurationLinks, ..} ) <$> f threatInsightConfigurationLinks
{-# INLINE threatInsightConfigurationLinksL #-}



-- * TokenAuthorizationServerPolicyRuleAction

-- | 'tokenAuthorizationServerPolicyRuleActionAccessTokenLifetimeMinutes' Lens
tokenAuthorizationServerPolicyRuleActionAccessTokenLifetimeMinutesL :: Lens_' TokenAuthorizationServerPolicyRuleAction (Maybe Int)
tokenAuthorizationServerPolicyRuleActionAccessTokenLifetimeMinutesL f TokenAuthorizationServerPolicyRuleAction{..} = (\tokenAuthorizationServerPolicyRuleActionAccessTokenLifetimeMinutes -> TokenAuthorizationServerPolicyRuleAction { tokenAuthorizationServerPolicyRuleActionAccessTokenLifetimeMinutes, ..} ) <$> f tokenAuthorizationServerPolicyRuleActionAccessTokenLifetimeMinutes
{-# INLINE tokenAuthorizationServerPolicyRuleActionAccessTokenLifetimeMinutesL #-}

-- | 'tokenAuthorizationServerPolicyRuleActionRefreshTokenLifetimeMinutes' Lens
tokenAuthorizationServerPolicyRuleActionRefreshTokenLifetimeMinutesL :: Lens_' TokenAuthorizationServerPolicyRuleAction (Maybe Int)
tokenAuthorizationServerPolicyRuleActionRefreshTokenLifetimeMinutesL f TokenAuthorizationServerPolicyRuleAction{..} = (\tokenAuthorizationServerPolicyRuleActionRefreshTokenLifetimeMinutes -> TokenAuthorizationServerPolicyRuleAction { tokenAuthorizationServerPolicyRuleActionRefreshTokenLifetimeMinutes, ..} ) <$> f tokenAuthorizationServerPolicyRuleActionRefreshTokenLifetimeMinutes
{-# INLINE tokenAuthorizationServerPolicyRuleActionRefreshTokenLifetimeMinutesL #-}

-- | 'tokenAuthorizationServerPolicyRuleActionRefreshTokenWindowMinutes' Lens
tokenAuthorizationServerPolicyRuleActionRefreshTokenWindowMinutesL :: Lens_' TokenAuthorizationServerPolicyRuleAction (Maybe Int)
tokenAuthorizationServerPolicyRuleActionRefreshTokenWindowMinutesL f TokenAuthorizationServerPolicyRuleAction{..} = (\tokenAuthorizationServerPolicyRuleActionRefreshTokenWindowMinutes -> TokenAuthorizationServerPolicyRuleAction { tokenAuthorizationServerPolicyRuleActionRefreshTokenWindowMinutes, ..} ) <$> f tokenAuthorizationServerPolicyRuleActionRefreshTokenWindowMinutes
{-# INLINE tokenAuthorizationServerPolicyRuleActionRefreshTokenWindowMinutesL #-}

-- | 'tokenAuthorizationServerPolicyRuleActionInlineHook' Lens
tokenAuthorizationServerPolicyRuleActionInlineHookL :: Lens_' TokenAuthorizationServerPolicyRuleAction (Maybe TokenAuthorizationServerPolicyRuleActionInlineHook)
tokenAuthorizationServerPolicyRuleActionInlineHookL f TokenAuthorizationServerPolicyRuleAction{..} = (\tokenAuthorizationServerPolicyRuleActionInlineHook -> TokenAuthorizationServerPolicyRuleAction { tokenAuthorizationServerPolicyRuleActionInlineHook, ..} ) <$> f tokenAuthorizationServerPolicyRuleActionInlineHook
{-# INLINE tokenAuthorizationServerPolicyRuleActionInlineHookL #-}



-- * TokenAuthorizationServerPolicyRuleActionInlineHook

-- | 'tokenAuthorizationServerPolicyRuleActionInlineHookId' Lens
tokenAuthorizationServerPolicyRuleActionInlineHookIdL :: Lens_' TokenAuthorizationServerPolicyRuleActionInlineHook (Maybe Text)
tokenAuthorizationServerPolicyRuleActionInlineHookIdL f TokenAuthorizationServerPolicyRuleActionInlineHook{..} = (\tokenAuthorizationServerPolicyRuleActionInlineHookId -> TokenAuthorizationServerPolicyRuleActionInlineHook { tokenAuthorizationServerPolicyRuleActionInlineHookId, ..} ) <$> f tokenAuthorizationServerPolicyRuleActionInlineHookId
{-# INLINE tokenAuthorizationServerPolicyRuleActionInlineHookIdL #-}



-- * TokenUserFactor

-- | 'tokenUserFactorProfile' Lens
tokenUserFactorProfileL :: Lens_' TokenUserFactor (Maybe TokenUserFactorProfile)
tokenUserFactorProfileL f TokenUserFactor{..} = (\tokenUserFactorProfile -> TokenUserFactor { tokenUserFactorProfile, ..} ) <$> f tokenUserFactorProfile
{-# INLINE tokenUserFactorProfileL #-}



-- * TokenUserFactorProfile

-- | 'tokenUserFactorProfileCredentialId' Lens
tokenUserFactorProfileCredentialIdL :: Lens_' TokenUserFactorProfile (Maybe Text)
tokenUserFactorProfileCredentialIdL f TokenUserFactorProfile{..} = (\tokenUserFactorProfileCredentialId -> TokenUserFactorProfile { tokenUserFactorProfileCredentialId, ..} ) <$> f tokenUserFactorProfileCredentialId
{-# INLINE tokenUserFactorProfileCredentialIdL #-}



-- * TotpUserFactor

-- | 'totpUserFactorProfile' Lens
totpUserFactorProfileL :: Lens_' TotpUserFactor (Maybe TotpUserFactorProfile)
totpUserFactorProfileL f TotpUserFactor{..} = (\totpUserFactorProfile -> TotpUserFactor { totpUserFactorProfile, ..} ) <$> f totpUserFactorProfile
{-# INLINE totpUserFactorProfileL #-}



-- * TotpUserFactorProfile

-- | 'totpUserFactorProfileCredentialId' Lens
totpUserFactorProfileCredentialIdL :: Lens_' TotpUserFactorProfile (Maybe Text)
totpUserFactorProfileCredentialIdL f TotpUserFactorProfile{..} = (\totpUserFactorProfileCredentialId -> TotpUserFactorProfile { totpUserFactorProfileCredentialId, ..} ) <$> f totpUserFactorProfileCredentialId
{-# INLINE totpUserFactorProfileCredentialIdL #-}



-- * TrustedOrigin

-- | 'trustedOriginLinks' Lens
trustedOriginLinksL :: Lens_' TrustedOrigin (Maybe (Map.Map String A.Value))
trustedOriginLinksL f TrustedOrigin{..} = (\trustedOriginLinks -> TrustedOrigin { trustedOriginLinks, ..} ) <$> f trustedOriginLinks
{-# INLINE trustedOriginLinksL #-}

-- | 'trustedOriginCreated' Lens
trustedOriginCreatedL :: Lens_' TrustedOrigin (Maybe DateTime)
trustedOriginCreatedL f TrustedOrigin{..} = (\trustedOriginCreated -> TrustedOrigin { trustedOriginCreated, ..} ) <$> f trustedOriginCreated
{-# INLINE trustedOriginCreatedL #-}

-- | 'trustedOriginCreatedBy' Lens
trustedOriginCreatedByL :: Lens_' TrustedOrigin (Maybe Text)
trustedOriginCreatedByL f TrustedOrigin{..} = (\trustedOriginCreatedBy -> TrustedOrigin { trustedOriginCreatedBy, ..} ) <$> f trustedOriginCreatedBy
{-# INLINE trustedOriginCreatedByL #-}

-- | 'trustedOriginId' Lens
trustedOriginIdL :: Lens_' TrustedOrigin (Maybe Text)
trustedOriginIdL f TrustedOrigin{..} = (\trustedOriginId -> TrustedOrigin { trustedOriginId, ..} ) <$> f trustedOriginId
{-# INLINE trustedOriginIdL #-}

-- | 'trustedOriginLastUpdated' Lens
trustedOriginLastUpdatedL :: Lens_' TrustedOrigin (Maybe DateTime)
trustedOriginLastUpdatedL f TrustedOrigin{..} = (\trustedOriginLastUpdated -> TrustedOrigin { trustedOriginLastUpdated, ..} ) <$> f trustedOriginLastUpdated
{-# INLINE trustedOriginLastUpdatedL #-}

-- | 'trustedOriginLastUpdatedBy' Lens
trustedOriginLastUpdatedByL :: Lens_' TrustedOrigin (Maybe Text)
trustedOriginLastUpdatedByL f TrustedOrigin{..} = (\trustedOriginLastUpdatedBy -> TrustedOrigin { trustedOriginLastUpdatedBy, ..} ) <$> f trustedOriginLastUpdatedBy
{-# INLINE trustedOriginLastUpdatedByL #-}

-- | 'trustedOriginName' Lens
trustedOriginNameL :: Lens_' TrustedOrigin (Maybe Text)
trustedOriginNameL f TrustedOrigin{..} = (\trustedOriginName -> TrustedOrigin { trustedOriginName, ..} ) <$> f trustedOriginName
{-# INLINE trustedOriginNameL #-}

-- | 'trustedOriginOrigin' Lens
trustedOriginOriginL :: Lens_' TrustedOrigin (Maybe Text)
trustedOriginOriginL f TrustedOrigin{..} = (\trustedOriginOrigin -> TrustedOrigin { trustedOriginOrigin, ..} ) <$> f trustedOriginOrigin
{-# INLINE trustedOriginOriginL #-}

-- | 'trustedOriginScopes' Lens
trustedOriginScopesL :: Lens_' TrustedOrigin (Maybe [Scope])
trustedOriginScopesL f TrustedOrigin{..} = (\trustedOriginScopes -> TrustedOrigin { trustedOriginScopes, ..} ) <$> f trustedOriginScopes
{-# INLINE trustedOriginScopesL #-}

-- | 'trustedOriginStatus' Lens
trustedOriginStatusL :: Lens_' TrustedOrigin (Maybe Text)
trustedOriginStatusL f TrustedOrigin{..} = (\trustedOriginStatus -> TrustedOrigin { trustedOriginStatus, ..} ) <$> f trustedOriginStatus
{-# INLINE trustedOriginStatusL #-}



-- * U2fUserFactor

-- | 'u2fUserFactorProfile' Lens
u2fUserFactorProfileL :: Lens_' U2fUserFactor (Maybe U2fUserFactorProfile)
u2fUserFactorProfileL f U2fUserFactor{..} = (\u2fUserFactorProfile -> U2fUserFactor { u2fUserFactorProfile, ..} ) <$> f u2fUserFactorProfile
{-# INLINE u2fUserFactorProfileL #-}



-- * U2fUserFactorProfile

-- | 'u2fUserFactorProfileCredentialId' Lens
u2fUserFactorProfileCredentialIdL :: Lens_' U2fUserFactorProfile (Maybe Text)
u2fUserFactorProfileCredentialIdL f U2fUserFactorProfile{..} = (\u2fUserFactorProfileCredentialId -> U2fUserFactorProfile { u2fUserFactorProfileCredentialId, ..} ) <$> f u2fUserFactorProfileCredentialId
{-# INLINE u2fUserFactorProfileCredentialIdL #-}



-- * User

-- | 'userEmbedded' Lens
userEmbeddedL :: Lens_' User (Maybe (Map.Map String A.Value))
userEmbeddedL f User{..} = (\userEmbedded -> User { userEmbedded, ..} ) <$> f userEmbedded
{-# INLINE userEmbeddedL #-}

-- | 'userLinks' Lens
userLinksL :: Lens_' User (Maybe (Map.Map String A.Value))
userLinksL f User{..} = (\userLinks -> User { userLinks, ..} ) <$> f userLinks
{-# INLINE userLinksL #-}

-- | 'userActivated' Lens
userActivatedL :: Lens_' User (Maybe DateTime)
userActivatedL f User{..} = (\userActivated -> User { userActivated, ..} ) <$> f userActivated
{-# INLINE userActivatedL #-}

-- | 'userCreated' Lens
userCreatedL :: Lens_' User (Maybe DateTime)
userCreatedL f User{..} = (\userCreated -> User { userCreated, ..} ) <$> f userCreated
{-# INLINE userCreatedL #-}

-- | 'userCredentials' Lens
userCredentialsL :: Lens_' User (Maybe UserCredentials)
userCredentialsL f User{..} = (\userCredentials -> User { userCredentials, ..} ) <$> f userCredentials
{-# INLINE userCredentialsL #-}

-- | 'userId' Lens
userIdL :: Lens_' User (Maybe Text)
userIdL f User{..} = (\userId -> User { userId, ..} ) <$> f userId
{-# INLINE userIdL #-}

-- | 'userLastLogin' Lens
userLastLoginL :: Lens_' User (Maybe DateTime)
userLastLoginL f User{..} = (\userLastLogin -> User { userLastLogin, ..} ) <$> f userLastLogin
{-# INLINE userLastLoginL #-}

-- | 'userLastUpdated' Lens
userLastUpdatedL :: Lens_' User (Maybe DateTime)
userLastUpdatedL f User{..} = (\userLastUpdated -> User { userLastUpdated, ..} ) <$> f userLastUpdated
{-# INLINE userLastUpdatedL #-}

-- | 'userPasswordChanged' Lens
userPasswordChangedL :: Lens_' User (Maybe DateTime)
userPasswordChangedL f User{..} = (\userPasswordChanged -> User { userPasswordChanged, ..} ) <$> f userPasswordChanged
{-# INLINE userPasswordChangedL #-}

-- | 'userGroupIds' Lens
userGroupIdsL :: Lens_' User (Maybe [Text])
userGroupIdsL f User{..} = (\userGroupIds -> User { userGroupIds, ..} ) <$> f userGroupIds
{-# INLINE userGroupIdsL #-}

-- | 'userProfile' Lens
userProfileL :: Lens_' (UserP p) (Maybe p)
userProfileL f User{..} = (\userProfile -> User { userProfile, ..} ) <$> f userProfile
{-# INLINE userProfileL #-}

-- | 'userStatus' Lens
userStatusL :: Lens_' User (Maybe UserStatus)
userStatusL f User{..} = (\userStatus -> User { userStatus, ..} ) <$> f userStatus
{-# INLINE userStatusL #-}

-- | 'userStatusChanged' Lens
userStatusChangedL :: Lens_' User (Maybe DateTime)
userStatusChangedL f User{..} = (\userStatusChanged -> User { userStatusChanged, ..} ) <$> f userStatusChanged
{-# INLINE userStatusChangedL #-}

-- | 'userTransitioningToStatus' Lens
userTransitioningToStatusL :: Lens_' User (Maybe UserStatus)
userTransitioningToStatusL f User{..} = (\userTransitioningToStatus -> User { userTransitioningToStatus, ..} ) <$> f userTransitioningToStatus
{-# INLINE userTransitioningToStatusL #-}

-- | 'userType' Lens
userTypeL :: Lens_' User (Maybe UserType)
userTypeL f User{..} = (\userType -> User { userType, ..} ) <$> f userType
{-# INLINE userTypeL #-}



-- * UserActivationToken

-- | 'userActivationTokenActivationToken' Lens
userActivationTokenActivationTokenL :: Lens_' UserActivationToken (Maybe Text)
userActivationTokenActivationTokenL f UserActivationToken{..} = (\userActivationTokenActivationToken -> UserActivationToken { userActivationTokenActivationToken, ..} ) <$> f userActivationTokenActivationToken
{-# INLINE userActivationTokenActivationTokenL #-}

-- | 'userActivationTokenActivationUrl' Lens
userActivationTokenActivationUrlL :: Lens_' UserActivationToken (Maybe Text)
userActivationTokenActivationUrlL f UserActivationToken{..} = (\userActivationTokenActivationUrl -> UserActivationToken { userActivationTokenActivationUrl, ..} ) <$> f userActivationTokenActivationUrl
{-# INLINE userActivationTokenActivationUrlL #-}



-- * UserCondition

-- | 'userConditionExclude' Lens
userConditionExcludeL :: Lens_' UserCondition (Maybe [Text])
userConditionExcludeL f UserCondition{..} = (\userConditionExclude -> UserCondition { userConditionExclude, ..} ) <$> f userConditionExclude
{-# INLINE userConditionExcludeL #-}

-- | 'userConditionInclude' Lens
userConditionIncludeL :: Lens_' UserCondition (Maybe [Text])
userConditionIncludeL f UserCondition{..} = (\userConditionInclude -> UserCondition { userConditionInclude, ..} ) <$> f userConditionInclude
{-# INLINE userConditionIncludeL #-}



-- * UserCredentials

-- | 'userCredentialsPassword' Lens
userCredentialsPasswordL :: Lens_' UserCredentials (Maybe PasswordCredential)
userCredentialsPasswordL f UserCredentials{..} = (\userCredentialsPassword -> UserCredentials { userCredentialsPassword, ..} ) <$> f userCredentialsPassword
{-# INLINE userCredentialsPasswordL #-}

-- | 'userCredentialsProvider' Lens
userCredentialsProviderL :: Lens_' UserCredentials (Maybe AuthenticationProvider)
userCredentialsProviderL f UserCredentials{..} = (\userCredentialsProvider -> UserCredentials { userCredentialsProvider, ..} ) <$> f userCredentialsProvider
{-# INLINE userCredentialsProviderL #-}

-- | 'userCredentialsRecoveryQuestion' Lens
userCredentialsRecoveryQuestionL :: Lens_' UserCredentials (Maybe RecoveryQuestionCredential)
userCredentialsRecoveryQuestionL f UserCredentials{..} = (\userCredentialsRecoveryQuestion -> UserCredentials { userCredentialsRecoveryQuestion, ..} ) <$> f userCredentialsRecoveryQuestion
{-# INLINE userCredentialsRecoveryQuestionL #-}



-- * UserFactor

-- | 'userFactorEmbedded' Lens
userFactorEmbeddedL :: Lens_' UserFactor (Maybe (Map.Map String A.Value))
userFactorEmbeddedL f UserFactor{..} = (\userFactorEmbedded -> UserFactor { userFactorEmbedded, ..} ) <$> f userFactorEmbedded
{-# INLINE userFactorEmbeddedL #-}

-- | 'userFactorLinks' Lens
userFactorLinksL :: Lens_' UserFactor (Maybe (Map.Map String A.Value))
userFactorLinksL f UserFactor{..} = (\userFactorLinks -> UserFactor { userFactorLinks, ..} ) <$> f userFactorLinks
{-# INLINE userFactorLinksL #-}

-- | 'userFactorCreated' Lens
userFactorCreatedL :: Lens_' UserFactor (Maybe DateTime)
userFactorCreatedL f UserFactor{..} = (\userFactorCreated -> UserFactor { userFactorCreated, ..} ) <$> f userFactorCreated
{-# INLINE userFactorCreatedL #-}

-- | 'userFactorFactorType' Lens
userFactorFactorTypeL :: Lens_' UserFactor (Maybe FactorType)
userFactorFactorTypeL f UserFactor{..} = (\userFactorFactorType -> UserFactor { userFactorFactorType, ..} ) <$> f userFactorFactorType
{-# INLINE userFactorFactorTypeL #-}

-- | 'userFactorId' Lens
userFactorIdL :: Lens_' UserFactor (Maybe Text)
userFactorIdL f UserFactor{..} = (\userFactorId -> UserFactor { userFactorId, ..} ) <$> f userFactorId
{-# INLINE userFactorIdL #-}

-- | 'userFactorLastUpdated' Lens
userFactorLastUpdatedL :: Lens_' UserFactor (Maybe DateTime)
userFactorLastUpdatedL f UserFactor{..} = (\userFactorLastUpdated -> UserFactor { userFactorLastUpdated, ..} ) <$> f userFactorLastUpdated
{-# INLINE userFactorLastUpdatedL #-}

-- | 'userFactorProvider' Lens
userFactorProviderL :: Lens_' UserFactor (Maybe FactorProvider)
userFactorProviderL f UserFactor{..} = (\userFactorProvider -> UserFactor { userFactorProvider, ..} ) <$> f userFactorProvider
{-# INLINE userFactorProviderL #-}

-- | 'userFactorStatus' Lens
userFactorStatusL :: Lens_' UserFactor (Maybe FactorStatus)
userFactorStatusL f UserFactor{..} = (\userFactorStatus -> UserFactor { userFactorStatus, ..} ) <$> f userFactorStatus
{-# INLINE userFactorStatusL #-}

-- | 'userFactorVerify' Lens
userFactorVerifyL :: Lens_' UserFactor (Maybe VerifyFactorRequest)
userFactorVerifyL f UserFactor{..} = (\userFactorVerify -> UserFactor { userFactorVerify, ..} ) <$> f userFactorVerify
{-# INLINE userFactorVerifyL #-}



-- * UserIdString

-- | 'userIdStringUserId' Lens
userIdStringUserIdL :: Lens_' UserIdString (Maybe Text)
userIdStringUserIdL f UserIdString{..} = (\userIdStringUserId -> UserIdString { userIdStringUserId, ..} ) <$> f userIdStringUserId
{-# INLINE userIdStringUserIdL #-}



-- * UserIdentifierConditionEvaluatorPattern

-- | 'userIdentifierConditionEvaluatorPatternMatchType' Lens
userIdentifierConditionEvaluatorPatternMatchTypeL :: Lens_' UserIdentifierConditionEvaluatorPattern (Maybe E'MatchType2)
userIdentifierConditionEvaluatorPatternMatchTypeL f UserIdentifierConditionEvaluatorPattern{..} = (\userIdentifierConditionEvaluatorPatternMatchType -> UserIdentifierConditionEvaluatorPattern { userIdentifierConditionEvaluatorPatternMatchType, ..} ) <$> f userIdentifierConditionEvaluatorPatternMatchType
{-# INLINE userIdentifierConditionEvaluatorPatternMatchTypeL #-}

-- | 'userIdentifierConditionEvaluatorPatternValue' Lens
userIdentifierConditionEvaluatorPatternValueL :: Lens_' UserIdentifierConditionEvaluatorPattern (Maybe Text)
userIdentifierConditionEvaluatorPatternValueL f UserIdentifierConditionEvaluatorPattern{..} = (\userIdentifierConditionEvaluatorPatternValue -> UserIdentifierConditionEvaluatorPattern { userIdentifierConditionEvaluatorPatternValue, ..} ) <$> f userIdentifierConditionEvaluatorPatternValue
{-# INLINE userIdentifierConditionEvaluatorPatternValueL #-}



-- * UserIdentifierPolicyRuleCondition

-- | 'userIdentifierPolicyRuleConditionAttribute' Lens
userIdentifierPolicyRuleConditionAttributeL :: Lens_' UserIdentifierPolicyRuleCondition (Maybe Text)
userIdentifierPolicyRuleConditionAttributeL f UserIdentifierPolicyRuleCondition{..} = (\userIdentifierPolicyRuleConditionAttribute -> UserIdentifierPolicyRuleCondition { userIdentifierPolicyRuleConditionAttribute, ..} ) <$> f userIdentifierPolicyRuleConditionAttribute
{-# INLINE userIdentifierPolicyRuleConditionAttributeL #-}

-- | 'userIdentifierPolicyRuleConditionPatterns' Lens
userIdentifierPolicyRuleConditionPatternsL :: Lens_' UserIdentifierPolicyRuleCondition (Maybe [UserIdentifierConditionEvaluatorPattern])
userIdentifierPolicyRuleConditionPatternsL f UserIdentifierPolicyRuleCondition{..} = (\userIdentifierPolicyRuleConditionPatterns -> UserIdentifierPolicyRuleCondition { userIdentifierPolicyRuleConditionPatterns, ..} ) <$> f userIdentifierPolicyRuleConditionPatterns
{-# INLINE userIdentifierPolicyRuleConditionPatternsL #-}

-- | 'userIdentifierPolicyRuleConditionType' Lens
userIdentifierPolicyRuleConditionTypeL :: Lens_' UserIdentifierPolicyRuleCondition (Maybe E'Type11)
userIdentifierPolicyRuleConditionTypeL f UserIdentifierPolicyRuleCondition{..} = (\userIdentifierPolicyRuleConditionType -> UserIdentifierPolicyRuleCondition { userIdentifierPolicyRuleConditionType, ..} ) <$> f userIdentifierPolicyRuleConditionType
{-# INLINE userIdentifierPolicyRuleConditionTypeL #-}



-- * UserIdentityProviderLinkRequest

-- | 'userIdentityProviderLinkRequestExternalId' Lens
userIdentityProviderLinkRequestExternalIdL :: Lens_' UserIdentityProviderLinkRequest (Maybe Text)
userIdentityProviderLinkRequestExternalIdL f UserIdentityProviderLinkRequest{..} = (\userIdentityProviderLinkRequestExternalId -> UserIdentityProviderLinkRequest { userIdentityProviderLinkRequestExternalId, ..} ) <$> f userIdentityProviderLinkRequestExternalId
{-# INLINE userIdentityProviderLinkRequestExternalIdL #-}



-- * UserLifecycleAttributePolicyRuleCondition

-- | 'userLifecycleAttributePolicyRuleConditionAttributeName' Lens
userLifecycleAttributePolicyRuleConditionAttributeNameL :: Lens_' UserLifecycleAttributePolicyRuleCondition (Maybe Text)
userLifecycleAttributePolicyRuleConditionAttributeNameL f UserLifecycleAttributePolicyRuleCondition{..} = (\userLifecycleAttributePolicyRuleConditionAttributeName -> UserLifecycleAttributePolicyRuleCondition { userLifecycleAttributePolicyRuleConditionAttributeName, ..} ) <$> f userLifecycleAttributePolicyRuleConditionAttributeName
{-# INLINE userLifecycleAttributePolicyRuleConditionAttributeNameL #-}

-- | 'userLifecycleAttributePolicyRuleConditionMatchingValue' Lens
userLifecycleAttributePolicyRuleConditionMatchingValueL :: Lens_' UserLifecycleAttributePolicyRuleCondition (Maybe Text)
userLifecycleAttributePolicyRuleConditionMatchingValueL f UserLifecycleAttributePolicyRuleCondition{..} = (\userLifecycleAttributePolicyRuleConditionMatchingValue -> UserLifecycleAttributePolicyRuleCondition { userLifecycleAttributePolicyRuleConditionMatchingValue, ..} ) <$> f userLifecycleAttributePolicyRuleConditionMatchingValue
{-# INLINE userLifecycleAttributePolicyRuleConditionMatchingValueL #-}



-- * UserNextLogin



-- * UserPolicyRuleCondition

-- | 'userPolicyRuleConditionExclude' Lens
userPolicyRuleConditionExcludeL :: Lens_' UserPolicyRuleCondition (Maybe [Text])
userPolicyRuleConditionExcludeL f UserPolicyRuleCondition{..} = (\userPolicyRuleConditionExclude -> UserPolicyRuleCondition { userPolicyRuleConditionExclude, ..} ) <$> f userPolicyRuleConditionExclude
{-# INLINE userPolicyRuleConditionExcludeL #-}

-- | 'userPolicyRuleConditionInactivity' Lens
userPolicyRuleConditionInactivityL :: Lens_' UserPolicyRuleCondition (Maybe InactivityPolicyRuleCondition)
userPolicyRuleConditionInactivityL f UserPolicyRuleCondition{..} = (\userPolicyRuleConditionInactivity -> UserPolicyRuleCondition { userPolicyRuleConditionInactivity, ..} ) <$> f userPolicyRuleConditionInactivity
{-# INLINE userPolicyRuleConditionInactivityL #-}

-- | 'userPolicyRuleConditionInclude' Lens
userPolicyRuleConditionIncludeL :: Lens_' UserPolicyRuleCondition (Maybe [Text])
userPolicyRuleConditionIncludeL f UserPolicyRuleCondition{..} = (\userPolicyRuleConditionInclude -> UserPolicyRuleCondition { userPolicyRuleConditionInclude, ..} ) <$> f userPolicyRuleConditionInclude
{-# INLINE userPolicyRuleConditionIncludeL #-}

-- | 'userPolicyRuleConditionLifecycleExpiration' Lens
userPolicyRuleConditionLifecycleExpirationL :: Lens_' UserPolicyRuleCondition (Maybe LifecycleExpirationPolicyRuleCondition)
userPolicyRuleConditionLifecycleExpirationL f UserPolicyRuleCondition{..} = (\userPolicyRuleConditionLifecycleExpiration -> UserPolicyRuleCondition { userPolicyRuleConditionLifecycleExpiration, ..} ) <$> f userPolicyRuleConditionLifecycleExpiration
{-# INLINE userPolicyRuleConditionLifecycleExpirationL #-}

-- | 'userPolicyRuleConditionPasswordExpiration' Lens
userPolicyRuleConditionPasswordExpirationL :: Lens_' UserPolicyRuleCondition (Maybe PasswordExpirationPolicyRuleCondition)
userPolicyRuleConditionPasswordExpirationL f UserPolicyRuleCondition{..} = (\userPolicyRuleConditionPasswordExpiration -> UserPolicyRuleCondition { userPolicyRuleConditionPasswordExpiration, ..} ) <$> f userPolicyRuleConditionPasswordExpiration
{-# INLINE userPolicyRuleConditionPasswordExpirationL #-}

-- | 'userPolicyRuleConditionUserLifecycleAttribute' Lens
userPolicyRuleConditionUserLifecycleAttributeL :: Lens_' UserPolicyRuleCondition (Maybe UserLifecycleAttributePolicyRuleCondition)
userPolicyRuleConditionUserLifecycleAttributeL f UserPolicyRuleCondition{..} = (\userPolicyRuleConditionUserLifecycleAttribute -> UserPolicyRuleCondition { userPolicyRuleConditionUserLifecycleAttribute, ..} ) <$> f userPolicyRuleConditionUserLifecycleAttribute
{-# INLINE userPolicyRuleConditionUserLifecycleAttributeL #-}



-- * UserProfile

-- | 'userProfileCity' Lens
userProfileCityL :: Lens_' UserProfile (Maybe Text)
userProfileCityL f UserProfile{..} = (\userProfileCity -> UserProfile { userProfileCity, ..} ) <$> f userProfileCity
{-# INLINE userProfileCityL #-}

-- | 'userProfileCostCenter' Lens
userProfileCostCenterL :: Lens_' UserProfile (Maybe Text)
userProfileCostCenterL f UserProfile{..} = (\userProfileCostCenter -> UserProfile { userProfileCostCenter, ..} ) <$> f userProfileCostCenter
{-# INLINE userProfileCostCenterL #-}

-- | 'userProfileCountryCode' Lens
userProfileCountryCodeL :: Lens_' UserProfile (Maybe Text)
userProfileCountryCodeL f UserProfile{..} = (\userProfileCountryCode -> UserProfile { userProfileCountryCode, ..} ) <$> f userProfileCountryCode
{-# INLINE userProfileCountryCodeL #-}

-- | 'userProfileDepartment' Lens
userProfileDepartmentL :: Lens_' UserProfile (Maybe Text)
userProfileDepartmentL f UserProfile{..} = (\userProfileDepartment -> UserProfile { userProfileDepartment, ..} ) <$> f userProfileDepartment
{-# INLINE userProfileDepartmentL #-}

-- | 'userProfileDisplayName' Lens
userProfileDisplayNameL :: Lens_' UserProfile (Maybe Text)
userProfileDisplayNameL f UserProfile{..} = (\userProfileDisplayName -> UserProfile { userProfileDisplayName, ..} ) <$> f userProfileDisplayName
{-# INLINE userProfileDisplayNameL #-}

-- | 'userProfileDivision' Lens
userProfileDivisionL :: Lens_' UserProfile (Maybe Text)
userProfileDivisionL f UserProfile{..} = (\userProfileDivision -> UserProfile { userProfileDivision, ..} ) <$> f userProfileDivision
{-# INLINE userProfileDivisionL #-}

-- | 'userProfileEmail' Lens
userProfileEmailL :: Lens_' UserProfile (Maybe Text)
userProfileEmailL f UserProfile{..} = (\userProfileEmail -> UserProfile { userProfileEmail, ..} ) <$> f userProfileEmail
{-# INLINE userProfileEmailL #-}

-- | 'userProfileEmployeeNumber' Lens
userProfileEmployeeNumberL :: Lens_' UserProfile (Maybe Text)
userProfileEmployeeNumberL f UserProfile{..} = (\userProfileEmployeeNumber -> UserProfile { userProfileEmployeeNumber, ..} ) <$> f userProfileEmployeeNumber
{-# INLINE userProfileEmployeeNumberL #-}

-- | 'userProfileFirstName' Lens
userProfileFirstNameL :: Lens_' UserProfile (Maybe Text)
userProfileFirstNameL f UserProfile{..} = (\userProfileFirstName -> UserProfile { userProfileFirstName, ..} ) <$> f userProfileFirstName
{-# INLINE userProfileFirstNameL #-}

-- | 'userProfileHonorificPrefix' Lens
userProfileHonorificPrefixL :: Lens_' UserProfile (Maybe Text)
userProfileHonorificPrefixL f UserProfile{..} = (\userProfileHonorificPrefix -> UserProfile { userProfileHonorificPrefix, ..} ) <$> f userProfileHonorificPrefix
{-# INLINE userProfileHonorificPrefixL #-}

-- | 'userProfileHonorificSuffix' Lens
userProfileHonorificSuffixL :: Lens_' UserProfile (Maybe Text)
userProfileHonorificSuffixL f UserProfile{..} = (\userProfileHonorificSuffix -> UserProfile { userProfileHonorificSuffix, ..} ) <$> f userProfileHonorificSuffix
{-# INLINE userProfileHonorificSuffixL #-}

-- | 'userProfileLastName' Lens
userProfileLastNameL :: Lens_' UserProfile (Maybe Text)
userProfileLastNameL f UserProfile{..} = (\userProfileLastName -> UserProfile { userProfileLastName, ..} ) <$> f userProfileLastName
{-# INLINE userProfileLastNameL #-}

-- | 'userProfileLocale' Lens
userProfileLocaleL :: Lens_' UserProfile (Maybe Text)
userProfileLocaleL f UserProfile{..} = (\userProfileLocale -> UserProfile { userProfileLocale, ..} ) <$> f userProfileLocale
{-# INLINE userProfileLocaleL #-}

-- | 'userProfileLogin' Lens
userProfileLoginL :: Lens_' UserProfile (Maybe Text)
userProfileLoginL f UserProfile{..} = (\userProfileLogin -> UserProfile { userProfileLogin, ..} ) <$> f userProfileLogin
{-# INLINE userProfileLoginL #-}

-- | 'userProfileManager' Lens
userProfileManagerL :: Lens_' UserProfile (Maybe Text)
userProfileManagerL f UserProfile{..} = (\userProfileManager -> UserProfile { userProfileManager, ..} ) <$> f userProfileManager
{-# INLINE userProfileManagerL #-}

-- | 'userProfileManagerId' Lens
userProfileManagerIdL :: Lens_' UserProfile (Maybe Text)
userProfileManagerIdL f UserProfile{..} = (\userProfileManagerId -> UserProfile { userProfileManagerId, ..} ) <$> f userProfileManagerId
{-# INLINE userProfileManagerIdL #-}

-- | 'userProfileMiddleName' Lens
userProfileMiddleNameL :: Lens_' UserProfile (Maybe Text)
userProfileMiddleNameL f UserProfile{..} = (\userProfileMiddleName -> UserProfile { userProfileMiddleName, ..} ) <$> f userProfileMiddleName
{-# INLINE userProfileMiddleNameL #-}

-- | 'userProfileMobilePhone' Lens
userProfileMobilePhoneL :: Lens_' UserProfile (Maybe Text)
userProfileMobilePhoneL f UserProfile{..} = (\userProfileMobilePhone -> UserProfile { userProfileMobilePhone, ..} ) <$> f userProfileMobilePhone
{-# INLINE userProfileMobilePhoneL #-}

-- | 'userProfileNickName' Lens
userProfileNickNameL :: Lens_' UserProfile (Maybe Text)
userProfileNickNameL f UserProfile{..} = (\userProfileNickName -> UserProfile { userProfileNickName, ..} ) <$> f userProfileNickName
{-# INLINE userProfileNickNameL #-}

-- | 'userProfileOrganization' Lens
userProfileOrganizationL :: Lens_' UserProfile (Maybe Text)
userProfileOrganizationL f UserProfile{..} = (\userProfileOrganization -> UserProfile { userProfileOrganization, ..} ) <$> f userProfileOrganization
{-# INLINE userProfileOrganizationL #-}

-- | 'userProfilePostalAddress' Lens
userProfilePostalAddressL :: Lens_' UserProfile (Maybe Text)
userProfilePostalAddressL f UserProfile{..} = (\userProfilePostalAddress -> UserProfile { userProfilePostalAddress, ..} ) <$> f userProfilePostalAddress
{-# INLINE userProfilePostalAddressL #-}

-- | 'userProfilePreferredLanguage' Lens
userProfilePreferredLanguageL :: Lens_' UserProfile (Maybe Text)
userProfilePreferredLanguageL f UserProfile{..} = (\userProfilePreferredLanguage -> UserProfile { userProfilePreferredLanguage, ..} ) <$> f userProfilePreferredLanguage
{-# INLINE userProfilePreferredLanguageL #-}

-- | 'userProfilePrimaryPhone' Lens
userProfilePrimaryPhoneL :: Lens_' UserProfile (Maybe Text)
userProfilePrimaryPhoneL f UserProfile{..} = (\userProfilePrimaryPhone -> UserProfile { userProfilePrimaryPhone, ..} ) <$> f userProfilePrimaryPhone
{-# INLINE userProfilePrimaryPhoneL #-}

-- | 'userProfileProfileUrl' Lens
userProfileProfileUrlL :: Lens_' UserProfile (Maybe Text)
userProfileProfileUrlL f UserProfile{..} = (\userProfileProfileUrl -> UserProfile { userProfileProfileUrl, ..} ) <$> f userProfileProfileUrl
{-# INLINE userProfileProfileUrlL #-}

-- | 'userProfileSecondEmail' Lens
userProfileSecondEmailL :: Lens_' UserProfile (Maybe Text)
userProfileSecondEmailL f UserProfile{..} = (\userProfileSecondEmail -> UserProfile { userProfileSecondEmail, ..} ) <$> f userProfileSecondEmail
{-# INLINE userProfileSecondEmailL #-}

-- | 'userProfileState' Lens
userProfileStateL :: Lens_' UserProfile (Maybe Text)
userProfileStateL f UserProfile{..} = (\userProfileState -> UserProfile { userProfileState, ..} ) <$> f userProfileState
{-# INLINE userProfileStateL #-}

-- | 'userProfileStreetAddress' Lens
userProfileStreetAddressL :: Lens_' UserProfile (Maybe Text)
userProfileStreetAddressL f UserProfile{..} = (\userProfileStreetAddress -> UserProfile { userProfileStreetAddress, ..} ) <$> f userProfileStreetAddress
{-# INLINE userProfileStreetAddressL #-}

-- | 'userProfileTimezone' Lens
userProfileTimezoneL :: Lens_' UserProfile (Maybe Text)
userProfileTimezoneL f UserProfile{..} = (\userProfileTimezone -> UserProfile { userProfileTimezone, ..} ) <$> f userProfileTimezone
{-# INLINE userProfileTimezoneL #-}

-- | 'userProfileTitle' Lens
userProfileTitleL :: Lens_' UserProfile (Maybe Text)
userProfileTitleL f UserProfile{..} = (\userProfileTitle -> UserProfile { userProfileTitle, ..} ) <$> f userProfileTitle
{-# INLINE userProfileTitleL #-}

-- | 'userProfileUserType' Lens
userProfileUserTypeL :: Lens_' UserProfile (Maybe Text)
userProfileUserTypeL f UserProfile{..} = (\userProfileUserType -> UserProfile { userProfileUserType, ..} ) <$> f userProfileUserType
{-# INLINE userProfileUserTypeL #-}

-- | 'userProfileZipCode' Lens
userProfileZipCodeL :: Lens_' UserProfile (Maybe Text)
userProfileZipCodeL f UserProfile{..} = (\userProfileZipCode -> UserProfile { userProfileZipCode, ..} ) <$> f userProfileZipCode
{-# INLINE userProfileZipCodeL #-}



-- * UserSchema

-- | 'userSchemaId' Lens
userSchemaIdL :: Lens_' UserSchema (Maybe Text)
userSchemaIdL f UserSchema{..} = (\userSchemaId -> UserSchema { userSchemaId, ..} ) <$> f userSchemaId
{-# INLINE userSchemaIdL #-}

-- | 'userSchemaSchema' Lens
userSchemaSchemaL :: Lens_' UserSchema (Maybe Text)
userSchemaSchemaL f UserSchema{..} = (\userSchemaSchema -> UserSchema { userSchemaSchema, ..} ) <$> f userSchemaSchema
{-# INLINE userSchemaSchemaL #-}

-- | 'userSchemaName' Lens
userSchemaNameL :: Lens_' UserSchema (Maybe Text)
userSchemaNameL f UserSchema{..} = (\userSchemaName -> UserSchema { userSchemaName, ..} ) <$> f userSchemaName
{-# INLINE userSchemaNameL #-}

-- | 'userSchemaTitle' Lens
userSchemaTitleL :: Lens_' UserSchema (Maybe Text)
userSchemaTitleL f UserSchema{..} = (\userSchemaTitle -> UserSchema { userSchemaTitle, ..} ) <$> f userSchemaTitle
{-# INLINE userSchemaTitleL #-}

-- | 'userSchemaLastUpdated' Lens
userSchemaLastUpdatedL :: Lens_' UserSchema (Maybe Text)
userSchemaLastUpdatedL f UserSchema{..} = (\userSchemaLastUpdated -> UserSchema { userSchemaLastUpdated, ..} ) <$> f userSchemaLastUpdated
{-# INLINE userSchemaLastUpdatedL #-}

-- | 'userSchemaCreated' Lens
userSchemaCreatedL :: Lens_' UserSchema (Maybe Text)
userSchemaCreatedL f UserSchema{..} = (\userSchemaCreated -> UserSchema { userSchemaCreated, ..} ) <$> f userSchemaCreated
{-# INLINE userSchemaCreatedL #-}

-- | 'userSchemaDefinitions' Lens
userSchemaDefinitionsL :: Lens_' UserSchema (Maybe UserSchemaDefinitions)
userSchemaDefinitionsL f UserSchema{..} = (\userSchemaDefinitions -> UserSchema { userSchemaDefinitions, ..} ) <$> f userSchemaDefinitions
{-# INLINE userSchemaDefinitionsL #-}

-- | 'userSchemaType' Lens
userSchemaTypeL :: Lens_' UserSchema (Maybe Text)
userSchemaTypeL f UserSchema{..} = (\userSchemaType -> UserSchema { userSchemaType, ..} ) <$> f userSchemaType
{-# INLINE userSchemaTypeL #-}

-- | 'userSchemaProperties' Lens
userSchemaPropertiesL :: Lens_' UserSchema (Maybe UserSchemaProperties)
userSchemaPropertiesL f UserSchema{..} = (\userSchemaProperties -> UserSchema { userSchemaProperties, ..} ) <$> f userSchemaProperties
{-# INLINE userSchemaPropertiesL #-}

-- | 'userSchemaLinks' Lens
userSchemaLinksL :: Lens_' UserSchema (Maybe (Map.Map String A.Value))
userSchemaLinksL f UserSchema{..} = (\userSchemaLinks -> UserSchema { userSchemaLinks, ..} ) <$> f userSchemaLinks
{-# INLINE userSchemaLinksL #-}



-- * UserSchemaAttribute

-- | 'userSchemaAttributeTitle' Lens
userSchemaAttributeTitleL :: Lens_' UserSchemaAttribute (Maybe Text)
userSchemaAttributeTitleL f UserSchemaAttribute{..} = (\userSchemaAttributeTitle -> UserSchemaAttribute { userSchemaAttributeTitle, ..} ) <$> f userSchemaAttributeTitle
{-# INLINE userSchemaAttributeTitleL #-}

-- | 'userSchemaAttributeType' Lens
userSchemaAttributeTypeL :: Lens_' UserSchemaAttribute (Maybe UserSchemaAttributeType)
userSchemaAttributeTypeL f UserSchemaAttribute{..} = (\userSchemaAttributeType -> UserSchemaAttribute { userSchemaAttributeType, ..} ) <$> f userSchemaAttributeType
{-# INLINE userSchemaAttributeTypeL #-}

-- | 'userSchemaAttributeRequired' Lens
userSchemaAttributeRequiredL :: Lens_' UserSchemaAttribute (Maybe Bool)
userSchemaAttributeRequiredL f UserSchemaAttribute{..} = (\userSchemaAttributeRequired -> UserSchemaAttribute { userSchemaAttributeRequired, ..} ) <$> f userSchemaAttributeRequired
{-# INLINE userSchemaAttributeRequiredL #-}

-- | 'userSchemaAttributeMutability' Lens
userSchemaAttributeMutabilityL :: Lens_' UserSchemaAttribute (Maybe Text)
userSchemaAttributeMutabilityL f UserSchemaAttribute{..} = (\userSchemaAttributeMutability -> UserSchemaAttribute { userSchemaAttributeMutability, ..} ) <$> f userSchemaAttributeMutability
{-# INLINE userSchemaAttributeMutabilityL #-}

-- | 'userSchemaAttributeScope' Lens
userSchemaAttributeScopeL :: Lens_' UserSchemaAttribute (Maybe UserSchemaAttributeScope)
userSchemaAttributeScopeL f UserSchemaAttribute{..} = (\userSchemaAttributeScope -> UserSchemaAttribute { userSchemaAttributeScope, ..} ) <$> f userSchemaAttributeScope
{-# INLINE userSchemaAttributeScopeL #-}

-- | 'userSchemaAttributeEnum' Lens
userSchemaAttributeEnumL :: Lens_' UserSchemaAttribute (Maybe [Text])
userSchemaAttributeEnumL f UserSchemaAttribute{..} = (\userSchemaAttributeEnum -> UserSchemaAttribute { userSchemaAttributeEnum, ..} ) <$> f userSchemaAttributeEnum
{-# INLINE userSchemaAttributeEnumL #-}

-- | 'userSchemaAttributeOneOf' Lens
userSchemaAttributeOneOfL :: Lens_' UserSchemaAttribute (Maybe [UserSchemaAttributeEnum])
userSchemaAttributeOneOfL f UserSchemaAttribute{..} = (\userSchemaAttributeOneOf -> UserSchemaAttribute { userSchemaAttributeOneOf, ..} ) <$> f userSchemaAttributeOneOf
{-# INLINE userSchemaAttributeOneOfL #-}

-- | 'userSchemaAttributeMinLength' Lens
userSchemaAttributeMinLengthL :: Lens_' UserSchemaAttribute (Maybe Int)
userSchemaAttributeMinLengthL f UserSchemaAttribute{..} = (\userSchemaAttributeMinLength -> UserSchemaAttribute { userSchemaAttributeMinLength, ..} ) <$> f userSchemaAttributeMinLength
{-# INLINE userSchemaAttributeMinLengthL #-}

-- | 'userSchemaAttributeMaxLength' Lens
userSchemaAttributeMaxLengthL :: Lens_' UserSchemaAttribute (Maybe Int)
userSchemaAttributeMaxLengthL f UserSchemaAttribute{..} = (\userSchemaAttributeMaxLength -> UserSchemaAttribute { userSchemaAttributeMaxLength, ..} ) <$> f userSchemaAttributeMaxLength
{-# INLINE userSchemaAttributeMaxLengthL #-}

-- | 'userSchemaAttributeDescription' Lens
userSchemaAttributeDescriptionL :: Lens_' UserSchemaAttribute (Maybe Text)
userSchemaAttributeDescriptionL f UserSchemaAttribute{..} = (\userSchemaAttributeDescription -> UserSchemaAttribute { userSchemaAttributeDescription, ..} ) <$> f userSchemaAttributeDescription
{-# INLINE userSchemaAttributeDescriptionL #-}

-- | 'userSchemaAttributePermissions' Lens
userSchemaAttributePermissionsL :: Lens_' UserSchemaAttribute (Maybe [UserSchemaAttributePermission])
userSchemaAttributePermissionsL f UserSchemaAttribute{..} = (\userSchemaAttributePermissions -> UserSchemaAttribute { userSchemaAttributePermissions, ..} ) <$> f userSchemaAttributePermissions
{-# INLINE userSchemaAttributePermissionsL #-}

-- | 'userSchemaAttributeMaster' Lens
userSchemaAttributeMasterL :: Lens_' UserSchemaAttribute (Maybe UserSchemaAttributeMaster)
userSchemaAttributeMasterL f UserSchemaAttribute{..} = (\userSchemaAttributeMaster -> UserSchemaAttribute { userSchemaAttributeMaster, ..} ) <$> f userSchemaAttributeMaster
{-# INLINE userSchemaAttributeMasterL #-}

-- | 'userSchemaAttributeUnion' Lens
userSchemaAttributeUnionL :: Lens_' UserSchemaAttribute (Maybe UserSchemaAttributeUnion)
userSchemaAttributeUnionL f UserSchemaAttribute{..} = (\userSchemaAttributeUnion -> UserSchemaAttribute { userSchemaAttributeUnion, ..} ) <$> f userSchemaAttributeUnion
{-# INLINE userSchemaAttributeUnionL #-}

-- | 'userSchemaAttributeItems' Lens
userSchemaAttributeItemsL :: Lens_' UserSchemaAttribute (Maybe UserSchemaAttributeItems)
userSchemaAttributeItemsL f UserSchemaAttribute{..} = (\userSchemaAttributeItems -> UserSchemaAttribute { userSchemaAttributeItems, ..} ) <$> f userSchemaAttributeItems
{-# INLINE userSchemaAttributeItemsL #-}

-- | 'userSchemaAttributePattern' Lens
userSchemaAttributePatternL :: Lens_' UserSchemaAttribute (Maybe Text)
userSchemaAttributePatternL f UserSchemaAttribute{..} = (\userSchemaAttributePattern -> UserSchemaAttribute { userSchemaAttributePattern, ..} ) <$> f userSchemaAttributePattern
{-# INLINE userSchemaAttributePatternL #-}

-- | 'userSchemaAttributeUnique' Lens
userSchemaAttributeUniqueL :: Lens_' UserSchemaAttribute (Maybe Text)
userSchemaAttributeUniqueL f UserSchemaAttribute{..} = (\userSchemaAttributeUnique -> UserSchemaAttribute { userSchemaAttributeUnique, ..} ) <$> f userSchemaAttributeUnique
{-# INLINE userSchemaAttributeUniqueL #-}

-- | 'userSchemaAttributeExternalName' Lens
userSchemaAttributeExternalNameL :: Lens_' UserSchemaAttribute (Maybe Text)
userSchemaAttributeExternalNameL f UserSchemaAttribute{..} = (\userSchemaAttributeExternalName -> UserSchemaAttribute { userSchemaAttributeExternalName, ..} ) <$> f userSchemaAttributeExternalName
{-# INLINE userSchemaAttributeExternalNameL #-}

-- | 'userSchemaAttributeExternalNamespace' Lens
userSchemaAttributeExternalNamespaceL :: Lens_' UserSchemaAttribute (Maybe Text)
userSchemaAttributeExternalNamespaceL f UserSchemaAttribute{..} = (\userSchemaAttributeExternalNamespace -> UserSchemaAttribute { userSchemaAttributeExternalNamespace, ..} ) <$> f userSchemaAttributeExternalNamespace
{-# INLINE userSchemaAttributeExternalNamespaceL #-}



-- * UserSchemaAttributeEnum

-- | 'userSchemaAttributeEnumConst' Lens
userSchemaAttributeEnumConstL :: Lens_' UserSchemaAttributeEnum (Maybe Text)
userSchemaAttributeEnumConstL f UserSchemaAttributeEnum{..} = (\userSchemaAttributeEnumConst -> UserSchemaAttributeEnum { userSchemaAttributeEnumConst, ..} ) <$> f userSchemaAttributeEnumConst
{-# INLINE userSchemaAttributeEnumConstL #-}

-- | 'userSchemaAttributeEnumTitle' Lens
userSchemaAttributeEnumTitleL :: Lens_' UserSchemaAttributeEnum (Maybe Text)
userSchemaAttributeEnumTitleL f UserSchemaAttributeEnum{..} = (\userSchemaAttributeEnumTitle -> UserSchemaAttributeEnum { userSchemaAttributeEnumTitle, ..} ) <$> f userSchemaAttributeEnumTitle
{-# INLINE userSchemaAttributeEnumTitleL #-}



-- * UserSchemaAttributeItems

-- | 'userSchemaAttributeItemsEnum' Lens
userSchemaAttributeItemsEnumL :: Lens_' UserSchemaAttributeItems (Maybe [Text])
userSchemaAttributeItemsEnumL f UserSchemaAttributeItems{..} = (\userSchemaAttributeItemsEnum -> UserSchemaAttributeItems { userSchemaAttributeItemsEnum, ..} ) <$> f userSchemaAttributeItemsEnum
{-# INLINE userSchemaAttributeItemsEnumL #-}

-- | 'userSchemaAttributeItemsOneOf' Lens
userSchemaAttributeItemsOneOfL :: Lens_' UserSchemaAttributeItems (Maybe [UserSchemaAttributeEnum])
userSchemaAttributeItemsOneOfL f UserSchemaAttributeItems{..} = (\userSchemaAttributeItemsOneOf -> UserSchemaAttributeItems { userSchemaAttributeItemsOneOf, ..} ) <$> f userSchemaAttributeItemsOneOf
{-# INLINE userSchemaAttributeItemsOneOfL #-}

-- | 'userSchemaAttributeItemsType' Lens
userSchemaAttributeItemsTypeL :: Lens_' UserSchemaAttributeItems (Maybe Text)
userSchemaAttributeItemsTypeL f UserSchemaAttributeItems{..} = (\userSchemaAttributeItemsType -> UserSchemaAttributeItems { userSchemaAttributeItemsType, ..} ) <$> f userSchemaAttributeItemsType
{-# INLINE userSchemaAttributeItemsTypeL #-}



-- * UserSchemaAttributeMaster

-- | 'userSchemaAttributeMasterType' Lens
userSchemaAttributeMasterTypeL :: Lens_' UserSchemaAttributeMaster (Maybe UserSchemaAttributeMasterType)
userSchemaAttributeMasterTypeL f UserSchemaAttributeMaster{..} = (\userSchemaAttributeMasterType -> UserSchemaAttributeMaster { userSchemaAttributeMasterType, ..} ) <$> f userSchemaAttributeMasterType
{-# INLINE userSchemaAttributeMasterTypeL #-}

-- | 'userSchemaAttributeMasterPriority' Lens
userSchemaAttributeMasterPriorityL :: Lens_' UserSchemaAttributeMaster (Maybe [UserSchemaAttributeMasterPriority])
userSchemaAttributeMasterPriorityL f UserSchemaAttributeMaster{..} = (\userSchemaAttributeMasterPriority -> UserSchemaAttributeMaster { userSchemaAttributeMasterPriority, ..} ) <$> f userSchemaAttributeMasterPriority
{-# INLINE userSchemaAttributeMasterPriorityL #-}



-- * UserSchemaAttributeMasterPriority

-- | 'userSchemaAttributeMasterPriorityType' Lens
userSchemaAttributeMasterPriorityTypeL :: Lens_' UserSchemaAttributeMasterPriority (Maybe Text)
userSchemaAttributeMasterPriorityTypeL f UserSchemaAttributeMasterPriority{..} = (\userSchemaAttributeMasterPriorityType -> UserSchemaAttributeMasterPriority { userSchemaAttributeMasterPriorityType, ..} ) <$> f userSchemaAttributeMasterPriorityType
{-# INLINE userSchemaAttributeMasterPriorityTypeL #-}

-- | 'userSchemaAttributeMasterPriorityValue' Lens
userSchemaAttributeMasterPriorityValueL :: Lens_' UserSchemaAttributeMasterPriority (Maybe Text)
userSchemaAttributeMasterPriorityValueL f UserSchemaAttributeMasterPriority{..} = (\userSchemaAttributeMasterPriorityValue -> UserSchemaAttributeMasterPriority { userSchemaAttributeMasterPriorityValue, ..} ) <$> f userSchemaAttributeMasterPriorityValue
{-# INLINE userSchemaAttributeMasterPriorityValueL #-}



-- * UserSchemaAttributeMasterType



-- * UserSchemaAttributePermission

-- | 'userSchemaAttributePermissionPrincipal' Lens
userSchemaAttributePermissionPrincipalL :: Lens_' UserSchemaAttributePermission (Maybe Text)
userSchemaAttributePermissionPrincipalL f UserSchemaAttributePermission{..} = (\userSchemaAttributePermissionPrincipal -> UserSchemaAttributePermission { userSchemaAttributePermissionPrincipal, ..} ) <$> f userSchemaAttributePermissionPrincipal
{-# INLINE userSchemaAttributePermissionPrincipalL #-}

-- | 'userSchemaAttributePermissionAction' Lens
userSchemaAttributePermissionActionL :: Lens_' UserSchemaAttributePermission (Maybe Text)
userSchemaAttributePermissionActionL f UserSchemaAttributePermission{..} = (\userSchemaAttributePermissionAction -> UserSchemaAttributePermission { userSchemaAttributePermissionAction, ..} ) <$> f userSchemaAttributePermissionAction
{-# INLINE userSchemaAttributePermissionActionL #-}



-- * UserSchemaAttributeScope



-- * UserSchemaAttributeType



-- * UserSchemaAttributeUnion



-- * UserSchemaBase

-- | 'userSchemaBaseId' Lens
userSchemaBaseIdL :: Lens_' UserSchemaBase (Maybe Text)
userSchemaBaseIdL f UserSchemaBase{..} = (\userSchemaBaseId -> UserSchemaBase { userSchemaBaseId, ..} ) <$> f userSchemaBaseId
{-# INLINE userSchemaBaseIdL #-}

-- | 'userSchemaBaseType' Lens
userSchemaBaseTypeL :: Lens_' UserSchemaBase (Maybe Text)
userSchemaBaseTypeL f UserSchemaBase{..} = (\userSchemaBaseType -> UserSchemaBase { userSchemaBaseType, ..} ) <$> f userSchemaBaseType
{-# INLINE userSchemaBaseTypeL #-}

-- | 'userSchemaBaseProperties' Lens
userSchemaBasePropertiesL :: Lens_' UserSchemaBase (Maybe UserSchemaBaseProperties)
userSchemaBasePropertiesL f UserSchemaBase{..} = (\userSchemaBaseProperties -> UserSchemaBase { userSchemaBaseProperties, ..} ) <$> f userSchemaBaseProperties
{-# INLINE userSchemaBasePropertiesL #-}

-- | 'userSchemaBaseRequired' Lens
userSchemaBaseRequiredL :: Lens_' UserSchemaBase (Maybe [Text])
userSchemaBaseRequiredL f UserSchemaBase{..} = (\userSchemaBaseRequired -> UserSchemaBase { userSchemaBaseRequired, ..} ) <$> f userSchemaBaseRequired
{-# INLINE userSchemaBaseRequiredL #-}



-- * UserSchemaBaseProperties

-- | 'userSchemaBasePropertiesLogin' Lens
userSchemaBasePropertiesLoginL :: Lens_' UserSchemaBaseProperties (Maybe UserSchemaAttribute)
userSchemaBasePropertiesLoginL f UserSchemaBaseProperties{..} = (\userSchemaBasePropertiesLogin -> UserSchemaBaseProperties { userSchemaBasePropertiesLogin, ..} ) <$> f userSchemaBasePropertiesLogin
{-# INLINE userSchemaBasePropertiesLoginL #-}

-- | 'userSchemaBasePropertiesFirstName' Lens
userSchemaBasePropertiesFirstNameL :: Lens_' UserSchemaBaseProperties (Maybe UserSchemaAttribute)
userSchemaBasePropertiesFirstNameL f UserSchemaBaseProperties{..} = (\userSchemaBasePropertiesFirstName -> UserSchemaBaseProperties { userSchemaBasePropertiesFirstName, ..} ) <$> f userSchemaBasePropertiesFirstName
{-# INLINE userSchemaBasePropertiesFirstNameL #-}

-- | 'userSchemaBasePropertiesLastName' Lens
userSchemaBasePropertiesLastNameL :: Lens_' UserSchemaBaseProperties (Maybe UserSchemaAttribute)
userSchemaBasePropertiesLastNameL f UserSchemaBaseProperties{..} = (\userSchemaBasePropertiesLastName -> UserSchemaBaseProperties { userSchemaBasePropertiesLastName, ..} ) <$> f userSchemaBasePropertiesLastName
{-# INLINE userSchemaBasePropertiesLastNameL #-}

-- | 'userSchemaBasePropertiesMiddleName' Lens
userSchemaBasePropertiesMiddleNameL :: Lens_' UserSchemaBaseProperties (Maybe UserSchemaAttribute)
userSchemaBasePropertiesMiddleNameL f UserSchemaBaseProperties{..} = (\userSchemaBasePropertiesMiddleName -> UserSchemaBaseProperties { userSchemaBasePropertiesMiddleName, ..} ) <$> f userSchemaBasePropertiesMiddleName
{-# INLINE userSchemaBasePropertiesMiddleNameL #-}

-- | 'userSchemaBasePropertiesHonorificPrefix' Lens
userSchemaBasePropertiesHonorificPrefixL :: Lens_' UserSchemaBaseProperties (Maybe UserSchemaAttribute)
userSchemaBasePropertiesHonorificPrefixL f UserSchemaBaseProperties{..} = (\userSchemaBasePropertiesHonorificPrefix -> UserSchemaBaseProperties { userSchemaBasePropertiesHonorificPrefix, ..} ) <$> f userSchemaBasePropertiesHonorificPrefix
{-# INLINE userSchemaBasePropertiesHonorificPrefixL #-}

-- | 'userSchemaBasePropertiesHonorificSuffix' Lens
userSchemaBasePropertiesHonorificSuffixL :: Lens_' UserSchemaBaseProperties (Maybe UserSchemaAttribute)
userSchemaBasePropertiesHonorificSuffixL f UserSchemaBaseProperties{..} = (\userSchemaBasePropertiesHonorificSuffix -> UserSchemaBaseProperties { userSchemaBasePropertiesHonorificSuffix, ..} ) <$> f userSchemaBasePropertiesHonorificSuffix
{-# INLINE userSchemaBasePropertiesHonorificSuffixL #-}

-- | 'userSchemaBasePropertiesEmail' Lens
userSchemaBasePropertiesEmailL :: Lens_' UserSchemaBaseProperties (Maybe UserSchemaAttribute)
userSchemaBasePropertiesEmailL f UserSchemaBaseProperties{..} = (\userSchemaBasePropertiesEmail -> UserSchemaBaseProperties { userSchemaBasePropertiesEmail, ..} ) <$> f userSchemaBasePropertiesEmail
{-# INLINE userSchemaBasePropertiesEmailL #-}

-- | 'userSchemaBasePropertiesTitle' Lens
userSchemaBasePropertiesTitleL :: Lens_' UserSchemaBaseProperties (Maybe UserSchemaAttribute)
userSchemaBasePropertiesTitleL f UserSchemaBaseProperties{..} = (\userSchemaBasePropertiesTitle -> UserSchemaBaseProperties { userSchemaBasePropertiesTitle, ..} ) <$> f userSchemaBasePropertiesTitle
{-# INLINE userSchemaBasePropertiesTitleL #-}

-- | 'userSchemaBasePropertiesDisplayName' Lens
userSchemaBasePropertiesDisplayNameL :: Lens_' UserSchemaBaseProperties (Maybe UserSchemaAttribute)
userSchemaBasePropertiesDisplayNameL f UserSchemaBaseProperties{..} = (\userSchemaBasePropertiesDisplayName -> UserSchemaBaseProperties { userSchemaBasePropertiesDisplayName, ..} ) <$> f userSchemaBasePropertiesDisplayName
{-# INLINE userSchemaBasePropertiesDisplayNameL #-}

-- | 'userSchemaBasePropertiesNickName' Lens
userSchemaBasePropertiesNickNameL :: Lens_' UserSchemaBaseProperties (Maybe UserSchemaAttribute)
userSchemaBasePropertiesNickNameL f UserSchemaBaseProperties{..} = (\userSchemaBasePropertiesNickName -> UserSchemaBaseProperties { userSchemaBasePropertiesNickName, ..} ) <$> f userSchemaBasePropertiesNickName
{-# INLINE userSchemaBasePropertiesNickNameL #-}

-- | 'userSchemaBasePropertiesProfileUrl' Lens
userSchemaBasePropertiesProfileUrlL :: Lens_' UserSchemaBaseProperties (Maybe UserSchemaAttribute)
userSchemaBasePropertiesProfileUrlL f UserSchemaBaseProperties{..} = (\userSchemaBasePropertiesProfileUrl -> UserSchemaBaseProperties { userSchemaBasePropertiesProfileUrl, ..} ) <$> f userSchemaBasePropertiesProfileUrl
{-# INLINE userSchemaBasePropertiesProfileUrlL #-}

-- | 'userSchemaBasePropertiesSecondEmail' Lens
userSchemaBasePropertiesSecondEmailL :: Lens_' UserSchemaBaseProperties (Maybe UserSchemaAttribute)
userSchemaBasePropertiesSecondEmailL f UserSchemaBaseProperties{..} = (\userSchemaBasePropertiesSecondEmail -> UserSchemaBaseProperties { userSchemaBasePropertiesSecondEmail, ..} ) <$> f userSchemaBasePropertiesSecondEmail
{-# INLINE userSchemaBasePropertiesSecondEmailL #-}

-- | 'userSchemaBasePropertiesMobilePhone' Lens
userSchemaBasePropertiesMobilePhoneL :: Lens_' UserSchemaBaseProperties (Maybe UserSchemaAttribute)
userSchemaBasePropertiesMobilePhoneL f UserSchemaBaseProperties{..} = (\userSchemaBasePropertiesMobilePhone -> UserSchemaBaseProperties { userSchemaBasePropertiesMobilePhone, ..} ) <$> f userSchemaBasePropertiesMobilePhone
{-# INLINE userSchemaBasePropertiesMobilePhoneL #-}

-- | 'userSchemaBasePropertiesPrimaryPhone' Lens
userSchemaBasePropertiesPrimaryPhoneL :: Lens_' UserSchemaBaseProperties (Maybe UserSchemaAttribute)
userSchemaBasePropertiesPrimaryPhoneL f UserSchemaBaseProperties{..} = (\userSchemaBasePropertiesPrimaryPhone -> UserSchemaBaseProperties { userSchemaBasePropertiesPrimaryPhone, ..} ) <$> f userSchemaBasePropertiesPrimaryPhone
{-# INLINE userSchemaBasePropertiesPrimaryPhoneL #-}

-- | 'userSchemaBasePropertiesStreetAddress' Lens
userSchemaBasePropertiesStreetAddressL :: Lens_' UserSchemaBaseProperties (Maybe UserSchemaAttribute)
userSchemaBasePropertiesStreetAddressL f UserSchemaBaseProperties{..} = (\userSchemaBasePropertiesStreetAddress -> UserSchemaBaseProperties { userSchemaBasePropertiesStreetAddress, ..} ) <$> f userSchemaBasePropertiesStreetAddress
{-# INLINE userSchemaBasePropertiesStreetAddressL #-}

-- | 'userSchemaBasePropertiesCity' Lens
userSchemaBasePropertiesCityL :: Lens_' UserSchemaBaseProperties (Maybe UserSchemaAttribute)
userSchemaBasePropertiesCityL f UserSchemaBaseProperties{..} = (\userSchemaBasePropertiesCity -> UserSchemaBaseProperties { userSchemaBasePropertiesCity, ..} ) <$> f userSchemaBasePropertiesCity
{-# INLINE userSchemaBasePropertiesCityL #-}

-- | 'userSchemaBasePropertiesState' Lens
userSchemaBasePropertiesStateL :: Lens_' UserSchemaBaseProperties (Maybe UserSchemaAttribute)
userSchemaBasePropertiesStateL f UserSchemaBaseProperties{..} = (\userSchemaBasePropertiesState -> UserSchemaBaseProperties { userSchemaBasePropertiesState, ..} ) <$> f userSchemaBasePropertiesState
{-# INLINE userSchemaBasePropertiesStateL #-}

-- | 'userSchemaBasePropertiesZipCode' Lens
userSchemaBasePropertiesZipCodeL :: Lens_' UserSchemaBaseProperties (Maybe UserSchemaAttribute)
userSchemaBasePropertiesZipCodeL f UserSchemaBaseProperties{..} = (\userSchemaBasePropertiesZipCode -> UserSchemaBaseProperties { userSchemaBasePropertiesZipCode, ..} ) <$> f userSchemaBasePropertiesZipCode
{-# INLINE userSchemaBasePropertiesZipCodeL #-}

-- | 'userSchemaBasePropertiesCountryCode' Lens
userSchemaBasePropertiesCountryCodeL :: Lens_' UserSchemaBaseProperties (Maybe UserSchemaAttribute)
userSchemaBasePropertiesCountryCodeL f UserSchemaBaseProperties{..} = (\userSchemaBasePropertiesCountryCode -> UserSchemaBaseProperties { userSchemaBasePropertiesCountryCode, ..} ) <$> f userSchemaBasePropertiesCountryCode
{-# INLINE userSchemaBasePropertiesCountryCodeL #-}

-- | 'userSchemaBasePropertiesPostalAddress' Lens
userSchemaBasePropertiesPostalAddressL :: Lens_' UserSchemaBaseProperties (Maybe UserSchemaAttribute)
userSchemaBasePropertiesPostalAddressL f UserSchemaBaseProperties{..} = (\userSchemaBasePropertiesPostalAddress -> UserSchemaBaseProperties { userSchemaBasePropertiesPostalAddress, ..} ) <$> f userSchemaBasePropertiesPostalAddress
{-# INLINE userSchemaBasePropertiesPostalAddressL #-}

-- | 'userSchemaBasePropertiesPreferredLanguage' Lens
userSchemaBasePropertiesPreferredLanguageL :: Lens_' UserSchemaBaseProperties (Maybe UserSchemaAttribute)
userSchemaBasePropertiesPreferredLanguageL f UserSchemaBaseProperties{..} = (\userSchemaBasePropertiesPreferredLanguage -> UserSchemaBaseProperties { userSchemaBasePropertiesPreferredLanguage, ..} ) <$> f userSchemaBasePropertiesPreferredLanguage
{-# INLINE userSchemaBasePropertiesPreferredLanguageL #-}

-- | 'userSchemaBasePropertiesLocale' Lens
userSchemaBasePropertiesLocaleL :: Lens_' UserSchemaBaseProperties (Maybe UserSchemaAttribute)
userSchemaBasePropertiesLocaleL f UserSchemaBaseProperties{..} = (\userSchemaBasePropertiesLocale -> UserSchemaBaseProperties { userSchemaBasePropertiesLocale, ..} ) <$> f userSchemaBasePropertiesLocale
{-# INLINE userSchemaBasePropertiesLocaleL #-}

-- | 'userSchemaBasePropertiesTimezone' Lens
userSchemaBasePropertiesTimezoneL :: Lens_' UserSchemaBaseProperties (Maybe UserSchemaAttribute)
userSchemaBasePropertiesTimezoneL f UserSchemaBaseProperties{..} = (\userSchemaBasePropertiesTimezone -> UserSchemaBaseProperties { userSchemaBasePropertiesTimezone, ..} ) <$> f userSchemaBasePropertiesTimezone
{-# INLINE userSchemaBasePropertiesTimezoneL #-}

-- | 'userSchemaBasePropertiesUserType' Lens
userSchemaBasePropertiesUserTypeL :: Lens_' UserSchemaBaseProperties (Maybe UserSchemaAttribute)
userSchemaBasePropertiesUserTypeL f UserSchemaBaseProperties{..} = (\userSchemaBasePropertiesUserType -> UserSchemaBaseProperties { userSchemaBasePropertiesUserType, ..} ) <$> f userSchemaBasePropertiesUserType
{-# INLINE userSchemaBasePropertiesUserTypeL #-}

-- | 'userSchemaBasePropertiesEmployeeNumber' Lens
userSchemaBasePropertiesEmployeeNumberL :: Lens_' UserSchemaBaseProperties (Maybe UserSchemaAttribute)
userSchemaBasePropertiesEmployeeNumberL f UserSchemaBaseProperties{..} = (\userSchemaBasePropertiesEmployeeNumber -> UserSchemaBaseProperties { userSchemaBasePropertiesEmployeeNumber, ..} ) <$> f userSchemaBasePropertiesEmployeeNumber
{-# INLINE userSchemaBasePropertiesEmployeeNumberL #-}

-- | 'userSchemaBasePropertiesCostCenter' Lens
userSchemaBasePropertiesCostCenterL :: Lens_' UserSchemaBaseProperties (Maybe UserSchemaAttribute)
userSchemaBasePropertiesCostCenterL f UserSchemaBaseProperties{..} = (\userSchemaBasePropertiesCostCenter -> UserSchemaBaseProperties { userSchemaBasePropertiesCostCenter, ..} ) <$> f userSchemaBasePropertiesCostCenter
{-# INLINE userSchemaBasePropertiesCostCenterL #-}

-- | 'userSchemaBasePropertiesOrganization' Lens
userSchemaBasePropertiesOrganizationL :: Lens_' UserSchemaBaseProperties (Maybe UserSchemaAttribute)
userSchemaBasePropertiesOrganizationL f UserSchemaBaseProperties{..} = (\userSchemaBasePropertiesOrganization -> UserSchemaBaseProperties { userSchemaBasePropertiesOrganization, ..} ) <$> f userSchemaBasePropertiesOrganization
{-# INLINE userSchemaBasePropertiesOrganizationL #-}

-- | 'userSchemaBasePropertiesDivision' Lens
userSchemaBasePropertiesDivisionL :: Lens_' UserSchemaBaseProperties (Maybe UserSchemaAttribute)
userSchemaBasePropertiesDivisionL f UserSchemaBaseProperties{..} = (\userSchemaBasePropertiesDivision -> UserSchemaBaseProperties { userSchemaBasePropertiesDivision, ..} ) <$> f userSchemaBasePropertiesDivision
{-# INLINE userSchemaBasePropertiesDivisionL #-}

-- | 'userSchemaBasePropertiesDepartment' Lens
userSchemaBasePropertiesDepartmentL :: Lens_' UserSchemaBaseProperties (Maybe UserSchemaAttribute)
userSchemaBasePropertiesDepartmentL f UserSchemaBaseProperties{..} = (\userSchemaBasePropertiesDepartment -> UserSchemaBaseProperties { userSchemaBasePropertiesDepartment, ..} ) <$> f userSchemaBasePropertiesDepartment
{-# INLINE userSchemaBasePropertiesDepartmentL #-}

-- | 'userSchemaBasePropertiesManagerId' Lens
userSchemaBasePropertiesManagerIdL :: Lens_' UserSchemaBaseProperties (Maybe UserSchemaAttribute)
userSchemaBasePropertiesManagerIdL f UserSchemaBaseProperties{..} = (\userSchemaBasePropertiesManagerId -> UserSchemaBaseProperties { userSchemaBasePropertiesManagerId, ..} ) <$> f userSchemaBasePropertiesManagerId
{-# INLINE userSchemaBasePropertiesManagerIdL #-}

-- | 'userSchemaBasePropertiesManager' Lens
userSchemaBasePropertiesManagerL :: Lens_' UserSchemaBaseProperties (Maybe UserSchemaAttribute)
userSchemaBasePropertiesManagerL f UserSchemaBaseProperties{..} = (\userSchemaBasePropertiesManager -> UserSchemaBaseProperties { userSchemaBasePropertiesManager, ..} ) <$> f userSchemaBasePropertiesManager
{-# INLINE userSchemaBasePropertiesManagerL #-}



-- * UserSchemaDefinitions

-- | 'userSchemaDefinitionsBase' Lens
userSchemaDefinitionsBaseL :: Lens_' UserSchemaDefinitions (Maybe UserSchemaBase)
userSchemaDefinitionsBaseL f UserSchemaDefinitions{..} = (\userSchemaDefinitionsBase -> UserSchemaDefinitions { userSchemaDefinitionsBase, ..} ) <$> f userSchemaDefinitionsBase
{-# INLINE userSchemaDefinitionsBaseL #-}

-- | 'userSchemaDefinitionsCustom' Lens
userSchemaDefinitionsCustomL :: Lens_' UserSchemaDefinitions (Maybe UserSchemaPublic)
userSchemaDefinitionsCustomL f UserSchemaDefinitions{..} = (\userSchemaDefinitionsCustom -> UserSchemaDefinitions { userSchemaDefinitionsCustom, ..} ) <$> f userSchemaDefinitionsCustom
{-# INLINE userSchemaDefinitionsCustomL #-}



-- * UserSchemaProperties

-- | 'userSchemaPropertiesProfile' Lens
userSchemaPropertiesProfileL :: Lens_' UserSchemaProperties (Maybe UserSchemaPropertiesProfile)
userSchemaPropertiesProfileL f UserSchemaProperties{..} = (\userSchemaPropertiesProfile -> UserSchemaProperties { userSchemaPropertiesProfile, ..} ) <$> f userSchemaPropertiesProfile
{-# INLINE userSchemaPropertiesProfileL #-}



-- * UserSchemaPropertiesProfile

-- | 'userSchemaPropertiesProfileAllOf' Lens
userSchemaPropertiesProfileAllOfL :: Lens_' UserSchemaPropertiesProfile (Maybe [UserSchemaPropertiesProfileItem])
userSchemaPropertiesProfileAllOfL f UserSchemaPropertiesProfile{..} = (\userSchemaPropertiesProfileAllOf -> UserSchemaPropertiesProfile { userSchemaPropertiesProfileAllOf, ..} ) <$> f userSchemaPropertiesProfileAllOf
{-# INLINE userSchemaPropertiesProfileAllOfL #-}



-- * UserSchemaPropertiesProfileItem

-- | 'userSchemaPropertiesProfileItemRef' Lens
userSchemaPropertiesProfileItemRefL :: Lens_' UserSchemaPropertiesProfileItem (Maybe Text)
userSchemaPropertiesProfileItemRefL f UserSchemaPropertiesProfileItem{..} = (\userSchemaPropertiesProfileItemRef -> UserSchemaPropertiesProfileItem { userSchemaPropertiesProfileItemRef, ..} ) <$> f userSchemaPropertiesProfileItemRef
{-# INLINE userSchemaPropertiesProfileItemRefL #-}



-- * UserSchemaPublic

-- | 'userSchemaPublicId' Lens
userSchemaPublicIdL :: Lens_' UserSchemaPublic (Maybe Text)
userSchemaPublicIdL f UserSchemaPublic{..} = (\userSchemaPublicId -> UserSchemaPublic { userSchemaPublicId, ..} ) <$> f userSchemaPublicId
{-# INLINE userSchemaPublicIdL #-}

-- | 'userSchemaPublicType' Lens
userSchemaPublicTypeL :: Lens_' UserSchemaPublic (Maybe Text)
userSchemaPublicTypeL f UserSchemaPublic{..} = (\userSchemaPublicType -> UserSchemaPublic { userSchemaPublicType, ..} ) <$> f userSchemaPublicType
{-# INLINE userSchemaPublicTypeL #-}

-- | 'userSchemaPublicProperties' Lens
userSchemaPublicPropertiesL :: Lens_' UserSchemaPublic (Maybe (Map.Map String UserSchemaAttribute))
userSchemaPublicPropertiesL f UserSchemaPublic{..} = (\userSchemaPublicProperties -> UserSchemaPublic { userSchemaPublicProperties, ..} ) <$> f userSchemaPublicProperties
{-# INLINE userSchemaPublicPropertiesL #-}

-- | 'userSchemaPublicRequired' Lens
userSchemaPublicRequiredL :: Lens_' UserSchemaPublic (Maybe [Text])
userSchemaPublicRequiredL f UserSchemaPublic{..} = (\userSchemaPublicRequired -> UserSchemaPublic { userSchemaPublicRequired, ..} ) <$> f userSchemaPublicRequired
{-# INLINE userSchemaPublicRequiredL #-}



-- * UserStatus



-- * UserStatusPolicyRuleCondition

-- | 'userStatusPolicyRuleConditionValue' Lens
userStatusPolicyRuleConditionValueL :: Lens_' UserStatusPolicyRuleCondition (Maybe E'Status4)
userStatusPolicyRuleConditionValueL f UserStatusPolicyRuleCondition{..} = (\userStatusPolicyRuleConditionValue -> UserStatusPolicyRuleCondition { userStatusPolicyRuleConditionValue, ..} ) <$> f userStatusPolicyRuleConditionValue
{-# INLINE userStatusPolicyRuleConditionValueL #-}



-- * UserType

-- | 'userTypeLinks' Lens
userTypeLinksL :: Lens_' UserType (Maybe (Map.Map String A.Value))
userTypeLinksL f UserType{..} = (\userTypeLinks -> UserType { userTypeLinks, ..} ) <$> f userTypeLinks
{-# INLINE userTypeLinksL #-}

-- | 'userTypeCreated' Lens
userTypeCreatedL :: Lens_' UserType (Maybe DateTime)
userTypeCreatedL f UserType{..} = (\userTypeCreated -> UserType { userTypeCreated, ..} ) <$> f userTypeCreated
{-# INLINE userTypeCreatedL #-}

-- | 'userTypeCreatedBy' Lens
userTypeCreatedByL :: Lens_' UserType (Maybe Text)
userTypeCreatedByL f UserType{..} = (\userTypeCreatedBy -> UserType { userTypeCreatedBy, ..} ) <$> f userTypeCreatedBy
{-# INLINE userTypeCreatedByL #-}

-- | 'userTypeDefault' Lens
userTypeDefaultL :: Lens_' UserType (Maybe Bool)
userTypeDefaultL f UserType{..} = (\userTypeDefault -> UserType { userTypeDefault, ..} ) <$> f userTypeDefault
{-# INLINE userTypeDefaultL #-}

-- | 'userTypeDescription' Lens
userTypeDescriptionL :: Lens_' UserType (Maybe Text)
userTypeDescriptionL f UserType{..} = (\userTypeDescription -> UserType { userTypeDescription, ..} ) <$> f userTypeDescription
{-# INLINE userTypeDescriptionL #-}

-- | 'userTypeDisplayName' Lens
userTypeDisplayNameL :: Lens_' UserType (Maybe Text)
userTypeDisplayNameL f UserType{..} = (\userTypeDisplayName -> UserType { userTypeDisplayName, ..} ) <$> f userTypeDisplayName
{-# INLINE userTypeDisplayNameL #-}

-- | 'userTypeId' Lens
userTypeIdL :: Lens_' UserType (Maybe Text)
userTypeIdL f UserType{..} = (\userTypeId -> UserType { userTypeId, ..} ) <$> f userTypeId
{-# INLINE userTypeIdL #-}

-- | 'userTypeLastUpdated' Lens
userTypeLastUpdatedL :: Lens_' UserType (Maybe DateTime)
userTypeLastUpdatedL f UserType{..} = (\userTypeLastUpdated -> UserType { userTypeLastUpdated, ..} ) <$> f userTypeLastUpdated
{-# INLINE userTypeLastUpdatedL #-}

-- | 'userTypeLastUpdatedBy' Lens
userTypeLastUpdatedByL :: Lens_' UserType (Maybe Text)
userTypeLastUpdatedByL f UserType{..} = (\userTypeLastUpdatedBy -> UserType { userTypeLastUpdatedBy, ..} ) <$> f userTypeLastUpdatedBy
{-# INLINE userTypeLastUpdatedByL #-}

-- | 'userTypeName' Lens
userTypeNameL :: Lens_' UserType (Maybe Text)
userTypeNameL f UserType{..} = (\userTypeName -> UserType { userTypeName, ..} ) <$> f userTypeName
{-# INLINE userTypeNameL #-}



-- * UserTypeCondition

-- | 'userTypeConditionExclude' Lens
userTypeConditionExcludeL :: Lens_' UserTypeCondition (Maybe [Text])
userTypeConditionExcludeL f UserTypeCondition{..} = (\userTypeConditionExclude -> UserTypeCondition { userTypeConditionExclude, ..} ) <$> f userTypeConditionExclude
{-# INLINE userTypeConditionExcludeL #-}

-- | 'userTypeConditionInclude' Lens
userTypeConditionIncludeL :: Lens_' UserTypeCondition (Maybe [Text])
userTypeConditionIncludeL f UserTypeCondition{..} = (\userTypeConditionInclude -> UserTypeCondition { userTypeConditionInclude, ..} ) <$> f userTypeConditionInclude
{-# INLINE userTypeConditionIncludeL #-}



-- * UserVerificationEnum



-- * VerificationMethod

-- | 'verificationMethodFactorMode' Lens
verificationMethodFactorModeL :: Lens_' VerificationMethod (Maybe Text)
verificationMethodFactorModeL f VerificationMethod{..} = (\verificationMethodFactorMode -> VerificationMethod { verificationMethodFactorMode, ..} ) <$> f verificationMethodFactorMode
{-# INLINE verificationMethodFactorModeL #-}

-- | 'verificationMethodType' Lens
verificationMethodTypeL :: Lens_' VerificationMethod (Maybe Text)
verificationMethodTypeL f VerificationMethod{..} = (\verificationMethodType -> VerificationMethod { verificationMethodType, ..} ) <$> f verificationMethodType
{-# INLINE verificationMethodTypeL #-}

-- | 'verificationMethodReauthenticateIn' Lens
verificationMethodReauthenticateInL :: Lens_' VerificationMethod (Maybe Text)
verificationMethodReauthenticateInL f VerificationMethod{..} = (\verificationMethodReauthenticateIn -> VerificationMethod { verificationMethodReauthenticateIn, ..} ) <$> f verificationMethodReauthenticateIn
{-# INLINE verificationMethodReauthenticateInL #-}

-- | 'verificationMethodConstraints' Lens
verificationMethodConstraintsL :: Lens_' VerificationMethod (Maybe [AccessPolicyConstraints])
verificationMethodConstraintsL f VerificationMethod{..} = (\verificationMethodConstraints -> VerificationMethod { verificationMethodConstraints, ..} ) <$> f verificationMethodConstraints
{-# INLINE verificationMethodConstraintsL #-}



-- * VerifyFactorRequest

-- | 'verifyFactorRequestActivationToken' Lens
verifyFactorRequestActivationTokenL :: Lens_' VerifyFactorRequest (Maybe Text)
verifyFactorRequestActivationTokenL f VerifyFactorRequest{..} = (\verifyFactorRequestActivationToken -> VerifyFactorRequest { verifyFactorRequestActivationToken, ..} ) <$> f verifyFactorRequestActivationToken
{-# INLINE verifyFactorRequestActivationTokenL #-}

-- | 'verifyFactorRequestAnswer' Lens
verifyFactorRequestAnswerL :: Lens_' VerifyFactorRequest (Maybe Text)
verifyFactorRequestAnswerL f VerifyFactorRequest{..} = (\verifyFactorRequestAnswer -> VerifyFactorRequest { verifyFactorRequestAnswer, ..} ) <$> f verifyFactorRequestAnswer
{-# INLINE verifyFactorRequestAnswerL #-}

-- | 'verifyFactorRequestAttestation' Lens
verifyFactorRequestAttestationL :: Lens_' VerifyFactorRequest (Maybe Text)
verifyFactorRequestAttestationL f VerifyFactorRequest{..} = (\verifyFactorRequestAttestation -> VerifyFactorRequest { verifyFactorRequestAttestation, ..} ) <$> f verifyFactorRequestAttestation
{-# INLINE verifyFactorRequestAttestationL #-}

-- | 'verifyFactorRequestClientData' Lens
verifyFactorRequestClientDataL :: Lens_' VerifyFactorRequest (Maybe Text)
verifyFactorRequestClientDataL f VerifyFactorRequest{..} = (\verifyFactorRequestClientData -> VerifyFactorRequest { verifyFactorRequestClientData, ..} ) <$> f verifyFactorRequestClientData
{-# INLINE verifyFactorRequestClientDataL #-}

-- | 'verifyFactorRequestNextPassCode' Lens
verifyFactorRequestNextPassCodeL :: Lens_' VerifyFactorRequest (Maybe Text)
verifyFactorRequestNextPassCodeL f VerifyFactorRequest{..} = (\verifyFactorRequestNextPassCode -> VerifyFactorRequest { verifyFactorRequestNextPassCode, ..} ) <$> f verifyFactorRequestNextPassCode
{-# INLINE verifyFactorRequestNextPassCodeL #-}

-- | 'verifyFactorRequestPassCode' Lens
verifyFactorRequestPassCodeL :: Lens_' VerifyFactorRequest (Maybe Text)
verifyFactorRequestPassCodeL f VerifyFactorRequest{..} = (\verifyFactorRequestPassCode -> VerifyFactorRequest { verifyFactorRequestPassCode, ..} ) <$> f verifyFactorRequestPassCode
{-# INLINE verifyFactorRequestPassCodeL #-}

-- | 'verifyFactorRequestRegistrationData' Lens
verifyFactorRequestRegistrationDataL :: Lens_' VerifyFactorRequest (Maybe Text)
verifyFactorRequestRegistrationDataL f VerifyFactorRequest{..} = (\verifyFactorRequestRegistrationData -> VerifyFactorRequest { verifyFactorRequestRegistrationData, ..} ) <$> f verifyFactorRequestRegistrationData
{-# INLINE verifyFactorRequestRegistrationDataL #-}

-- | 'verifyFactorRequestStateToken' Lens
verifyFactorRequestStateTokenL :: Lens_' VerifyFactorRequest (Maybe Text)
verifyFactorRequestStateTokenL f VerifyFactorRequest{..} = (\verifyFactorRequestStateToken -> VerifyFactorRequest { verifyFactorRequestStateToken, ..} ) <$> f verifyFactorRequestStateToken
{-# INLINE verifyFactorRequestStateTokenL #-}



-- * VerifyUserFactorResponse

-- | 'verifyUserFactorResponseEmbedded' Lens
verifyUserFactorResponseEmbeddedL :: Lens_' VerifyUserFactorResponse (Maybe (Map.Map String A.Value))
verifyUserFactorResponseEmbeddedL f VerifyUserFactorResponse{..} = (\verifyUserFactorResponseEmbedded -> VerifyUserFactorResponse { verifyUserFactorResponseEmbedded, ..} ) <$> f verifyUserFactorResponseEmbedded
{-# INLINE verifyUserFactorResponseEmbeddedL #-}

-- | 'verifyUserFactorResponseLinks' Lens
verifyUserFactorResponseLinksL :: Lens_' VerifyUserFactorResponse (Maybe (Map.Map String A.Value))
verifyUserFactorResponseLinksL f VerifyUserFactorResponse{..} = (\verifyUserFactorResponseLinks -> VerifyUserFactorResponse { verifyUserFactorResponseLinks, ..} ) <$> f verifyUserFactorResponseLinks
{-# INLINE verifyUserFactorResponseLinksL #-}

-- | 'verifyUserFactorResponseExpiresAt' Lens
verifyUserFactorResponseExpiresAtL :: Lens_' VerifyUserFactorResponse (Maybe DateTime)
verifyUserFactorResponseExpiresAtL f VerifyUserFactorResponse{..} = (\verifyUserFactorResponseExpiresAt -> VerifyUserFactorResponse { verifyUserFactorResponseExpiresAt, ..} ) <$> f verifyUserFactorResponseExpiresAt
{-# INLINE verifyUserFactorResponseExpiresAtL #-}

-- | 'verifyUserFactorResponseFactorResult' Lens
verifyUserFactorResponseFactorResultL :: Lens_' VerifyUserFactorResponse (Maybe E'FactorResult)
verifyUserFactorResponseFactorResultL f VerifyUserFactorResponse{..} = (\verifyUserFactorResponseFactorResult -> VerifyUserFactorResponse { verifyUserFactorResponseFactorResult, ..} ) <$> f verifyUserFactorResponseFactorResult
{-# INLINE verifyUserFactorResponseFactorResultL #-}

-- | 'verifyUserFactorResponseFactorResultMessage' Lens
verifyUserFactorResponseFactorResultMessageL :: Lens_' VerifyUserFactorResponse (Maybe Text)
verifyUserFactorResponseFactorResultMessageL f VerifyUserFactorResponse{..} = (\verifyUserFactorResponseFactorResultMessage -> VerifyUserFactorResponse { verifyUserFactorResponseFactorResultMessage, ..} ) <$> f verifyUserFactorResponseFactorResultMessage
{-# INLINE verifyUserFactorResponseFactorResultMessageL #-}



-- * WebAuthnUserFactor

-- | 'webAuthnUserFactorProfile' Lens
webAuthnUserFactorProfileL :: Lens_' WebAuthnUserFactor (Maybe WebAuthnUserFactorProfile)
webAuthnUserFactorProfileL f WebAuthnUserFactor{..} = (\webAuthnUserFactorProfile -> WebAuthnUserFactor { webAuthnUserFactorProfile, ..} ) <$> f webAuthnUserFactorProfile
{-# INLINE webAuthnUserFactorProfileL #-}



-- * WebAuthnUserFactorProfile

-- | 'webAuthnUserFactorProfileCredentialId' Lens
webAuthnUserFactorProfileCredentialIdL :: Lens_' WebAuthnUserFactorProfile (Maybe Text)
webAuthnUserFactorProfileCredentialIdL f WebAuthnUserFactorProfile{..} = (\webAuthnUserFactorProfileCredentialId -> WebAuthnUserFactorProfile { webAuthnUserFactorProfileCredentialId, ..} ) <$> f webAuthnUserFactorProfileCredentialId
{-# INLINE webAuthnUserFactorProfileCredentialIdL #-}

-- | 'webAuthnUserFactorProfileAuthenticatorName' Lens
webAuthnUserFactorProfileAuthenticatorNameL :: Lens_' WebAuthnUserFactorProfile (Maybe Text)
webAuthnUserFactorProfileAuthenticatorNameL f WebAuthnUserFactorProfile{..} = (\webAuthnUserFactorProfileAuthenticatorName -> WebAuthnUserFactorProfile { webAuthnUserFactorProfileAuthenticatorName, ..} ) <$> f webAuthnUserFactorProfileAuthenticatorName
{-# INLINE webAuthnUserFactorProfileAuthenticatorNameL #-}



-- * WebUserFactor

-- | 'webUserFactorProfile' Lens
webUserFactorProfileL :: Lens_' WebUserFactor (Maybe WebUserFactorProfile)
webUserFactorProfileL f WebUserFactor{..} = (\webUserFactorProfile -> WebUserFactor { webUserFactorProfile, ..} ) <$> f webUserFactorProfile
{-# INLINE webUserFactorProfileL #-}



-- * WebUserFactorProfile

-- | 'webUserFactorProfileCredentialId' Lens
webUserFactorProfileCredentialIdL :: Lens_' WebUserFactorProfile (Maybe Text)
webUserFactorProfileCredentialIdL f WebUserFactorProfile{..} = (\webUserFactorProfileCredentialId -> WebUserFactorProfile { webUserFactorProfileCredentialId, ..} ) <$> f webUserFactorProfileCredentialId
{-# INLINE webUserFactorProfileCredentialIdL #-}



-- * WsFederationApplication

-- | 'wsFederationApplicationName' Lens
wsFederationApplicationNameL :: Lens_' WsFederationApplication (Maybe A.Value)
wsFederationApplicationNameL f WsFederationApplication{..} = (\wsFederationApplicationName -> WsFederationApplication { wsFederationApplicationName, ..} ) <$> f wsFederationApplicationName
{-# INLINE wsFederationApplicationNameL #-}

-- | 'wsFederationApplicationSettings' Lens
wsFederationApplicationSettingsL :: Lens_' WsFederationApplication (Maybe WsFederationApplicationSettings)
wsFederationApplicationSettingsL f WsFederationApplication{..} = (\wsFederationApplicationSettings -> WsFederationApplication { wsFederationApplicationSettings, ..} ) <$> f wsFederationApplicationSettings
{-# INLINE wsFederationApplicationSettingsL #-}



-- * WsFederationApplicationSettings

-- | 'wsFederationApplicationSettingsApp' Lens
wsFederationApplicationSettingsAppL :: Lens_' WsFederationApplicationSettings (Maybe WsFederationApplicationSettingsApplication)
wsFederationApplicationSettingsAppL f WsFederationApplicationSettings{..} = (\wsFederationApplicationSettingsApp -> WsFederationApplicationSettings { wsFederationApplicationSettingsApp, ..} ) <$> f wsFederationApplicationSettingsApp
{-# INLINE wsFederationApplicationSettingsAppL #-}



-- * WsFederationApplicationSettingsApplication

-- | 'wsFederationApplicationSettingsApplicationAttributeStatements' Lens
wsFederationApplicationSettingsApplicationAttributeStatementsL :: Lens_' WsFederationApplicationSettingsApplication (Maybe Text)
wsFederationApplicationSettingsApplicationAttributeStatementsL f WsFederationApplicationSettingsApplication{..} = (\wsFederationApplicationSettingsApplicationAttributeStatements -> WsFederationApplicationSettingsApplication { wsFederationApplicationSettingsApplicationAttributeStatements, ..} ) <$> f wsFederationApplicationSettingsApplicationAttributeStatements
{-# INLINE wsFederationApplicationSettingsApplicationAttributeStatementsL #-}

-- | 'wsFederationApplicationSettingsApplicationAudienceRestriction' Lens
wsFederationApplicationSettingsApplicationAudienceRestrictionL :: Lens_' WsFederationApplicationSettingsApplication (Maybe Text)
wsFederationApplicationSettingsApplicationAudienceRestrictionL f WsFederationApplicationSettingsApplication{..} = (\wsFederationApplicationSettingsApplicationAudienceRestriction -> WsFederationApplicationSettingsApplication { wsFederationApplicationSettingsApplicationAudienceRestriction, ..} ) <$> f wsFederationApplicationSettingsApplicationAudienceRestriction
{-# INLINE wsFederationApplicationSettingsApplicationAudienceRestrictionL #-}

-- | 'wsFederationApplicationSettingsApplicationAuthnContextClassRef' Lens
wsFederationApplicationSettingsApplicationAuthnContextClassRefL :: Lens_' WsFederationApplicationSettingsApplication (Maybe Text)
wsFederationApplicationSettingsApplicationAuthnContextClassRefL f WsFederationApplicationSettingsApplication{..} = (\wsFederationApplicationSettingsApplicationAuthnContextClassRef -> WsFederationApplicationSettingsApplication { wsFederationApplicationSettingsApplicationAuthnContextClassRef, ..} ) <$> f wsFederationApplicationSettingsApplicationAuthnContextClassRef
{-# INLINE wsFederationApplicationSettingsApplicationAuthnContextClassRefL #-}

-- | 'wsFederationApplicationSettingsApplicationGroupFilter' Lens
wsFederationApplicationSettingsApplicationGroupFilterL :: Lens_' WsFederationApplicationSettingsApplication (Maybe Text)
wsFederationApplicationSettingsApplicationGroupFilterL f WsFederationApplicationSettingsApplication{..} = (\wsFederationApplicationSettingsApplicationGroupFilter -> WsFederationApplicationSettingsApplication { wsFederationApplicationSettingsApplicationGroupFilter, ..} ) <$> f wsFederationApplicationSettingsApplicationGroupFilter
{-# INLINE wsFederationApplicationSettingsApplicationGroupFilterL #-}

-- | 'wsFederationApplicationSettingsApplicationGroupName' Lens
wsFederationApplicationSettingsApplicationGroupNameL :: Lens_' WsFederationApplicationSettingsApplication (Maybe Text)
wsFederationApplicationSettingsApplicationGroupNameL f WsFederationApplicationSettingsApplication{..} = (\wsFederationApplicationSettingsApplicationGroupName -> WsFederationApplicationSettingsApplication { wsFederationApplicationSettingsApplicationGroupName, ..} ) <$> f wsFederationApplicationSettingsApplicationGroupName
{-# INLINE wsFederationApplicationSettingsApplicationGroupNameL #-}

-- | 'wsFederationApplicationSettingsApplicationGroupValueFormat' Lens
wsFederationApplicationSettingsApplicationGroupValueFormatL :: Lens_' WsFederationApplicationSettingsApplication (Maybe Text)
wsFederationApplicationSettingsApplicationGroupValueFormatL f WsFederationApplicationSettingsApplication{..} = (\wsFederationApplicationSettingsApplicationGroupValueFormat -> WsFederationApplicationSettingsApplication { wsFederationApplicationSettingsApplicationGroupValueFormat, ..} ) <$> f wsFederationApplicationSettingsApplicationGroupValueFormat
{-# INLINE wsFederationApplicationSettingsApplicationGroupValueFormatL #-}

-- | 'wsFederationApplicationSettingsApplicationNameIdFormat' Lens
wsFederationApplicationSettingsApplicationNameIdFormatL :: Lens_' WsFederationApplicationSettingsApplication (Maybe Text)
wsFederationApplicationSettingsApplicationNameIdFormatL f WsFederationApplicationSettingsApplication{..} = (\wsFederationApplicationSettingsApplicationNameIdFormat -> WsFederationApplicationSettingsApplication { wsFederationApplicationSettingsApplicationNameIdFormat, ..} ) <$> f wsFederationApplicationSettingsApplicationNameIdFormat
{-# INLINE wsFederationApplicationSettingsApplicationNameIdFormatL #-}

-- | 'wsFederationApplicationSettingsApplicationRealm' Lens
wsFederationApplicationSettingsApplicationRealmL :: Lens_' WsFederationApplicationSettingsApplication (Maybe Text)
wsFederationApplicationSettingsApplicationRealmL f WsFederationApplicationSettingsApplication{..} = (\wsFederationApplicationSettingsApplicationRealm -> WsFederationApplicationSettingsApplication { wsFederationApplicationSettingsApplicationRealm, ..} ) <$> f wsFederationApplicationSettingsApplicationRealm
{-# INLINE wsFederationApplicationSettingsApplicationRealmL #-}

-- | 'wsFederationApplicationSettingsApplicationSiteUrl' Lens
wsFederationApplicationSettingsApplicationSiteUrlL :: Lens_' WsFederationApplicationSettingsApplication (Maybe Text)
wsFederationApplicationSettingsApplicationSiteUrlL f WsFederationApplicationSettingsApplication{..} = (\wsFederationApplicationSettingsApplicationSiteUrl -> WsFederationApplicationSettingsApplication { wsFederationApplicationSettingsApplicationSiteUrl, ..} ) <$> f wsFederationApplicationSettingsApplicationSiteUrl
{-# INLINE wsFederationApplicationSettingsApplicationSiteUrlL #-}

-- | 'wsFederationApplicationSettingsApplicationUsernameAttribute' Lens
wsFederationApplicationSettingsApplicationUsernameAttributeL :: Lens_' WsFederationApplicationSettingsApplication (Maybe Text)
wsFederationApplicationSettingsApplicationUsernameAttributeL f WsFederationApplicationSettingsApplication{..} = (\wsFederationApplicationSettingsApplicationUsernameAttribute -> WsFederationApplicationSettingsApplication { wsFederationApplicationSettingsApplicationUsernameAttribute, ..} ) <$> f wsFederationApplicationSettingsApplicationUsernameAttribute
{-# INLINE wsFederationApplicationSettingsApplicationUsernameAttributeL #-}

-- | 'wsFederationApplicationSettingsApplicationWReplyOverride' Lens
wsFederationApplicationSettingsApplicationWReplyOverrideL :: Lens_' WsFederationApplicationSettingsApplication (Maybe Bool)
wsFederationApplicationSettingsApplicationWReplyOverrideL f WsFederationApplicationSettingsApplication{..} = (\wsFederationApplicationSettingsApplicationWReplyOverride -> WsFederationApplicationSettingsApplication { wsFederationApplicationSettingsApplicationWReplyOverride, ..} ) <$> f wsFederationApplicationSettingsApplicationWReplyOverride
{-# INLINE wsFederationApplicationSettingsApplicationWReplyOverrideL #-}

-- | 'wsFederationApplicationSettingsApplicationWReplyUrl' Lens
wsFederationApplicationSettingsApplicationWReplyUrlL :: Lens_' WsFederationApplicationSettingsApplication (Maybe Text)
wsFederationApplicationSettingsApplicationWReplyUrlL f WsFederationApplicationSettingsApplication{..} = (\wsFederationApplicationSettingsApplicationWReplyUrl -> WsFederationApplicationSettingsApplication { wsFederationApplicationSettingsApplicationWReplyUrl, ..} ) <$> f wsFederationApplicationSettingsApplicationWReplyUrl
{-# INLINE wsFederationApplicationSettingsApplicationWReplyUrlL #-}


