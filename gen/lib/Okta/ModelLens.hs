{-
   Okta API

   Allows customers to easily access the Okta API

   OpenAPI Version: 3.0.1
   Okta API API version: 1.3.0
   Contact: devex-public@okta.com
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : Okta.Lens
-}

{-# LANGUAGE KindSignatures #-}
{-# LANGUAGE NamedFieldPuns #-}
{-# LANGUAGE RankNTypes #-}
{-# LANGUAGE RecordWildCards #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-matches -fno-warn-unused-binds -fno-warn-unused-imports #-}

module Okta.ModelLens where

import qualified Data.Aeson as A
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Data, Typeable)
import qualified Data.Map as Map
import qualified Data.Set as Set
import qualified Data.Time as TI

import Data.Text (Text)

import Prelude (($), (.),(<$>),(<*>),(=<<),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

import Okta.Model
import Okta.Core


-- * AppLink

-- | 'appLinkAppAssignmentId' Lens
appLinkAppAssignmentIdL :: Lens_' AppLink (Maybe Text)
appLinkAppAssignmentIdL f AppLink{..} = (\appLinkAppAssignmentId -> AppLink { appLinkAppAssignmentId, ..} ) <$> f appLinkAppAssignmentId
{-# INLINE appLinkAppAssignmentIdL #-}

-- | 'appLinkAppInstanceId' Lens
appLinkAppInstanceIdL :: Lens_' AppLink (Maybe Text)
appLinkAppInstanceIdL f AppLink{..} = (\appLinkAppInstanceId -> AppLink { appLinkAppInstanceId, ..} ) <$> f appLinkAppInstanceId
{-# INLINE appLinkAppInstanceIdL #-}

-- | 'appLinkAppName' Lens
appLinkAppNameL :: Lens_' AppLink (Maybe Text)
appLinkAppNameL f AppLink{..} = (\appLinkAppName -> AppLink { appLinkAppName, ..} ) <$> f appLinkAppName
{-# INLINE appLinkAppNameL #-}

-- | 'appLinkCredentialsSetup' Lens
appLinkCredentialsSetupL :: Lens_' AppLink (Maybe Bool)
appLinkCredentialsSetupL f AppLink{..} = (\appLinkCredentialsSetup -> AppLink { appLinkCredentialsSetup, ..} ) <$> f appLinkCredentialsSetup
{-# INLINE appLinkCredentialsSetupL #-}

-- | 'appLinkHidden' Lens
appLinkHiddenL :: Lens_' AppLink (Maybe Bool)
appLinkHiddenL f AppLink{..} = (\appLinkHidden -> AppLink { appLinkHidden, ..} ) <$> f appLinkHidden
{-# INLINE appLinkHiddenL #-}

-- | 'appLinkId' Lens
appLinkIdL :: Lens_' AppLink (Maybe Text)
appLinkIdL f AppLink{..} = (\appLinkId -> AppLink { appLinkId, ..} ) <$> f appLinkId
{-# INLINE appLinkIdL #-}

-- | 'appLinkLabel' Lens
appLinkLabelL :: Lens_' AppLink (Maybe Text)
appLinkLabelL f AppLink{..} = (\appLinkLabel -> AppLink { appLinkLabel, ..} ) <$> f appLinkLabel
{-# INLINE appLinkLabelL #-}

-- | 'appLinkLinkUrl' Lens
appLinkLinkUrlL :: Lens_' AppLink (Maybe Text)
appLinkLinkUrlL f AppLink{..} = (\appLinkLinkUrl -> AppLink { appLinkLinkUrl, ..} ) <$> f appLinkLinkUrl
{-# INLINE appLinkLinkUrlL #-}

-- | 'appLinkLogoUrl' Lens
appLinkLogoUrlL :: Lens_' AppLink (Maybe Text)
appLinkLogoUrlL f AppLink{..} = (\appLinkLogoUrl -> AppLink { appLinkLogoUrl, ..} ) <$> f appLinkLogoUrl
{-# INLINE appLinkLogoUrlL #-}

-- | 'appLinkSortOrder' Lens
appLinkSortOrderL :: Lens_' AppLink (Maybe Int)
appLinkSortOrderL f AppLink{..} = (\appLinkSortOrder -> AppLink { appLinkSortOrder, ..} ) <$> f appLinkSortOrder
{-# INLINE appLinkSortOrderL #-}



-- * AppUser

-- | 'appUserEmbedded' Lens
appUserEmbeddedL :: Lens_' AppUser (Maybe (Map.Map String A.Value))
appUserEmbeddedL f AppUser{..} = (\appUserEmbedded -> AppUser { appUserEmbedded, ..} ) <$> f appUserEmbedded
{-# INLINE appUserEmbeddedL #-}

-- | 'appUserLinks' Lens
appUserLinksL :: Lens_' AppUser (Maybe (Map.Map String A.Value))
appUserLinksL f AppUser{..} = (\appUserLinks -> AppUser { appUserLinks, ..} ) <$> f appUserLinks
{-# INLINE appUserLinksL #-}

-- | 'appUserCreated' Lens
appUserCreatedL :: Lens_' AppUser (Maybe DateTime)
appUserCreatedL f AppUser{..} = (\appUserCreated -> AppUser { appUserCreated, ..} ) <$> f appUserCreated
{-# INLINE appUserCreatedL #-}

-- | 'appUserCredentials' Lens
appUserCredentialsL :: Lens_' AppUser (Maybe AppUserCredentials)
appUserCredentialsL f AppUser{..} = (\appUserCredentials -> AppUser { appUserCredentials, ..} ) <$> f appUserCredentials
{-# INLINE appUserCredentialsL #-}

-- | 'appUserExternalId' Lens
appUserExternalIdL :: Lens_' AppUser (Maybe Text)
appUserExternalIdL f AppUser{..} = (\appUserExternalId -> AppUser { appUserExternalId, ..} ) <$> f appUserExternalId
{-# INLINE appUserExternalIdL #-}

-- | 'appUserId' Lens
appUserIdL :: Lens_' AppUser (Maybe Text)
appUserIdL f AppUser{..} = (\appUserId -> AppUser { appUserId, ..} ) <$> f appUserId
{-# INLINE appUserIdL #-}

-- | 'appUserLastSync' Lens
appUserLastSyncL :: Lens_' AppUser (Maybe DateTime)
appUserLastSyncL f AppUser{..} = (\appUserLastSync -> AppUser { appUserLastSync, ..} ) <$> f appUserLastSync
{-# INLINE appUserLastSyncL #-}

-- | 'appUserLastUpdated' Lens
appUserLastUpdatedL :: Lens_' AppUser (Maybe DateTime)
appUserLastUpdatedL f AppUser{..} = (\appUserLastUpdated -> AppUser { appUserLastUpdated, ..} ) <$> f appUserLastUpdated
{-# INLINE appUserLastUpdatedL #-}

-- | 'appUserPasswordChanged' Lens
appUserPasswordChangedL :: Lens_' AppUser (Maybe DateTime)
appUserPasswordChangedL f AppUser{..} = (\appUserPasswordChanged -> AppUser { appUserPasswordChanged, ..} ) <$> f appUserPasswordChanged
{-# INLINE appUserPasswordChangedL #-}

-- | 'appUserProfile' Lens
appUserProfileL :: Lens_' AppUser (Maybe (Map.Map String A.Value))
appUserProfileL f AppUser{..} = (\appUserProfile -> AppUser { appUserProfile, ..} ) <$> f appUserProfile
{-# INLINE appUserProfileL #-}

-- | 'appUserScope' Lens
appUserScopeL :: Lens_' AppUser (Maybe Text)
appUserScopeL f AppUser{..} = (\appUserScope -> AppUser { appUserScope, ..} ) <$> f appUserScope
{-# INLINE appUserScopeL #-}

-- | 'appUserStatus' Lens
appUserStatusL :: Lens_' AppUser (Maybe Text)
appUserStatusL f AppUser{..} = (\appUserStatus -> AppUser { appUserStatus, ..} ) <$> f appUserStatus
{-# INLINE appUserStatusL #-}

-- | 'appUserStatusChanged' Lens
appUserStatusChangedL :: Lens_' AppUser (Maybe DateTime)
appUserStatusChangedL f AppUser{..} = (\appUserStatusChanged -> AppUser { appUserStatusChanged, ..} ) <$> f appUserStatusChanged
{-# INLINE appUserStatusChangedL #-}

-- | 'appUserSyncState' Lens
appUserSyncStateL :: Lens_' AppUser (Maybe Text)
appUserSyncStateL f AppUser{..} = (\appUserSyncState -> AppUser { appUserSyncState, ..} ) <$> f appUserSyncState
{-# INLINE appUserSyncStateL #-}



-- * AppUserCredentials

-- | 'appUserCredentialsPassword' Lens
appUserCredentialsPasswordL :: Lens_' AppUserCredentials (Maybe AppUserPasswordCredential)
appUserCredentialsPasswordL f AppUserCredentials{..} = (\appUserCredentialsPassword -> AppUserCredentials { appUserCredentialsPassword, ..} ) <$> f appUserCredentialsPassword
{-# INLINE appUserCredentialsPasswordL #-}

-- | 'appUserCredentialsUserName' Lens
appUserCredentialsUserNameL :: Lens_' AppUserCredentials (Maybe Text)
appUserCredentialsUserNameL f AppUserCredentials{..} = (\appUserCredentialsUserName -> AppUserCredentials { appUserCredentialsUserName, ..} ) <$> f appUserCredentialsUserName
{-# INLINE appUserCredentialsUserNameL #-}



-- * AppUserPasswordCredential

-- | 'appUserPasswordCredentialValue' Lens
appUserPasswordCredentialValueL :: Lens_' AppUserPasswordCredential (Maybe Text)
appUserPasswordCredentialValueL f AppUserPasswordCredential{..} = (\appUserPasswordCredentialValue -> AppUserPasswordCredential { appUserPasswordCredentialValue, ..} ) <$> f appUserPasswordCredentialValue
{-# INLINE appUserPasswordCredentialValueL #-}



-- * Application

-- | 'applicationEmbedded' Lens
applicationEmbeddedL :: Lens_' Application (Maybe (Map.Map String A.Value))
applicationEmbeddedL f Application{..} = (\applicationEmbedded -> Application { applicationEmbedded, ..} ) <$> f applicationEmbedded
{-# INLINE applicationEmbeddedL #-}

-- | 'applicationLinks' Lens
applicationLinksL :: Lens_' Application (Maybe (Map.Map String A.Value))
applicationLinksL f Application{..} = (\applicationLinks -> Application { applicationLinks, ..} ) <$> f applicationLinks
{-# INLINE applicationLinksL #-}

-- | 'applicationAccessibility' Lens
applicationAccessibilityL :: Lens_' Application (Maybe ApplicationAccessibility)
applicationAccessibilityL f Application{..} = (\applicationAccessibility -> Application { applicationAccessibility, ..} ) <$> f applicationAccessibility
{-# INLINE applicationAccessibilityL #-}

-- | 'applicationCreated' Lens
applicationCreatedL :: Lens_' Application (Maybe DateTime)
applicationCreatedL f Application{..} = (\applicationCreated -> Application { applicationCreated, ..} ) <$> f applicationCreated
{-# INLINE applicationCreatedL #-}

-- | 'applicationCredentials' Lens
applicationCredentialsL :: Lens_' Application (Maybe ApplicationCredentials)
applicationCredentialsL f Application{..} = (\applicationCredentials -> Application { applicationCredentials, ..} ) <$> f applicationCredentials
{-# INLINE applicationCredentialsL #-}

-- | 'applicationFeatures' Lens
applicationFeaturesL :: Lens_' Application (Maybe [Text])
applicationFeaturesL f Application{..} = (\applicationFeatures -> Application { applicationFeatures, ..} ) <$> f applicationFeatures
{-# INLINE applicationFeaturesL #-}

-- | 'applicationId' Lens
applicationIdL :: Lens_' Application (Maybe Text)
applicationIdL f Application{..} = (\applicationId -> Application { applicationId, ..} ) <$> f applicationId
{-# INLINE applicationIdL #-}

-- | 'applicationLabel' Lens
applicationLabelL :: Lens_' Application (Maybe Text)
applicationLabelL f Application{..} = (\applicationLabel -> Application { applicationLabel, ..} ) <$> f applicationLabel
{-# INLINE applicationLabelL #-}

-- | 'applicationLastUpdated' Lens
applicationLastUpdatedL :: Lens_' Application (Maybe DateTime)
applicationLastUpdatedL f Application{..} = (\applicationLastUpdated -> Application { applicationLastUpdated, ..} ) <$> f applicationLastUpdated
{-# INLINE applicationLastUpdatedL #-}

-- | 'applicationLicensing' Lens
applicationLicensingL :: Lens_' Application (Maybe ApplicationLicensing)
applicationLicensingL f Application{..} = (\applicationLicensing -> Application { applicationLicensing, ..} ) <$> f applicationLicensing
{-# INLINE applicationLicensingL #-}

-- | 'applicationName' Lens
applicationNameL :: Lens_' Application (Maybe Text)
applicationNameL f Application{..} = (\applicationName -> Application { applicationName, ..} ) <$> f applicationName
{-# INLINE applicationNameL #-}

-- | 'applicationProfile' Lens
applicationProfileL :: Lens_' Application (Maybe (Map.Map String A.Value))
applicationProfileL f Application{..} = (\applicationProfile -> Application { applicationProfile, ..} ) <$> f applicationProfile
{-# INLINE applicationProfileL #-}

-- | 'applicationSettings' Lens
applicationSettingsL :: Lens_' Application (Maybe ApplicationSettings)
applicationSettingsL f Application{..} = (\applicationSettings -> Application { applicationSettings, ..} ) <$> f applicationSettings
{-# INLINE applicationSettingsL #-}

-- | 'applicationSignOnMode' Lens
applicationSignOnModeL :: Lens_' Application (Maybe ApplicationSignOnMode)
applicationSignOnModeL f Application{..} = (\applicationSignOnMode -> Application { applicationSignOnMode, ..} ) <$> f applicationSignOnMode
{-# INLINE applicationSignOnModeL #-}

-- | 'applicationStatus' Lens
applicationStatusL :: Lens_' Application (Maybe E'Status)
applicationStatusL f Application{..} = (\applicationStatus -> Application { applicationStatus, ..} ) <$> f applicationStatus
{-# INLINE applicationStatusL #-}

-- | 'applicationVisibility' Lens
applicationVisibilityL :: Lens_' Application (Maybe ApplicationVisibility)
applicationVisibilityL f Application{..} = (\applicationVisibility -> Application { applicationVisibility, ..} ) <$> f applicationVisibility
{-# INLINE applicationVisibilityL #-}



-- * ApplicationAccessibility

-- | 'applicationAccessibilityErrorRedirectUrl' Lens
applicationAccessibilityErrorRedirectUrlL :: Lens_' ApplicationAccessibility (Maybe Text)
applicationAccessibilityErrorRedirectUrlL f ApplicationAccessibility{..} = (\applicationAccessibilityErrorRedirectUrl -> ApplicationAccessibility { applicationAccessibilityErrorRedirectUrl, ..} ) <$> f applicationAccessibilityErrorRedirectUrl
{-# INLINE applicationAccessibilityErrorRedirectUrlL #-}

-- | 'applicationAccessibilityLoginRedirectUrl' Lens
applicationAccessibilityLoginRedirectUrlL :: Lens_' ApplicationAccessibility (Maybe Text)
applicationAccessibilityLoginRedirectUrlL f ApplicationAccessibility{..} = (\applicationAccessibilityLoginRedirectUrl -> ApplicationAccessibility { applicationAccessibilityLoginRedirectUrl, ..} ) <$> f applicationAccessibilityLoginRedirectUrl
{-# INLINE applicationAccessibilityLoginRedirectUrlL #-}

-- | 'applicationAccessibilitySelfService' Lens
applicationAccessibilitySelfServiceL :: Lens_' ApplicationAccessibility (Maybe Bool)
applicationAccessibilitySelfServiceL f ApplicationAccessibility{..} = (\applicationAccessibilitySelfService -> ApplicationAccessibility { applicationAccessibilitySelfService, ..} ) <$> f applicationAccessibilitySelfService
{-# INLINE applicationAccessibilitySelfServiceL #-}



-- * ApplicationCredentials

-- | 'applicationCredentialsSigning' Lens
applicationCredentialsSigningL :: Lens_' ApplicationCredentials (Maybe ApplicationCredentialsSigning)
applicationCredentialsSigningL f ApplicationCredentials{..} = (\applicationCredentialsSigning -> ApplicationCredentials { applicationCredentialsSigning, ..} ) <$> f applicationCredentialsSigning
{-# INLINE applicationCredentialsSigningL #-}

-- | 'applicationCredentialsUserNameTemplate' Lens
applicationCredentialsUserNameTemplateL :: Lens_' ApplicationCredentials (Maybe ApplicationCredentialsUsernameTemplate)
applicationCredentialsUserNameTemplateL f ApplicationCredentials{..} = (\applicationCredentialsUserNameTemplate -> ApplicationCredentials { applicationCredentialsUserNameTemplate, ..} ) <$> f applicationCredentialsUserNameTemplate
{-# INLINE applicationCredentialsUserNameTemplateL #-}



-- * ApplicationCredentialsOAuthClient

-- | 'applicationCredentialsOAuthClientAutoKeyRotation' Lens
applicationCredentialsOAuthClientAutoKeyRotationL :: Lens_' ApplicationCredentialsOAuthClient (Maybe Bool)
applicationCredentialsOAuthClientAutoKeyRotationL f ApplicationCredentialsOAuthClient{..} = (\applicationCredentialsOAuthClientAutoKeyRotation -> ApplicationCredentialsOAuthClient { applicationCredentialsOAuthClientAutoKeyRotation, ..} ) <$> f applicationCredentialsOAuthClientAutoKeyRotation
{-# INLINE applicationCredentialsOAuthClientAutoKeyRotationL #-}

-- | 'applicationCredentialsOAuthClientClientId' Lens
applicationCredentialsOAuthClientClientIdL :: Lens_' ApplicationCredentialsOAuthClient (Maybe Text)
applicationCredentialsOAuthClientClientIdL f ApplicationCredentialsOAuthClient{..} = (\applicationCredentialsOAuthClientClientId -> ApplicationCredentialsOAuthClient { applicationCredentialsOAuthClientClientId, ..} ) <$> f applicationCredentialsOAuthClientClientId
{-# INLINE applicationCredentialsOAuthClientClientIdL #-}

-- | 'applicationCredentialsOAuthClientClientSecret' Lens
applicationCredentialsOAuthClientClientSecretL :: Lens_' ApplicationCredentialsOAuthClient (Maybe Text)
applicationCredentialsOAuthClientClientSecretL f ApplicationCredentialsOAuthClient{..} = (\applicationCredentialsOAuthClientClientSecret -> ApplicationCredentialsOAuthClient { applicationCredentialsOAuthClientClientSecret, ..} ) <$> f applicationCredentialsOAuthClientClientSecret
{-# INLINE applicationCredentialsOAuthClientClientSecretL #-}

-- | 'applicationCredentialsOAuthClientTokenEndpointAuthMethod' Lens
applicationCredentialsOAuthClientTokenEndpointAuthMethodL :: Lens_' ApplicationCredentialsOAuthClient (Maybe OAuthEndpointAuthenticationMethod)
applicationCredentialsOAuthClientTokenEndpointAuthMethodL f ApplicationCredentialsOAuthClient{..} = (\applicationCredentialsOAuthClientTokenEndpointAuthMethod -> ApplicationCredentialsOAuthClient { applicationCredentialsOAuthClientTokenEndpointAuthMethod, ..} ) <$> f applicationCredentialsOAuthClientTokenEndpointAuthMethod
{-# INLINE applicationCredentialsOAuthClientTokenEndpointAuthMethodL #-}



-- * ApplicationCredentialsScheme



-- * ApplicationCredentialsSigning

-- | 'applicationCredentialsSigningKid' Lens
applicationCredentialsSigningKidL :: Lens_' ApplicationCredentialsSigning (Maybe Text)
applicationCredentialsSigningKidL f ApplicationCredentialsSigning{..} = (\applicationCredentialsSigningKid -> ApplicationCredentialsSigning { applicationCredentialsSigningKid, ..} ) <$> f applicationCredentialsSigningKid
{-# INLINE applicationCredentialsSigningKidL #-}

-- | 'applicationCredentialsSigningLastRotated' Lens
applicationCredentialsSigningLastRotatedL :: Lens_' ApplicationCredentialsSigning (Maybe DateTime)
applicationCredentialsSigningLastRotatedL f ApplicationCredentialsSigning{..} = (\applicationCredentialsSigningLastRotated -> ApplicationCredentialsSigning { applicationCredentialsSigningLastRotated, ..} ) <$> f applicationCredentialsSigningLastRotated
{-# INLINE applicationCredentialsSigningLastRotatedL #-}

-- | 'applicationCredentialsSigningNextRotation' Lens
applicationCredentialsSigningNextRotationL :: Lens_' ApplicationCredentialsSigning (Maybe DateTime)
applicationCredentialsSigningNextRotationL f ApplicationCredentialsSigning{..} = (\applicationCredentialsSigningNextRotation -> ApplicationCredentialsSigning { applicationCredentialsSigningNextRotation, ..} ) <$> f applicationCredentialsSigningNextRotation
{-# INLINE applicationCredentialsSigningNextRotationL #-}

-- | 'applicationCredentialsSigningRotationMode' Lens
applicationCredentialsSigningRotationModeL :: Lens_' ApplicationCredentialsSigning (Maybe Text)
applicationCredentialsSigningRotationModeL f ApplicationCredentialsSigning{..} = (\applicationCredentialsSigningRotationMode -> ApplicationCredentialsSigning { applicationCredentialsSigningRotationMode, ..} ) <$> f applicationCredentialsSigningRotationMode
{-# INLINE applicationCredentialsSigningRotationModeL #-}



-- * ApplicationCredentialsUsernameTemplate

-- | 'applicationCredentialsUsernameTemplateSuffix' Lens
applicationCredentialsUsernameTemplateSuffixL :: Lens_' ApplicationCredentialsUsernameTemplate (Maybe Text)
applicationCredentialsUsernameTemplateSuffixL f ApplicationCredentialsUsernameTemplate{..} = (\applicationCredentialsUsernameTemplateSuffix -> ApplicationCredentialsUsernameTemplate { applicationCredentialsUsernameTemplateSuffix, ..} ) <$> f applicationCredentialsUsernameTemplateSuffix
{-# INLINE applicationCredentialsUsernameTemplateSuffixL #-}

-- | 'applicationCredentialsUsernameTemplateTemplate' Lens
applicationCredentialsUsernameTemplateTemplateL :: Lens_' ApplicationCredentialsUsernameTemplate (Maybe Text)
applicationCredentialsUsernameTemplateTemplateL f ApplicationCredentialsUsernameTemplate{..} = (\applicationCredentialsUsernameTemplateTemplate -> ApplicationCredentialsUsernameTemplate { applicationCredentialsUsernameTemplateTemplate, ..} ) <$> f applicationCredentialsUsernameTemplateTemplate
{-# INLINE applicationCredentialsUsernameTemplateTemplateL #-}

-- | 'applicationCredentialsUsernameTemplateType' Lens
applicationCredentialsUsernameTemplateTypeL :: Lens_' ApplicationCredentialsUsernameTemplate (Maybe Text)
applicationCredentialsUsernameTemplateTypeL f ApplicationCredentialsUsernameTemplate{..} = (\applicationCredentialsUsernameTemplateType -> ApplicationCredentialsUsernameTemplate { applicationCredentialsUsernameTemplateType, ..} ) <$> f applicationCredentialsUsernameTemplateType
{-# INLINE applicationCredentialsUsernameTemplateTypeL #-}



-- * ApplicationGroupAssignment

-- | 'applicationGroupAssignmentEmbedded' Lens
applicationGroupAssignmentEmbeddedL :: Lens_' ApplicationGroupAssignment (Maybe (Map.Map String A.Value))
applicationGroupAssignmentEmbeddedL f ApplicationGroupAssignment{..} = (\applicationGroupAssignmentEmbedded -> ApplicationGroupAssignment { applicationGroupAssignmentEmbedded, ..} ) <$> f applicationGroupAssignmentEmbedded
{-# INLINE applicationGroupAssignmentEmbeddedL #-}

-- | 'applicationGroupAssignmentLinks' Lens
applicationGroupAssignmentLinksL :: Lens_' ApplicationGroupAssignment (Maybe (Map.Map String A.Value))
applicationGroupAssignmentLinksL f ApplicationGroupAssignment{..} = (\applicationGroupAssignmentLinks -> ApplicationGroupAssignment { applicationGroupAssignmentLinks, ..} ) <$> f applicationGroupAssignmentLinks
{-# INLINE applicationGroupAssignmentLinksL #-}

-- | 'applicationGroupAssignmentId' Lens
applicationGroupAssignmentIdL :: Lens_' ApplicationGroupAssignment (Maybe Text)
applicationGroupAssignmentIdL f ApplicationGroupAssignment{..} = (\applicationGroupAssignmentId -> ApplicationGroupAssignment { applicationGroupAssignmentId, ..} ) <$> f applicationGroupAssignmentId
{-# INLINE applicationGroupAssignmentIdL #-}

-- | 'applicationGroupAssignmentLastUpdated' Lens
applicationGroupAssignmentLastUpdatedL :: Lens_' ApplicationGroupAssignment (Maybe DateTime)
applicationGroupAssignmentLastUpdatedL f ApplicationGroupAssignment{..} = (\applicationGroupAssignmentLastUpdated -> ApplicationGroupAssignment { applicationGroupAssignmentLastUpdated, ..} ) <$> f applicationGroupAssignmentLastUpdated
{-# INLINE applicationGroupAssignmentLastUpdatedL #-}

-- | 'applicationGroupAssignmentPriority' Lens
applicationGroupAssignmentPriorityL :: Lens_' ApplicationGroupAssignment (Maybe Int)
applicationGroupAssignmentPriorityL f ApplicationGroupAssignment{..} = (\applicationGroupAssignmentPriority -> ApplicationGroupAssignment { applicationGroupAssignmentPriority, ..} ) <$> f applicationGroupAssignmentPriority
{-# INLINE applicationGroupAssignmentPriorityL #-}

-- | 'applicationGroupAssignmentProfile' Lens
applicationGroupAssignmentProfileL :: Lens_' ApplicationGroupAssignment (Maybe (Map.Map String A.Value))
applicationGroupAssignmentProfileL f ApplicationGroupAssignment{..} = (\applicationGroupAssignmentProfile -> ApplicationGroupAssignment { applicationGroupAssignmentProfile, ..} ) <$> f applicationGroupAssignmentProfile
{-# INLINE applicationGroupAssignmentProfileL #-}



-- * ApplicationLicensing

-- | 'applicationLicensingSeatCount' Lens
applicationLicensingSeatCountL :: Lens_' ApplicationLicensing (Maybe Int)
applicationLicensingSeatCountL f ApplicationLicensing{..} = (\applicationLicensingSeatCount -> ApplicationLicensing { applicationLicensingSeatCount, ..} ) <$> f applicationLicensingSeatCount
{-# INLINE applicationLicensingSeatCountL #-}



-- * ApplicationSettings

-- | 'applicationSettingsApp' Lens
applicationSettingsAppL :: Lens_' ApplicationSettings (Maybe A.Value)
applicationSettingsAppL f ApplicationSettings{..} = (\applicationSettingsApp -> ApplicationSettings { applicationSettingsApp, ..} ) <$> f applicationSettingsApp
{-# INLINE applicationSettingsAppL #-}

-- | 'applicationSettingsImplicitAssignment' Lens
applicationSettingsImplicitAssignmentL :: Lens_' ApplicationSettings (Maybe Bool)
applicationSettingsImplicitAssignmentL f ApplicationSettings{..} = (\applicationSettingsImplicitAssignment -> ApplicationSettings { applicationSettingsImplicitAssignment, ..} ) <$> f applicationSettingsImplicitAssignment
{-# INLINE applicationSettingsImplicitAssignmentL #-}

-- | 'applicationSettingsNotifications' Lens
applicationSettingsNotificationsL :: Lens_' ApplicationSettings (Maybe ApplicationSettingsNotifications)
applicationSettingsNotificationsL f ApplicationSettings{..} = (\applicationSettingsNotifications -> ApplicationSettings { applicationSettingsNotifications, ..} ) <$> f applicationSettingsNotifications
{-# INLINE applicationSettingsNotificationsL #-}



-- * ApplicationSettingsNotifications

-- | 'applicationSettingsNotificationsVpn' Lens
applicationSettingsNotificationsVpnL :: Lens_' ApplicationSettingsNotifications (Maybe ApplicationSettingsNotificationsVpn)
applicationSettingsNotificationsVpnL f ApplicationSettingsNotifications{..} = (\applicationSettingsNotificationsVpn -> ApplicationSettingsNotifications { applicationSettingsNotificationsVpn, ..} ) <$> f applicationSettingsNotificationsVpn
{-# INLINE applicationSettingsNotificationsVpnL #-}



-- * ApplicationSettingsNotificationsVpn

-- | 'applicationSettingsNotificationsVpnHelpUrl' Lens
applicationSettingsNotificationsVpnHelpUrlL :: Lens_' ApplicationSettingsNotificationsVpn (Maybe Text)
applicationSettingsNotificationsVpnHelpUrlL f ApplicationSettingsNotificationsVpn{..} = (\applicationSettingsNotificationsVpnHelpUrl -> ApplicationSettingsNotificationsVpn { applicationSettingsNotificationsVpnHelpUrl, ..} ) <$> f applicationSettingsNotificationsVpnHelpUrl
{-# INLINE applicationSettingsNotificationsVpnHelpUrlL #-}

-- | 'applicationSettingsNotificationsVpnMessage' Lens
applicationSettingsNotificationsVpnMessageL :: Lens_' ApplicationSettingsNotificationsVpn (Maybe Text)
applicationSettingsNotificationsVpnMessageL f ApplicationSettingsNotificationsVpn{..} = (\applicationSettingsNotificationsVpnMessage -> ApplicationSettingsNotificationsVpn { applicationSettingsNotificationsVpnMessage, ..} ) <$> f applicationSettingsNotificationsVpnMessage
{-# INLINE applicationSettingsNotificationsVpnMessageL #-}

-- | 'applicationSettingsNotificationsVpnNetwork' Lens
applicationSettingsNotificationsVpnNetworkL :: Lens_' ApplicationSettingsNotificationsVpn (Maybe ApplicationSettingsNotificationsVpnNetwork)
applicationSettingsNotificationsVpnNetworkL f ApplicationSettingsNotificationsVpn{..} = (\applicationSettingsNotificationsVpnNetwork -> ApplicationSettingsNotificationsVpn { applicationSettingsNotificationsVpnNetwork, ..} ) <$> f applicationSettingsNotificationsVpnNetwork
{-# INLINE applicationSettingsNotificationsVpnNetworkL #-}



-- * ApplicationSettingsNotificationsVpnNetwork

-- | 'applicationSettingsNotificationsVpnNetworkConnection' Lens
applicationSettingsNotificationsVpnNetworkConnectionL :: Lens_' ApplicationSettingsNotificationsVpnNetwork (Maybe Text)
applicationSettingsNotificationsVpnNetworkConnectionL f ApplicationSettingsNotificationsVpnNetwork{..} = (\applicationSettingsNotificationsVpnNetworkConnection -> ApplicationSettingsNotificationsVpnNetwork { applicationSettingsNotificationsVpnNetworkConnection, ..} ) <$> f applicationSettingsNotificationsVpnNetworkConnection
{-# INLINE applicationSettingsNotificationsVpnNetworkConnectionL #-}

-- | 'applicationSettingsNotificationsVpnNetworkExclude' Lens
applicationSettingsNotificationsVpnNetworkExcludeL :: Lens_' ApplicationSettingsNotificationsVpnNetwork (Maybe [Text])
applicationSettingsNotificationsVpnNetworkExcludeL f ApplicationSettingsNotificationsVpnNetwork{..} = (\applicationSettingsNotificationsVpnNetworkExclude -> ApplicationSettingsNotificationsVpnNetwork { applicationSettingsNotificationsVpnNetworkExclude, ..} ) <$> f applicationSettingsNotificationsVpnNetworkExclude
{-# INLINE applicationSettingsNotificationsVpnNetworkExcludeL #-}

-- | 'applicationSettingsNotificationsVpnNetworkInclude' Lens
applicationSettingsNotificationsVpnNetworkIncludeL :: Lens_' ApplicationSettingsNotificationsVpnNetwork (Maybe [Text])
applicationSettingsNotificationsVpnNetworkIncludeL f ApplicationSettingsNotificationsVpnNetwork{..} = (\applicationSettingsNotificationsVpnNetworkInclude -> ApplicationSettingsNotificationsVpnNetwork { applicationSettingsNotificationsVpnNetworkInclude, ..} ) <$> f applicationSettingsNotificationsVpnNetworkInclude
{-# INLINE applicationSettingsNotificationsVpnNetworkIncludeL #-}



-- * ApplicationSignOnMode



-- * ApplicationVisibility

-- | 'applicationVisibilityAppLinks' Lens
applicationVisibilityAppLinksL :: Lens_' ApplicationVisibility (Maybe (Map.Map String Bool))
applicationVisibilityAppLinksL f ApplicationVisibility{..} = (\applicationVisibilityAppLinks -> ApplicationVisibility { applicationVisibilityAppLinks, ..} ) <$> f applicationVisibilityAppLinks
{-# INLINE applicationVisibilityAppLinksL #-}

-- | 'applicationVisibilityAutoSubmitToolbar' Lens
applicationVisibilityAutoSubmitToolbarL :: Lens_' ApplicationVisibility (Maybe Bool)
applicationVisibilityAutoSubmitToolbarL f ApplicationVisibility{..} = (\applicationVisibilityAutoSubmitToolbar -> ApplicationVisibility { applicationVisibilityAutoSubmitToolbar, ..} ) <$> f applicationVisibilityAutoSubmitToolbar
{-# INLINE applicationVisibilityAutoSubmitToolbarL #-}

-- | 'applicationVisibilityHide' Lens
applicationVisibilityHideL :: Lens_' ApplicationVisibility (Maybe ApplicationVisibilityHide)
applicationVisibilityHideL f ApplicationVisibility{..} = (\applicationVisibilityHide -> ApplicationVisibility { applicationVisibilityHide, ..} ) <$> f applicationVisibilityHide
{-# INLINE applicationVisibilityHideL #-}



-- * ApplicationVisibilityHide

-- | 'applicationVisibilityHideIOs' Lens
applicationVisibilityHideIOsL :: Lens_' ApplicationVisibilityHide (Maybe Bool)
applicationVisibilityHideIOsL f ApplicationVisibilityHide{..} = (\applicationVisibilityHideIOs -> ApplicationVisibilityHide { applicationVisibilityHideIOs, ..} ) <$> f applicationVisibilityHideIOs
{-# INLINE applicationVisibilityHideIOsL #-}

-- | 'applicationVisibilityHideWeb' Lens
applicationVisibilityHideWebL :: Lens_' ApplicationVisibilityHide (Maybe Bool)
applicationVisibilityHideWebL f ApplicationVisibilityHide{..} = (\applicationVisibilityHideWeb -> ApplicationVisibilityHide { applicationVisibilityHideWeb, ..} ) <$> f applicationVisibilityHideWeb
{-# INLINE applicationVisibilityHideWebL #-}



-- * AuthenticationProvider

-- | 'authenticationProviderName' Lens
authenticationProviderNameL :: Lens_' AuthenticationProvider (Maybe Text)
authenticationProviderNameL f AuthenticationProvider{..} = (\authenticationProviderName -> AuthenticationProvider { authenticationProviderName, ..} ) <$> f authenticationProviderName
{-# INLINE authenticationProviderNameL #-}

-- | 'authenticationProviderType' Lens
authenticationProviderTypeL :: Lens_' AuthenticationProvider (Maybe AuthenticationProviderType)
authenticationProviderTypeL f AuthenticationProvider{..} = (\authenticationProviderType -> AuthenticationProvider { authenticationProviderType, ..} ) <$> f authenticationProviderType
{-# INLINE authenticationProviderTypeL #-}



-- * AuthenticationProviderType



-- * AutoLoginApplication

-- | 'autoLoginApplicationCredentials' Lens
autoLoginApplicationCredentialsL :: Lens_' AutoLoginApplication (Maybe SchemeApplicationCredentials)
autoLoginApplicationCredentialsL f AutoLoginApplication{..} = (\autoLoginApplicationCredentials -> AutoLoginApplication { autoLoginApplicationCredentials, ..} ) <$> f autoLoginApplicationCredentials
{-# INLINE autoLoginApplicationCredentialsL #-}

-- | 'autoLoginApplicationSettings' Lens
autoLoginApplicationSettingsL :: Lens_' AutoLoginApplication (Maybe AutoLoginApplicationSettings)
autoLoginApplicationSettingsL f AutoLoginApplication{..} = (\autoLoginApplicationSettings -> AutoLoginApplication { autoLoginApplicationSettings, ..} ) <$> f autoLoginApplicationSettings
{-# INLINE autoLoginApplicationSettingsL #-}



-- * AutoLoginApplicationSettings

-- | 'autoLoginApplicationSettingsSignOn' Lens
autoLoginApplicationSettingsSignOnL :: Lens_' AutoLoginApplicationSettings (Maybe AutoLoginApplicationSettingsSignOn)
autoLoginApplicationSettingsSignOnL f AutoLoginApplicationSettings{..} = (\autoLoginApplicationSettingsSignOn -> AutoLoginApplicationSettings { autoLoginApplicationSettingsSignOn, ..} ) <$> f autoLoginApplicationSettingsSignOn
{-# INLINE autoLoginApplicationSettingsSignOnL #-}



-- * AutoLoginApplicationSettingsSignOn

-- | 'autoLoginApplicationSettingsSignOnLoginUrl' Lens
autoLoginApplicationSettingsSignOnLoginUrlL :: Lens_' AutoLoginApplicationSettingsSignOn (Maybe Text)
autoLoginApplicationSettingsSignOnLoginUrlL f AutoLoginApplicationSettingsSignOn{..} = (\autoLoginApplicationSettingsSignOnLoginUrl -> AutoLoginApplicationSettingsSignOn { autoLoginApplicationSettingsSignOnLoginUrl, ..} ) <$> f autoLoginApplicationSettingsSignOnLoginUrl
{-# INLINE autoLoginApplicationSettingsSignOnLoginUrlL #-}

-- | 'autoLoginApplicationSettingsSignOnRedirectUrl' Lens
autoLoginApplicationSettingsSignOnRedirectUrlL :: Lens_' AutoLoginApplicationSettingsSignOn (Maybe Text)
autoLoginApplicationSettingsSignOnRedirectUrlL f AutoLoginApplicationSettingsSignOn{..} = (\autoLoginApplicationSettingsSignOnRedirectUrl -> AutoLoginApplicationSettingsSignOn { autoLoginApplicationSettingsSignOnRedirectUrl, ..} ) <$> f autoLoginApplicationSettingsSignOnRedirectUrl
{-# INLINE autoLoginApplicationSettingsSignOnRedirectUrlL #-}



-- * BasicApplicationSettings

-- | 'basicApplicationSettingsApp' Lens
basicApplicationSettingsAppL :: Lens_' BasicApplicationSettings (Maybe BasicApplicationSettingsApplication)
basicApplicationSettingsAppL f BasicApplicationSettings{..} = (\basicApplicationSettingsApp -> BasicApplicationSettings { basicApplicationSettingsApp, ..} ) <$> f basicApplicationSettingsApp
{-# INLINE basicApplicationSettingsAppL #-}



-- * BasicApplicationSettingsApplication

-- | 'basicApplicationSettingsApplicationAuthUrl' Lens
basicApplicationSettingsApplicationAuthUrlL :: Lens_' BasicApplicationSettingsApplication (Maybe Text)
basicApplicationSettingsApplicationAuthUrlL f BasicApplicationSettingsApplication{..} = (\basicApplicationSettingsApplicationAuthUrl -> BasicApplicationSettingsApplication { basicApplicationSettingsApplicationAuthUrl, ..} ) <$> f basicApplicationSettingsApplicationAuthUrl
{-# INLINE basicApplicationSettingsApplicationAuthUrlL #-}

-- | 'basicApplicationSettingsApplicationUrl' Lens
basicApplicationSettingsApplicationUrlL :: Lens_' BasicApplicationSettingsApplication (Maybe Text)
basicApplicationSettingsApplicationUrlL f BasicApplicationSettingsApplication{..} = (\basicApplicationSettingsApplicationUrl -> BasicApplicationSettingsApplication { basicApplicationSettingsApplicationUrl, ..} ) <$> f basicApplicationSettingsApplicationUrl
{-# INLINE basicApplicationSettingsApplicationUrlL #-}



-- * BasicAuthApplication

-- | 'basicAuthApplicationCredentials' Lens
basicAuthApplicationCredentialsL :: Lens_' BasicAuthApplication (Maybe SchemeApplicationCredentials)
basicAuthApplicationCredentialsL f BasicAuthApplication{..} = (\basicAuthApplicationCredentials -> BasicAuthApplication { basicAuthApplicationCredentials, ..} ) <$> f basicAuthApplicationCredentials
{-# INLINE basicAuthApplicationCredentialsL #-}

-- | 'basicAuthApplicationName' Lens
basicAuthApplicationNameL :: Lens_' BasicAuthApplication (Maybe A.Value)
basicAuthApplicationNameL f BasicAuthApplication{..} = (\basicAuthApplicationName -> BasicAuthApplication { basicAuthApplicationName, ..} ) <$> f basicAuthApplicationName
{-# INLINE basicAuthApplicationNameL #-}

-- | 'basicAuthApplicationSettings' Lens
basicAuthApplicationSettingsL :: Lens_' BasicAuthApplication (Maybe BasicApplicationSettings)
basicAuthApplicationSettingsL f BasicAuthApplication{..} = (\basicAuthApplicationSettings -> BasicAuthApplication { basicAuthApplicationSettings, ..} ) <$> f basicAuthApplicationSettings
{-# INLINE basicAuthApplicationSettingsL #-}



-- * BookmarkApplication

-- | 'bookmarkApplicationName' Lens
bookmarkApplicationNameL :: Lens_' BookmarkApplication (Maybe A.Value)
bookmarkApplicationNameL f BookmarkApplication{..} = (\bookmarkApplicationName -> BookmarkApplication { bookmarkApplicationName, ..} ) <$> f bookmarkApplicationName
{-# INLINE bookmarkApplicationNameL #-}

-- | 'bookmarkApplicationSettings' Lens
bookmarkApplicationSettingsL :: Lens_' BookmarkApplication (Maybe BookmarkApplicationSettings)
bookmarkApplicationSettingsL f BookmarkApplication{..} = (\bookmarkApplicationSettings -> BookmarkApplication { bookmarkApplicationSettings, ..} ) <$> f bookmarkApplicationSettings
{-# INLINE bookmarkApplicationSettingsL #-}



-- * BookmarkApplicationSettings

-- | 'bookmarkApplicationSettingsApp' Lens
bookmarkApplicationSettingsAppL :: Lens_' BookmarkApplicationSettings (Maybe BookmarkApplicationSettingsApplication)
bookmarkApplicationSettingsAppL f BookmarkApplicationSettings{..} = (\bookmarkApplicationSettingsApp -> BookmarkApplicationSettings { bookmarkApplicationSettingsApp, ..} ) <$> f bookmarkApplicationSettingsApp
{-# INLINE bookmarkApplicationSettingsAppL #-}



-- * BookmarkApplicationSettingsApplication

-- | 'bookmarkApplicationSettingsApplicationRequestIntegration' Lens
bookmarkApplicationSettingsApplicationRequestIntegrationL :: Lens_' BookmarkApplicationSettingsApplication (Maybe Bool)
bookmarkApplicationSettingsApplicationRequestIntegrationL f BookmarkApplicationSettingsApplication{..} = (\bookmarkApplicationSettingsApplicationRequestIntegration -> BookmarkApplicationSettingsApplication { bookmarkApplicationSettingsApplicationRequestIntegration, ..} ) <$> f bookmarkApplicationSettingsApplicationRequestIntegration
{-# INLINE bookmarkApplicationSettingsApplicationRequestIntegrationL #-}

-- | 'bookmarkApplicationSettingsApplicationUrl' Lens
bookmarkApplicationSettingsApplicationUrlL :: Lens_' BookmarkApplicationSettingsApplication (Maybe Text)
bookmarkApplicationSettingsApplicationUrlL f BookmarkApplicationSettingsApplication{..} = (\bookmarkApplicationSettingsApplicationUrl -> BookmarkApplicationSettingsApplication { bookmarkApplicationSettingsApplicationUrl, ..} ) <$> f bookmarkApplicationSettingsApplicationUrl
{-# INLINE bookmarkApplicationSettingsApplicationUrlL #-}



-- * BrowserPluginApplication

-- | 'browserPluginApplicationCredentials' Lens
browserPluginApplicationCredentialsL :: Lens_' BrowserPluginApplication (Maybe SchemeApplicationCredentials)
browserPluginApplicationCredentialsL f BrowserPluginApplication{..} = (\browserPluginApplicationCredentials -> BrowserPluginApplication { browserPluginApplicationCredentials, ..} ) <$> f browserPluginApplicationCredentials
{-# INLINE browserPluginApplicationCredentialsL #-}



-- * CallFactor

-- | 'callFactorProfile' Lens
callFactorProfileL :: Lens_' CallFactor (Maybe CallFactorProfile)
callFactorProfileL f CallFactor{..} = (\callFactorProfile -> CallFactor { callFactorProfile, ..} ) <$> f callFactorProfile
{-# INLINE callFactorProfileL #-}



-- * CallFactorProfile

-- | 'callFactorProfilePhoneExtension' Lens
callFactorProfilePhoneExtensionL :: Lens_' CallFactorProfile (Maybe Text)
callFactorProfilePhoneExtensionL f CallFactorProfile{..} = (\callFactorProfilePhoneExtension -> CallFactorProfile { callFactorProfilePhoneExtension, ..} ) <$> f callFactorProfilePhoneExtension
{-# INLINE callFactorProfilePhoneExtensionL #-}

-- | 'callFactorProfilePhoneNumber' Lens
callFactorProfilePhoneNumberL :: Lens_' CallFactorProfile (Maybe Text)
callFactorProfilePhoneNumberL f CallFactorProfile{..} = (\callFactorProfilePhoneNumber -> CallFactorProfile { callFactorProfilePhoneNumber, ..} ) <$> f callFactorProfilePhoneNumber
{-# INLINE callFactorProfilePhoneNumberL #-}



-- * ChangePasswordRequest

-- | 'changePasswordRequestNewPassword' Lens
changePasswordRequestNewPasswordL :: Lens_' ChangePasswordRequest (Maybe PasswordCredential)
changePasswordRequestNewPasswordL f ChangePasswordRequest{..} = (\changePasswordRequestNewPassword -> ChangePasswordRequest { changePasswordRequestNewPassword, ..} ) <$> f changePasswordRequestNewPassword
{-# INLINE changePasswordRequestNewPasswordL #-}

-- | 'changePasswordRequestOldPassword' Lens
changePasswordRequestOldPasswordL :: Lens_' ChangePasswordRequest (Maybe PasswordCredential)
changePasswordRequestOldPasswordL f ChangePasswordRequest{..} = (\changePasswordRequestOldPassword -> ChangePasswordRequest { changePasswordRequestOldPassword, ..} ) <$> f changePasswordRequestOldPassword
{-# INLINE changePasswordRequestOldPasswordL #-}



-- * CreateSessionRequest

-- | 'createSessionRequestSessionToken' Lens
createSessionRequestSessionTokenL :: Lens_' CreateSessionRequest (Maybe Text)
createSessionRequestSessionTokenL f CreateSessionRequest{..} = (\createSessionRequestSessionToken -> CreateSessionRequest { createSessionRequestSessionToken, ..} ) <$> f createSessionRequestSessionToken
{-# INLINE createSessionRequestSessionTokenL #-}



-- * EmailAddress

-- | 'emailAddressStatus' Lens
emailAddressStatusL :: Lens_' EmailAddress (Maybe EmailStatus)
emailAddressStatusL f EmailAddress{..} = (\emailAddressStatus -> EmailAddress { emailAddressStatus, ..} ) <$> f emailAddressStatus
{-# INLINE emailAddressStatusL #-}

-- | 'emailAddressType' Lens
emailAddressTypeL :: Lens_' EmailAddress (Maybe EmailType)
emailAddressTypeL f EmailAddress{..} = (\emailAddressType -> EmailAddress { emailAddressType, ..} ) <$> f emailAddressType
{-# INLINE emailAddressTypeL #-}

-- | 'emailAddressValue' Lens
emailAddressValueL :: Lens_' EmailAddress (Maybe Text)
emailAddressValueL f EmailAddress{..} = (\emailAddressValue -> EmailAddress { emailAddressValue, ..} ) <$> f emailAddressValue
{-# INLINE emailAddressValueL #-}



-- * EmailFactor

-- | 'emailFactorProfile' Lens
emailFactorProfileL :: Lens_' EmailFactor (Maybe EmailFactorProfile)
emailFactorProfileL f EmailFactor{..} = (\emailFactorProfile -> EmailFactor { emailFactorProfile, ..} ) <$> f emailFactorProfile
{-# INLINE emailFactorProfileL #-}



-- * EmailFactorProfile

-- | 'emailFactorProfileEmail' Lens
emailFactorProfileEmailL :: Lens_' EmailFactorProfile (Maybe Text)
emailFactorProfileEmailL f EmailFactorProfile{..} = (\emailFactorProfileEmail -> EmailFactorProfile { emailFactorProfileEmail, ..} ) <$> f emailFactorProfileEmail
{-# INLINE emailFactorProfileEmailL #-}



-- * EmailStatus



-- * EmailType



-- * Factor

-- | 'factorEmbedded' Lens
factorEmbeddedL :: Lens_' Factor (Maybe (Map.Map String A.Value))
factorEmbeddedL f Factor{..} = (\factorEmbedded -> Factor { factorEmbedded, ..} ) <$> f factorEmbedded
{-# INLINE factorEmbeddedL #-}

-- | 'factorLinks' Lens
factorLinksL :: Lens_' Factor (Maybe (Map.Map String A.Value))
factorLinksL f Factor{..} = (\factorLinks -> Factor { factorLinks, ..} ) <$> f factorLinks
{-# INLINE factorLinksL #-}

-- | 'factorDevice' Lens
factorDeviceL :: Lens_' Factor (Maybe Text)
factorDeviceL f Factor{..} = (\factorDevice -> Factor { factorDevice, ..} ) <$> f factorDevice
{-# INLINE factorDeviceL #-}

-- | 'factorDeviceType' Lens
factorDeviceTypeL :: Lens_' Factor (Maybe Text)
factorDeviceTypeL f Factor{..} = (\factorDeviceType -> Factor { factorDeviceType, ..} ) <$> f factorDeviceType
{-# INLINE factorDeviceTypeL #-}

-- | 'factorFactorType' Lens
factorFactorTypeL :: Lens_' Factor (Maybe FactorType)
factorFactorTypeL f Factor{..} = (\factorFactorType -> Factor { factorFactorType, ..} ) <$> f factorFactorType
{-# INLINE factorFactorTypeL #-}

-- | 'factorId' Lens
factorIdL :: Lens_' Factor (Maybe Text)
factorIdL f Factor{..} = (\factorId -> Factor { factorId, ..} ) <$> f factorId
{-# INLINE factorIdL #-}

-- | 'factorMfaStateTokenId' Lens
factorMfaStateTokenIdL :: Lens_' Factor (Maybe Text)
factorMfaStateTokenIdL f Factor{..} = (\factorMfaStateTokenId -> Factor { factorMfaStateTokenId, ..} ) <$> f factorMfaStateTokenId
{-# INLINE factorMfaStateTokenIdL #-}

-- | 'factorProfile' Lens
factorProfileL :: Lens_' Factor (Maybe A.Value)
factorProfileL f Factor{..} = (\factorProfile -> Factor { factorProfile, ..} ) <$> f factorProfile
{-# INLINE factorProfileL #-}

-- | 'factorProvider' Lens
factorProviderL :: Lens_' Factor (Maybe FactorProvider)
factorProviderL f Factor{..} = (\factorProvider -> Factor { factorProvider, ..} ) <$> f factorProvider
{-# INLINE factorProviderL #-}

-- | 'factorRechallengeExistingFactor' Lens
factorRechallengeExistingFactorL :: Lens_' Factor (Maybe Bool)
factorRechallengeExistingFactorL f Factor{..} = (\factorRechallengeExistingFactor -> Factor { factorRechallengeExistingFactor, ..} ) <$> f factorRechallengeExistingFactor
{-# INLINE factorRechallengeExistingFactorL #-}

-- | 'factorSessionId' Lens
factorSessionIdL :: Lens_' Factor (Maybe Text)
factorSessionIdL f Factor{..} = (\factorSessionId -> Factor { factorSessionId, ..} ) <$> f factorSessionId
{-# INLINE factorSessionIdL #-}

-- | 'factorStatus' Lens
factorStatusL :: Lens_' Factor (Maybe FactorStatus)
factorStatusL f Factor{..} = (\factorStatus -> Factor { factorStatus, ..} ) <$> f factorStatus
{-# INLINE factorStatusL #-}

-- | 'factorTokenLifetimeSeconds' Lens
factorTokenLifetimeSecondsL :: Lens_' Factor (Maybe Int)
factorTokenLifetimeSecondsL f Factor{..} = (\factorTokenLifetimeSeconds -> Factor { factorTokenLifetimeSeconds, ..} ) <$> f factorTokenLifetimeSeconds
{-# INLINE factorTokenLifetimeSecondsL #-}

-- | 'factorUserId' Lens
factorUserIdL :: Lens_' Factor (Maybe Text)
factorUserIdL f Factor{..} = (\factorUserId -> Factor { factorUserId, ..} ) <$> f factorUserId
{-# INLINE factorUserIdL #-}

-- | 'factorVerify' Lens
factorVerifyL :: Lens_' Factor (Maybe VerifyFactorRequest)
factorVerifyL f Factor{..} = (\factorVerify -> Factor { factorVerify, ..} ) <$> f factorVerify
{-# INLINE factorVerifyL #-}



-- * FactorProvider



-- * FactorResultType



-- * FactorStatus



-- * FactorType



-- * ForgotPasswordResponse

-- | 'forgotPasswordResponseResetPasswordUrl' Lens
forgotPasswordResponseResetPasswordUrlL :: Lens_' ForgotPasswordResponse (Maybe Text)
forgotPasswordResponseResetPasswordUrlL f ForgotPasswordResponse{..} = (\forgotPasswordResponseResetPasswordUrl -> ForgotPasswordResponse { forgotPasswordResponseResetPasswordUrl, ..} ) <$> f forgotPasswordResponseResetPasswordUrl
{-# INLINE forgotPasswordResponseResetPasswordUrlL #-}



-- * Group

-- | 'groupEmbedded' Lens
groupEmbeddedL :: Lens_' Group (Maybe (Map.Map String A.Value))
groupEmbeddedL f Group{..} = (\groupEmbedded -> Group { groupEmbedded, ..} ) <$> f groupEmbedded
{-# INLINE groupEmbeddedL #-}

-- | 'groupLinks' Lens
groupLinksL :: Lens_' Group (Maybe (Map.Map String A.Value))
groupLinksL f Group{..} = (\groupLinks -> Group { groupLinks, ..} ) <$> f groupLinks
{-# INLINE groupLinksL #-}

-- | 'groupCreated' Lens
groupCreatedL :: Lens_' Group (Maybe DateTime)
groupCreatedL f Group{..} = (\groupCreated -> Group { groupCreated, ..} ) <$> f groupCreated
{-# INLINE groupCreatedL #-}

-- | 'groupId' Lens
groupIdL :: Lens_' Group (Maybe Text)
groupIdL f Group{..} = (\groupId -> Group { groupId, ..} ) <$> f groupId
{-# INLINE groupIdL #-}

-- | 'groupLastMembershipUpdated' Lens
groupLastMembershipUpdatedL :: Lens_' Group (Maybe DateTime)
groupLastMembershipUpdatedL f Group{..} = (\groupLastMembershipUpdated -> Group { groupLastMembershipUpdated, ..} ) <$> f groupLastMembershipUpdated
{-# INLINE groupLastMembershipUpdatedL #-}

-- | 'groupLastUpdated' Lens
groupLastUpdatedL :: Lens_' Group (Maybe DateTime)
groupLastUpdatedL f Group{..} = (\groupLastUpdated -> Group { groupLastUpdated, ..} ) <$> f groupLastUpdated
{-# INLINE groupLastUpdatedL #-}

-- | 'groupObjectClass' Lens
groupObjectClassL :: Lens_' Group (Maybe [Text])
groupObjectClassL f Group{..} = (\groupObjectClass -> Group { groupObjectClass, ..} ) <$> f groupObjectClass
{-# INLINE groupObjectClassL #-}

-- | 'groupProfile' Lens
groupProfileL :: Lens_' Group (Maybe GroupProfile)
groupProfileL f Group{..} = (\groupProfile -> Group { groupProfile, ..} ) <$> f groupProfile
{-# INLINE groupProfileL #-}

-- | 'groupType' Lens
groupTypeL :: Lens_' Group (Maybe Text)
groupTypeL f Group{..} = (\groupType -> Group { groupType, ..} ) <$> f groupType
{-# INLINE groupTypeL #-}



-- * GroupProfile

-- | 'groupProfileDescription' Lens
groupProfileDescriptionL :: Lens_' GroupProfile (Maybe Text)
groupProfileDescriptionL f GroupProfile{..} = (\groupProfileDescription -> GroupProfile { groupProfileDescription, ..} ) <$> f groupProfileDescription
{-# INLINE groupProfileDescriptionL #-}

-- | 'groupProfileName' Lens
groupProfileNameL :: Lens_' GroupProfile (Maybe Text)
groupProfileNameL f GroupProfile{..} = (\groupProfileName -> GroupProfile { groupProfileName, ..} ) <$> f groupProfileName
{-# INLINE groupProfileNameL #-}



-- * GroupRule

-- | 'groupRuleEmbedded' Lens
groupRuleEmbeddedL :: Lens_' GroupRule (Maybe (Map.Map String A.Value))
groupRuleEmbeddedL f GroupRule{..} = (\groupRuleEmbedded -> GroupRule { groupRuleEmbedded, ..} ) <$> f groupRuleEmbedded
{-# INLINE groupRuleEmbeddedL #-}

-- | 'groupRuleActions' Lens
groupRuleActionsL :: Lens_' GroupRule (Maybe GroupRuleAction)
groupRuleActionsL f GroupRule{..} = (\groupRuleActions -> GroupRule { groupRuleActions, ..} ) <$> f groupRuleActions
{-# INLINE groupRuleActionsL #-}

-- | 'groupRuleAllGroupsValid' Lens
groupRuleAllGroupsValidL :: Lens_' GroupRule (Maybe Bool)
groupRuleAllGroupsValidL f GroupRule{..} = (\groupRuleAllGroupsValid -> GroupRule { groupRuleAllGroupsValid, ..} ) <$> f groupRuleAllGroupsValid
{-# INLINE groupRuleAllGroupsValidL #-}

-- | 'groupRuleConditions' Lens
groupRuleConditionsL :: Lens_' GroupRule (Maybe GroupRuleConditions)
groupRuleConditionsL f GroupRule{..} = (\groupRuleConditions -> GroupRule { groupRuleConditions, ..} ) <$> f groupRuleConditions
{-# INLINE groupRuleConditionsL #-}

-- | 'groupRuleCreated' Lens
groupRuleCreatedL :: Lens_' GroupRule (Maybe DateTime)
groupRuleCreatedL f GroupRule{..} = (\groupRuleCreated -> GroupRule { groupRuleCreated, ..} ) <$> f groupRuleCreated
{-# INLINE groupRuleCreatedL #-}

-- | 'groupRuleId' Lens
groupRuleIdL :: Lens_' GroupRule (Maybe Text)
groupRuleIdL f GroupRule{..} = (\groupRuleId -> GroupRule { groupRuleId, ..} ) <$> f groupRuleId
{-# INLINE groupRuleIdL #-}

-- | 'groupRuleLastUpdated' Lens
groupRuleLastUpdatedL :: Lens_' GroupRule (Maybe DateTime)
groupRuleLastUpdatedL f GroupRule{..} = (\groupRuleLastUpdated -> GroupRule { groupRuleLastUpdated, ..} ) <$> f groupRuleLastUpdated
{-# INLINE groupRuleLastUpdatedL #-}

-- | 'groupRuleName' Lens
groupRuleNameL :: Lens_' GroupRule (Maybe Text)
groupRuleNameL f GroupRule{..} = (\groupRuleName -> GroupRule { groupRuleName, ..} ) <$> f groupRuleName
{-# INLINE groupRuleNameL #-}

-- | 'groupRuleStatus' Lens
groupRuleStatusL :: Lens_' GroupRule (Maybe GroupRuleStatus)
groupRuleStatusL f GroupRule{..} = (\groupRuleStatus -> GroupRule { groupRuleStatus, ..} ) <$> f groupRuleStatus
{-# INLINE groupRuleStatusL #-}

-- | 'groupRuleType' Lens
groupRuleTypeL :: Lens_' GroupRule (Maybe Text)
groupRuleTypeL f GroupRule{..} = (\groupRuleType -> GroupRule { groupRuleType, ..} ) <$> f groupRuleType
{-# INLINE groupRuleTypeL #-}



-- * GroupRuleAction

-- | 'groupRuleActionAssignUserToGroups' Lens
groupRuleActionAssignUserToGroupsL :: Lens_' GroupRuleAction (Maybe GroupRuleGroupAssignment)
groupRuleActionAssignUserToGroupsL f GroupRuleAction{..} = (\groupRuleActionAssignUserToGroups -> GroupRuleAction { groupRuleActionAssignUserToGroups, ..} ) <$> f groupRuleActionAssignUserToGroups
{-# INLINE groupRuleActionAssignUserToGroupsL #-}



-- * GroupRuleConditions

-- | 'groupRuleConditionsExpression' Lens
groupRuleConditionsExpressionL :: Lens_' GroupRuleConditions (Maybe GroupRuleExpression)
groupRuleConditionsExpressionL f GroupRuleConditions{..} = (\groupRuleConditionsExpression -> GroupRuleConditions { groupRuleConditionsExpression, ..} ) <$> f groupRuleConditionsExpression
{-# INLINE groupRuleConditionsExpressionL #-}

-- | 'groupRuleConditionsPeople' Lens
groupRuleConditionsPeopleL :: Lens_' GroupRuleConditions (Maybe GroupRulePeopleCondition)
groupRuleConditionsPeopleL f GroupRuleConditions{..} = (\groupRuleConditionsPeople -> GroupRuleConditions { groupRuleConditionsPeople, ..} ) <$> f groupRuleConditionsPeople
{-# INLINE groupRuleConditionsPeopleL #-}



-- * GroupRuleExpression

-- | 'groupRuleExpressionType' Lens
groupRuleExpressionTypeL :: Lens_' GroupRuleExpression (Maybe Text)
groupRuleExpressionTypeL f GroupRuleExpression{..} = (\groupRuleExpressionType -> GroupRuleExpression { groupRuleExpressionType, ..} ) <$> f groupRuleExpressionType
{-# INLINE groupRuleExpressionTypeL #-}

-- | 'groupRuleExpressionValue' Lens
groupRuleExpressionValueL :: Lens_' GroupRuleExpression (Maybe Text)
groupRuleExpressionValueL f GroupRuleExpression{..} = (\groupRuleExpressionValue -> GroupRuleExpression { groupRuleExpressionValue, ..} ) <$> f groupRuleExpressionValue
{-# INLINE groupRuleExpressionValueL #-}



-- * GroupRuleGroupAssignment

-- | 'groupRuleGroupAssignmentGroupIds' Lens
groupRuleGroupAssignmentGroupIdsL :: Lens_' GroupRuleGroupAssignment (Maybe [Text])
groupRuleGroupAssignmentGroupIdsL f GroupRuleGroupAssignment{..} = (\groupRuleGroupAssignmentGroupIds -> GroupRuleGroupAssignment { groupRuleGroupAssignmentGroupIds, ..} ) <$> f groupRuleGroupAssignmentGroupIds
{-# INLINE groupRuleGroupAssignmentGroupIdsL #-}



-- * GroupRuleGroupCondition

-- | 'groupRuleGroupConditionExclude' Lens
groupRuleGroupConditionExcludeL :: Lens_' GroupRuleGroupCondition (Maybe [Text])
groupRuleGroupConditionExcludeL f GroupRuleGroupCondition{..} = (\groupRuleGroupConditionExclude -> GroupRuleGroupCondition { groupRuleGroupConditionExclude, ..} ) <$> f groupRuleGroupConditionExclude
{-# INLINE groupRuleGroupConditionExcludeL #-}

-- | 'groupRuleGroupConditionInclude' Lens
groupRuleGroupConditionIncludeL :: Lens_' GroupRuleGroupCondition (Maybe [Text])
groupRuleGroupConditionIncludeL f GroupRuleGroupCondition{..} = (\groupRuleGroupConditionInclude -> GroupRuleGroupCondition { groupRuleGroupConditionInclude, ..} ) <$> f groupRuleGroupConditionInclude
{-# INLINE groupRuleGroupConditionIncludeL #-}



-- * GroupRulePeopleCondition

-- | 'groupRulePeopleConditionGroups' Lens
groupRulePeopleConditionGroupsL :: Lens_' GroupRulePeopleCondition (Maybe GroupRuleGroupCondition)
groupRulePeopleConditionGroupsL f GroupRulePeopleCondition{..} = (\groupRulePeopleConditionGroups -> GroupRulePeopleCondition { groupRulePeopleConditionGroups, ..} ) <$> f groupRulePeopleConditionGroups
{-# INLINE groupRulePeopleConditionGroupsL #-}

-- | 'groupRulePeopleConditionUsers' Lens
groupRulePeopleConditionUsersL :: Lens_' GroupRulePeopleCondition (Maybe GroupRuleUserCondition)
groupRulePeopleConditionUsersL f GroupRulePeopleCondition{..} = (\groupRulePeopleConditionUsers -> GroupRulePeopleCondition { groupRulePeopleConditionUsers, ..} ) <$> f groupRulePeopleConditionUsers
{-# INLINE groupRulePeopleConditionUsersL #-}



-- * GroupRuleStatus



-- * GroupRuleUserCondition

-- | 'groupRuleUserConditionExclude' Lens
groupRuleUserConditionExcludeL :: Lens_' GroupRuleUserCondition (Maybe [Text])
groupRuleUserConditionExcludeL f GroupRuleUserCondition{..} = (\groupRuleUserConditionExclude -> GroupRuleUserCondition { groupRuleUserConditionExclude, ..} ) <$> f groupRuleUserConditionExclude
{-# INLINE groupRuleUserConditionExcludeL #-}

-- | 'groupRuleUserConditionInclude' Lens
groupRuleUserConditionIncludeL :: Lens_' GroupRuleUserCondition (Maybe [Text])
groupRuleUserConditionIncludeL f GroupRuleUserCondition{..} = (\groupRuleUserConditionInclude -> GroupRuleUserCondition { groupRuleUserConditionInclude, ..} ) <$> f groupRuleUserConditionInclude
{-# INLINE groupRuleUserConditionIncludeL #-}



-- * HardwareFactor

-- | 'hardwareFactorProfile' Lens
hardwareFactorProfileL :: Lens_' HardwareFactor (Maybe HardwareFactorProfile)
hardwareFactorProfileL f HardwareFactor{..} = (\hardwareFactorProfile -> HardwareFactor { hardwareFactorProfile, ..} ) <$> f hardwareFactorProfile
{-# INLINE hardwareFactorProfileL #-}



-- * HardwareFactorProfile

-- | 'hardwareFactorProfileCredentialId' Lens
hardwareFactorProfileCredentialIdL :: Lens_' HardwareFactorProfile (Maybe Text)
hardwareFactorProfileCredentialIdL f HardwareFactorProfile{..} = (\hardwareFactorProfileCredentialId -> HardwareFactorProfile { hardwareFactorProfileCredentialId, ..} ) <$> f hardwareFactorProfileCredentialId
{-# INLINE hardwareFactorProfileCredentialIdL #-}



-- * JsonWebKey

-- | 'jsonWebKeyLinks' Lens
jsonWebKeyLinksL :: Lens_' JsonWebKey (Maybe (Map.Map String A.Value))
jsonWebKeyLinksL f JsonWebKey{..} = (\jsonWebKeyLinks -> JsonWebKey { jsonWebKeyLinks, ..} ) <$> f jsonWebKeyLinks
{-# INLINE jsonWebKeyLinksL #-}

-- | 'jsonWebKeyAlg' Lens
jsonWebKeyAlgL :: Lens_' JsonWebKey (Maybe Text)
jsonWebKeyAlgL f JsonWebKey{..} = (\jsonWebKeyAlg -> JsonWebKey { jsonWebKeyAlg, ..} ) <$> f jsonWebKeyAlg
{-# INLINE jsonWebKeyAlgL #-}

-- | 'jsonWebKeyCreated' Lens
jsonWebKeyCreatedL :: Lens_' JsonWebKey (Maybe DateTime)
jsonWebKeyCreatedL f JsonWebKey{..} = (\jsonWebKeyCreated -> JsonWebKey { jsonWebKeyCreated, ..} ) <$> f jsonWebKeyCreated
{-# INLINE jsonWebKeyCreatedL #-}

-- | 'jsonWebKeyE' Lens
jsonWebKeyEL :: Lens_' JsonWebKey (Maybe Text)
jsonWebKeyEL f JsonWebKey{..} = (\jsonWebKeyE -> JsonWebKey { jsonWebKeyE, ..} ) <$> f jsonWebKeyE
{-# INLINE jsonWebKeyEL #-}

-- | 'jsonWebKeyExpiresAt' Lens
jsonWebKeyExpiresAtL :: Lens_' JsonWebKey (Maybe DateTime)
jsonWebKeyExpiresAtL f JsonWebKey{..} = (\jsonWebKeyExpiresAt -> JsonWebKey { jsonWebKeyExpiresAt, ..} ) <$> f jsonWebKeyExpiresAt
{-# INLINE jsonWebKeyExpiresAtL #-}

-- | 'jsonWebKeyKeyOps' Lens
jsonWebKeyKeyOpsL :: Lens_' JsonWebKey (Maybe [Text])
jsonWebKeyKeyOpsL f JsonWebKey{..} = (\jsonWebKeyKeyOps -> JsonWebKey { jsonWebKeyKeyOps, ..} ) <$> f jsonWebKeyKeyOps
{-# INLINE jsonWebKeyKeyOpsL #-}

-- | 'jsonWebKeyKid' Lens
jsonWebKeyKidL :: Lens_' JsonWebKey (Maybe Text)
jsonWebKeyKidL f JsonWebKey{..} = (\jsonWebKeyKid -> JsonWebKey { jsonWebKeyKid, ..} ) <$> f jsonWebKeyKid
{-# INLINE jsonWebKeyKidL #-}

-- | 'jsonWebKeyKty' Lens
jsonWebKeyKtyL :: Lens_' JsonWebKey (Maybe Text)
jsonWebKeyKtyL f JsonWebKey{..} = (\jsonWebKeyKty -> JsonWebKey { jsonWebKeyKty, ..} ) <$> f jsonWebKeyKty
{-# INLINE jsonWebKeyKtyL #-}

-- | 'jsonWebKeyLastUpdated' Lens
jsonWebKeyLastUpdatedL :: Lens_' JsonWebKey (Maybe DateTime)
jsonWebKeyLastUpdatedL f JsonWebKey{..} = (\jsonWebKeyLastUpdated -> JsonWebKey { jsonWebKeyLastUpdated, ..} ) <$> f jsonWebKeyLastUpdated
{-# INLINE jsonWebKeyLastUpdatedL #-}

-- | 'jsonWebKeyN' Lens
jsonWebKeyNL :: Lens_' JsonWebKey (Maybe Text)
jsonWebKeyNL f JsonWebKey{..} = (\jsonWebKeyN -> JsonWebKey { jsonWebKeyN, ..} ) <$> f jsonWebKeyN
{-# INLINE jsonWebKeyNL #-}

-- | 'jsonWebKeyStatus' Lens
jsonWebKeyStatusL :: Lens_' JsonWebKey (Maybe Text)
jsonWebKeyStatusL f JsonWebKey{..} = (\jsonWebKeyStatus -> JsonWebKey { jsonWebKeyStatus, ..} ) <$> f jsonWebKeyStatus
{-# INLINE jsonWebKeyStatusL #-}

-- | 'jsonWebKeyUse' Lens
jsonWebKeyUseL :: Lens_' JsonWebKey (Maybe Text)
jsonWebKeyUseL f JsonWebKey{..} = (\jsonWebKeyUse -> JsonWebKey { jsonWebKeyUse, ..} ) <$> f jsonWebKeyUse
{-# INLINE jsonWebKeyUseL #-}

-- | 'jsonWebKeyX5c' Lens
jsonWebKeyX5cL :: Lens_' JsonWebKey (Maybe [Text])
jsonWebKeyX5cL f JsonWebKey{..} = (\jsonWebKeyX5c -> JsonWebKey { jsonWebKeyX5c, ..} ) <$> f jsonWebKeyX5c
{-# INLINE jsonWebKeyX5cL #-}

-- | 'jsonWebKeyX5t' Lens
jsonWebKeyX5tL :: Lens_' JsonWebKey (Maybe Text)
jsonWebKeyX5tL f JsonWebKey{..} = (\jsonWebKeyX5t -> JsonWebKey { jsonWebKeyX5t, ..} ) <$> f jsonWebKeyX5t
{-# INLINE jsonWebKeyX5tL #-}

-- | 'jsonWebKeyX5tS256' Lens
jsonWebKeyX5tS256L :: Lens_' JsonWebKey (Maybe Text)
jsonWebKeyX5tS256L f JsonWebKey{..} = (\jsonWebKeyX5tS256 -> JsonWebKey { jsonWebKeyX5tS256, ..} ) <$> f jsonWebKeyX5tS256
{-# INLINE jsonWebKeyX5tS256L #-}

-- | 'jsonWebKeyX5u' Lens
jsonWebKeyX5uL :: Lens_' JsonWebKey (Maybe Text)
jsonWebKeyX5uL f JsonWebKey{..} = (\jsonWebKeyX5u -> JsonWebKey { jsonWebKeyX5u, ..} ) <$> f jsonWebKeyX5u
{-# INLINE jsonWebKeyX5uL #-}



-- * LogActor

-- | 'logActorAlternateId' Lens
logActorAlternateIdL :: Lens_' LogActor (Maybe Text)
logActorAlternateIdL f LogActor{..} = (\logActorAlternateId -> LogActor { logActorAlternateId, ..} ) <$> f logActorAlternateId
{-# INLINE logActorAlternateIdL #-}

-- | 'logActorDetail' Lens
logActorDetailL :: Lens_' LogActor (Maybe (Map.Map String A.Value))
logActorDetailL f LogActor{..} = (\logActorDetail -> LogActor { logActorDetail, ..} ) <$> f logActorDetail
{-# INLINE logActorDetailL #-}

-- | 'logActorDisplayName' Lens
logActorDisplayNameL :: Lens_' LogActor (Maybe Text)
logActorDisplayNameL f LogActor{..} = (\logActorDisplayName -> LogActor { logActorDisplayName, ..} ) <$> f logActorDisplayName
{-# INLINE logActorDisplayNameL #-}

-- | 'logActorId' Lens
logActorIdL :: Lens_' LogActor (Maybe Text)
logActorIdL f LogActor{..} = (\logActorId -> LogActor { logActorId, ..} ) <$> f logActorId
{-# INLINE logActorIdL #-}

-- | 'logActorType' Lens
logActorTypeL :: Lens_' LogActor (Maybe Text)
logActorTypeL f LogActor{..} = (\logActorType -> LogActor { logActorType, ..} ) <$> f logActorType
{-# INLINE logActorTypeL #-}



-- * LogAuthenticationContext

-- | 'logAuthenticationContextAuthenticationProvider' Lens
logAuthenticationContextAuthenticationProviderL :: Lens_' LogAuthenticationContext (Maybe LogAuthenticationProvider)
logAuthenticationContextAuthenticationProviderL f LogAuthenticationContext{..} = (\logAuthenticationContextAuthenticationProvider -> LogAuthenticationContext { logAuthenticationContextAuthenticationProvider, ..} ) <$> f logAuthenticationContextAuthenticationProvider
{-# INLINE logAuthenticationContextAuthenticationProviderL #-}

-- | 'logAuthenticationContextAuthenticationStep' Lens
logAuthenticationContextAuthenticationStepL :: Lens_' LogAuthenticationContext (Maybe Int)
logAuthenticationContextAuthenticationStepL f LogAuthenticationContext{..} = (\logAuthenticationContextAuthenticationStep -> LogAuthenticationContext { logAuthenticationContextAuthenticationStep, ..} ) <$> f logAuthenticationContextAuthenticationStep
{-# INLINE logAuthenticationContextAuthenticationStepL #-}

-- | 'logAuthenticationContextCredentialProvider' Lens
logAuthenticationContextCredentialProviderL :: Lens_' LogAuthenticationContext (Maybe [LogCredentialProvider])
logAuthenticationContextCredentialProviderL f LogAuthenticationContext{..} = (\logAuthenticationContextCredentialProvider -> LogAuthenticationContext { logAuthenticationContextCredentialProvider, ..} ) <$> f logAuthenticationContextCredentialProvider
{-# INLINE logAuthenticationContextCredentialProviderL #-}

-- | 'logAuthenticationContextCredentialType' Lens
logAuthenticationContextCredentialTypeL :: Lens_' LogAuthenticationContext (Maybe [LogCredentialType])
logAuthenticationContextCredentialTypeL f LogAuthenticationContext{..} = (\logAuthenticationContextCredentialType -> LogAuthenticationContext { logAuthenticationContextCredentialType, ..} ) <$> f logAuthenticationContextCredentialType
{-# INLINE logAuthenticationContextCredentialTypeL #-}

-- | 'logAuthenticationContextExternalSessionId' Lens
logAuthenticationContextExternalSessionIdL :: Lens_' LogAuthenticationContext (Maybe Text)
logAuthenticationContextExternalSessionIdL f LogAuthenticationContext{..} = (\logAuthenticationContextExternalSessionId -> LogAuthenticationContext { logAuthenticationContextExternalSessionId, ..} ) <$> f logAuthenticationContextExternalSessionId
{-# INLINE logAuthenticationContextExternalSessionIdL #-}

-- | 'logAuthenticationContextInterface' Lens
logAuthenticationContextInterfaceL :: Lens_' LogAuthenticationContext (Maybe Text)
logAuthenticationContextInterfaceL f LogAuthenticationContext{..} = (\logAuthenticationContextInterface -> LogAuthenticationContext { logAuthenticationContextInterface, ..} ) <$> f logAuthenticationContextInterface
{-# INLINE logAuthenticationContextInterfaceL #-}

-- | 'logAuthenticationContextIssuer' Lens
logAuthenticationContextIssuerL :: Lens_' LogAuthenticationContext (Maybe LogIssuer)
logAuthenticationContextIssuerL f LogAuthenticationContext{..} = (\logAuthenticationContextIssuer -> LogAuthenticationContext { logAuthenticationContextIssuer, ..} ) <$> f logAuthenticationContextIssuer
{-# INLINE logAuthenticationContextIssuerL #-}



-- * LogAuthenticationProvider



-- * LogClient

-- | 'logClientDevice' Lens
logClientDeviceL :: Lens_' LogClient (Maybe Text)
logClientDeviceL f LogClient{..} = (\logClientDevice -> LogClient { logClientDevice, ..} ) <$> f logClientDevice
{-# INLINE logClientDeviceL #-}

-- | 'logClientGeographicalContext' Lens
logClientGeographicalContextL :: Lens_' LogClient (Maybe LogGeographicalContext)
logClientGeographicalContextL f LogClient{..} = (\logClientGeographicalContext -> LogClient { logClientGeographicalContext, ..} ) <$> f logClientGeographicalContext
{-# INLINE logClientGeographicalContextL #-}

-- | 'logClientId' Lens
logClientIdL :: Lens_' LogClient (Maybe Text)
logClientIdL f LogClient{..} = (\logClientId -> LogClient { logClientId, ..} ) <$> f logClientId
{-# INLINE logClientIdL #-}

-- | 'logClientIpAddress' Lens
logClientIpAddressL :: Lens_' LogClient (Maybe Text)
logClientIpAddressL f LogClient{..} = (\logClientIpAddress -> LogClient { logClientIpAddress, ..} ) <$> f logClientIpAddress
{-# INLINE logClientIpAddressL #-}

-- | 'logClientUserAgent' Lens
logClientUserAgentL :: Lens_' LogClient (Maybe LogUserAgent)
logClientUserAgentL f LogClient{..} = (\logClientUserAgent -> LogClient { logClientUserAgent, ..} ) <$> f logClientUserAgent
{-# INLINE logClientUserAgentL #-}

-- | 'logClientZone' Lens
logClientZoneL :: Lens_' LogClient (Maybe Text)
logClientZoneL f LogClient{..} = (\logClientZone -> LogClient { logClientZone, ..} ) <$> f logClientZone
{-# INLINE logClientZoneL #-}



-- * LogCredentialProvider



-- * LogCredentialType



-- * LogDebugContext

-- | 'logDebugContextDebugData' Lens
logDebugContextDebugDataL :: Lens_' LogDebugContext (Maybe (Map.Map String A.Value))
logDebugContextDebugDataL f LogDebugContext{..} = (\logDebugContextDebugData -> LogDebugContext { logDebugContextDebugData, ..} ) <$> f logDebugContextDebugData
{-# INLINE logDebugContextDebugDataL #-}



-- * LogEvent

-- | 'logEventActor' Lens
logEventActorL :: Lens_' LogEvent (Maybe LogActor)
logEventActorL f LogEvent{..} = (\logEventActor -> LogEvent { logEventActor, ..} ) <$> f logEventActor
{-# INLINE logEventActorL #-}

-- | 'logEventAuthenticationContext' Lens
logEventAuthenticationContextL :: Lens_' LogEvent (Maybe LogAuthenticationContext)
logEventAuthenticationContextL f LogEvent{..} = (\logEventAuthenticationContext -> LogEvent { logEventAuthenticationContext, ..} ) <$> f logEventAuthenticationContext
{-# INLINE logEventAuthenticationContextL #-}

-- | 'logEventClient' Lens
logEventClientL :: Lens_' LogEvent (Maybe LogClient)
logEventClientL f LogEvent{..} = (\logEventClient -> LogEvent { logEventClient, ..} ) <$> f logEventClient
{-# INLINE logEventClientL #-}

-- | 'logEventDebugContext' Lens
logEventDebugContextL :: Lens_' LogEvent (Maybe LogDebugContext)
logEventDebugContextL f LogEvent{..} = (\logEventDebugContext -> LogEvent { logEventDebugContext, ..} ) <$> f logEventDebugContext
{-# INLINE logEventDebugContextL #-}

-- | 'logEventDisplayMessage' Lens
logEventDisplayMessageL :: Lens_' LogEvent (Maybe Text)
logEventDisplayMessageL f LogEvent{..} = (\logEventDisplayMessage -> LogEvent { logEventDisplayMessage, ..} ) <$> f logEventDisplayMessage
{-# INLINE logEventDisplayMessageL #-}

-- | 'logEventEventType' Lens
logEventEventTypeL :: Lens_' LogEvent (Maybe Text)
logEventEventTypeL f LogEvent{..} = (\logEventEventType -> LogEvent { logEventEventType, ..} ) <$> f logEventEventType
{-# INLINE logEventEventTypeL #-}

-- | 'logEventLegacyEventType' Lens
logEventLegacyEventTypeL :: Lens_' LogEvent (Maybe Text)
logEventLegacyEventTypeL f LogEvent{..} = (\logEventLegacyEventType -> LogEvent { logEventLegacyEventType, ..} ) <$> f logEventLegacyEventType
{-# INLINE logEventLegacyEventTypeL #-}

-- | 'logEventOutcome' Lens
logEventOutcomeL :: Lens_' LogEvent (Maybe LogOutcome)
logEventOutcomeL f LogEvent{..} = (\logEventOutcome -> LogEvent { logEventOutcome, ..} ) <$> f logEventOutcome
{-# INLINE logEventOutcomeL #-}

-- | 'logEventPublished' Lens
logEventPublishedL :: Lens_' LogEvent (Maybe DateTime)
logEventPublishedL f LogEvent{..} = (\logEventPublished -> LogEvent { logEventPublished, ..} ) <$> f logEventPublished
{-# INLINE logEventPublishedL #-}

-- | 'logEventRequest' Lens
logEventRequestL :: Lens_' LogEvent (Maybe LogRequest)
logEventRequestL f LogEvent{..} = (\logEventRequest -> LogEvent { logEventRequest, ..} ) <$> f logEventRequest
{-# INLINE logEventRequestL #-}

-- | 'logEventSecurityContext' Lens
logEventSecurityContextL :: Lens_' LogEvent (Maybe LogSecurityContext)
logEventSecurityContextL f LogEvent{..} = (\logEventSecurityContext -> LogEvent { logEventSecurityContext, ..} ) <$> f logEventSecurityContext
{-# INLINE logEventSecurityContextL #-}

-- | 'logEventSeverity' Lens
logEventSeverityL :: Lens_' LogEvent (Maybe LogSeverity)
logEventSeverityL f LogEvent{..} = (\logEventSeverity -> LogEvent { logEventSeverity, ..} ) <$> f logEventSeverity
{-# INLINE logEventSeverityL #-}

-- | 'logEventTarget' Lens
logEventTargetL :: Lens_' LogEvent (Maybe [LogTarget])
logEventTargetL f LogEvent{..} = (\logEventTarget -> LogEvent { logEventTarget, ..} ) <$> f logEventTarget
{-# INLINE logEventTargetL #-}

-- | 'logEventTransaction' Lens
logEventTransactionL :: Lens_' LogEvent (Maybe LogTransaction)
logEventTransactionL f LogEvent{..} = (\logEventTransaction -> LogEvent { logEventTransaction, ..} ) <$> f logEventTransaction
{-# INLINE logEventTransactionL #-}

-- | 'logEventUuid' Lens
logEventUuidL :: Lens_' LogEvent (Maybe Text)
logEventUuidL f LogEvent{..} = (\logEventUuid -> LogEvent { logEventUuid, ..} ) <$> f logEventUuid
{-# INLINE logEventUuidL #-}

-- | 'logEventVersion' Lens
logEventVersionL :: Lens_' LogEvent (Maybe Text)
logEventVersionL f LogEvent{..} = (\logEventVersion -> LogEvent { logEventVersion, ..} ) <$> f logEventVersion
{-# INLINE logEventVersionL #-}



-- * LogGeographicalContext

-- | 'logGeographicalContextCity' Lens
logGeographicalContextCityL :: Lens_' LogGeographicalContext (Maybe Text)
logGeographicalContextCityL f LogGeographicalContext{..} = (\logGeographicalContextCity -> LogGeographicalContext { logGeographicalContextCity, ..} ) <$> f logGeographicalContextCity
{-# INLINE logGeographicalContextCityL #-}

-- | 'logGeographicalContextCountry' Lens
logGeographicalContextCountryL :: Lens_' LogGeographicalContext (Maybe Text)
logGeographicalContextCountryL f LogGeographicalContext{..} = (\logGeographicalContextCountry -> LogGeographicalContext { logGeographicalContextCountry, ..} ) <$> f logGeographicalContextCountry
{-# INLINE logGeographicalContextCountryL #-}

-- | 'logGeographicalContextGeolocation' Lens
logGeographicalContextGeolocationL :: Lens_' LogGeographicalContext (Maybe LogGeolocation)
logGeographicalContextGeolocationL f LogGeographicalContext{..} = (\logGeographicalContextGeolocation -> LogGeographicalContext { logGeographicalContextGeolocation, ..} ) <$> f logGeographicalContextGeolocation
{-# INLINE logGeographicalContextGeolocationL #-}

-- | 'logGeographicalContextPostalCode' Lens
logGeographicalContextPostalCodeL :: Lens_' LogGeographicalContext (Maybe Text)
logGeographicalContextPostalCodeL f LogGeographicalContext{..} = (\logGeographicalContextPostalCode -> LogGeographicalContext { logGeographicalContextPostalCode, ..} ) <$> f logGeographicalContextPostalCode
{-# INLINE logGeographicalContextPostalCodeL #-}

-- | 'logGeographicalContextState' Lens
logGeographicalContextStateL :: Lens_' LogGeographicalContext (Maybe Text)
logGeographicalContextStateL f LogGeographicalContext{..} = (\logGeographicalContextState -> LogGeographicalContext { logGeographicalContextState, ..} ) <$> f logGeographicalContextState
{-# INLINE logGeographicalContextStateL #-}



-- * LogGeolocation

-- | 'logGeolocationLat' Lens
logGeolocationLatL :: Lens_' LogGeolocation (Maybe Double)
logGeolocationLatL f LogGeolocation{..} = (\logGeolocationLat -> LogGeolocation { logGeolocationLat, ..} ) <$> f logGeolocationLat
{-# INLINE logGeolocationLatL #-}

-- | 'logGeolocationLon' Lens
logGeolocationLonL :: Lens_' LogGeolocation (Maybe Double)
logGeolocationLonL f LogGeolocation{..} = (\logGeolocationLon -> LogGeolocation { logGeolocationLon, ..} ) <$> f logGeolocationLon
{-# INLINE logGeolocationLonL #-}



-- * LogIpAddress

-- | 'logIpAddressGeographicalContext' Lens
logIpAddressGeographicalContextL :: Lens_' LogIpAddress (Maybe LogGeographicalContext)
logIpAddressGeographicalContextL f LogIpAddress{..} = (\logIpAddressGeographicalContext -> LogIpAddress { logIpAddressGeographicalContext, ..} ) <$> f logIpAddressGeographicalContext
{-# INLINE logIpAddressGeographicalContextL #-}

-- | 'logIpAddressIp' Lens
logIpAddressIpL :: Lens_' LogIpAddress (Maybe Text)
logIpAddressIpL f LogIpAddress{..} = (\logIpAddressIp -> LogIpAddress { logIpAddressIp, ..} ) <$> f logIpAddressIp
{-# INLINE logIpAddressIpL #-}

-- | 'logIpAddressSource' Lens
logIpAddressSourceL :: Lens_' LogIpAddress (Maybe Text)
logIpAddressSourceL f LogIpAddress{..} = (\logIpAddressSource -> LogIpAddress { logIpAddressSource, ..} ) <$> f logIpAddressSource
{-# INLINE logIpAddressSourceL #-}

-- | 'logIpAddressVersion' Lens
logIpAddressVersionL :: Lens_' LogIpAddress (Maybe Text)
logIpAddressVersionL f LogIpAddress{..} = (\logIpAddressVersion -> LogIpAddress { logIpAddressVersion, ..} ) <$> f logIpAddressVersion
{-# INLINE logIpAddressVersionL #-}



-- * LogIssuer

-- | 'logIssuerId' Lens
logIssuerIdL :: Lens_' LogIssuer (Maybe Text)
logIssuerIdL f LogIssuer{..} = (\logIssuerId -> LogIssuer { logIssuerId, ..} ) <$> f logIssuerId
{-# INLINE logIssuerIdL #-}

-- | 'logIssuerType' Lens
logIssuerTypeL :: Lens_' LogIssuer (Maybe Text)
logIssuerTypeL f LogIssuer{..} = (\logIssuerType -> LogIssuer { logIssuerType, ..} ) <$> f logIssuerType
{-# INLINE logIssuerTypeL #-}



-- * LogOutcome

-- | 'logOutcomeReason' Lens
logOutcomeReasonL :: Lens_' LogOutcome (Maybe Text)
logOutcomeReasonL f LogOutcome{..} = (\logOutcomeReason -> LogOutcome { logOutcomeReason, ..} ) <$> f logOutcomeReason
{-# INLINE logOutcomeReasonL #-}

-- | 'logOutcomeResult' Lens
logOutcomeResultL :: Lens_' LogOutcome (Maybe Text)
logOutcomeResultL f LogOutcome{..} = (\logOutcomeResult -> LogOutcome { logOutcomeResult, ..} ) <$> f logOutcomeResult
{-# INLINE logOutcomeResultL #-}



-- * LogRequest

-- | 'logRequestIpChain' Lens
logRequestIpChainL :: Lens_' LogRequest (Maybe [LogIpAddress])
logRequestIpChainL f LogRequest{..} = (\logRequestIpChain -> LogRequest { logRequestIpChain, ..} ) <$> f logRequestIpChain
{-# INLINE logRequestIpChainL #-}



-- * LogSecurityContext

-- | 'logSecurityContextAsNumber' Lens
logSecurityContextAsNumberL :: Lens_' LogSecurityContext (Maybe Int)
logSecurityContextAsNumberL f LogSecurityContext{..} = (\logSecurityContextAsNumber -> LogSecurityContext { logSecurityContextAsNumber, ..} ) <$> f logSecurityContextAsNumber
{-# INLINE logSecurityContextAsNumberL #-}

-- | 'logSecurityContextAsOrg' Lens
logSecurityContextAsOrgL :: Lens_' LogSecurityContext (Maybe Text)
logSecurityContextAsOrgL f LogSecurityContext{..} = (\logSecurityContextAsOrg -> LogSecurityContext { logSecurityContextAsOrg, ..} ) <$> f logSecurityContextAsOrg
{-# INLINE logSecurityContextAsOrgL #-}

-- | 'logSecurityContextDomain' Lens
logSecurityContextDomainL :: Lens_' LogSecurityContext (Maybe Text)
logSecurityContextDomainL f LogSecurityContext{..} = (\logSecurityContextDomain -> LogSecurityContext { logSecurityContextDomain, ..} ) <$> f logSecurityContextDomain
{-# INLINE logSecurityContextDomainL #-}

-- | 'logSecurityContextIsProxy' Lens
logSecurityContextIsProxyL :: Lens_' LogSecurityContext (Maybe Bool)
logSecurityContextIsProxyL f LogSecurityContext{..} = (\logSecurityContextIsProxy -> LogSecurityContext { logSecurityContextIsProxy, ..} ) <$> f logSecurityContextIsProxy
{-# INLINE logSecurityContextIsProxyL #-}

-- | 'logSecurityContextIsp' Lens
logSecurityContextIspL :: Lens_' LogSecurityContext (Maybe Text)
logSecurityContextIspL f LogSecurityContext{..} = (\logSecurityContextIsp -> LogSecurityContext { logSecurityContextIsp, ..} ) <$> f logSecurityContextIsp
{-# INLINE logSecurityContextIspL #-}



-- * LogSeverity



-- * LogTarget

-- | 'logTargetAlternateId' Lens
logTargetAlternateIdL :: Lens_' LogTarget (Maybe Text)
logTargetAlternateIdL f LogTarget{..} = (\logTargetAlternateId -> LogTarget { logTargetAlternateId, ..} ) <$> f logTargetAlternateId
{-# INLINE logTargetAlternateIdL #-}

-- | 'logTargetDetailEntry' Lens
logTargetDetailEntryL :: Lens_' LogTarget (Maybe (Map.Map String A.Value))
logTargetDetailEntryL f LogTarget{..} = (\logTargetDetailEntry -> LogTarget { logTargetDetailEntry, ..} ) <$> f logTargetDetailEntry
{-# INLINE logTargetDetailEntryL #-}

-- | 'logTargetDisplayName' Lens
logTargetDisplayNameL :: Lens_' LogTarget (Maybe Text)
logTargetDisplayNameL f LogTarget{..} = (\logTargetDisplayName -> LogTarget { logTargetDisplayName, ..} ) <$> f logTargetDisplayName
{-# INLINE logTargetDisplayNameL #-}

-- | 'logTargetId' Lens
logTargetIdL :: Lens_' LogTarget (Maybe Text)
logTargetIdL f LogTarget{..} = (\logTargetId -> LogTarget { logTargetId, ..} ) <$> f logTargetId
{-# INLINE logTargetIdL #-}

-- | 'logTargetType' Lens
logTargetTypeL :: Lens_' LogTarget (Maybe Text)
logTargetTypeL f LogTarget{..} = (\logTargetType -> LogTarget { logTargetType, ..} ) <$> f logTargetType
{-# INLINE logTargetTypeL #-}



-- * LogTransaction

-- | 'logTransactionDetail' Lens
logTransactionDetailL :: Lens_' LogTransaction (Maybe (Map.Map String A.Value))
logTransactionDetailL f LogTransaction{..} = (\logTransactionDetail -> LogTransaction { logTransactionDetail, ..} ) <$> f logTransactionDetail
{-# INLINE logTransactionDetailL #-}

-- | 'logTransactionId' Lens
logTransactionIdL :: Lens_' LogTransaction (Maybe Text)
logTransactionIdL f LogTransaction{..} = (\logTransactionId -> LogTransaction { logTransactionId, ..} ) <$> f logTransactionId
{-# INLINE logTransactionIdL #-}

-- | 'logTransactionType' Lens
logTransactionTypeL :: Lens_' LogTransaction (Maybe Text)
logTransactionTypeL f LogTransaction{..} = (\logTransactionType -> LogTransaction { logTransactionType, ..} ) <$> f logTransactionType
{-# INLINE logTransactionTypeL #-}



-- * LogUserAgent

-- | 'logUserAgentBrowser' Lens
logUserAgentBrowserL :: Lens_' LogUserAgent (Maybe Text)
logUserAgentBrowserL f LogUserAgent{..} = (\logUserAgentBrowser -> LogUserAgent { logUserAgentBrowser, ..} ) <$> f logUserAgentBrowser
{-# INLINE logUserAgentBrowserL #-}

-- | 'logUserAgentOs' Lens
logUserAgentOsL :: Lens_' LogUserAgent (Maybe Text)
logUserAgentOsL f LogUserAgent{..} = (\logUserAgentOs -> LogUserAgent { logUserAgentOs, ..} ) <$> f logUserAgentOs
{-# INLINE logUserAgentOsL #-}

-- | 'logUserAgentRawUserAgent' Lens
logUserAgentRawUserAgentL :: Lens_' LogUserAgent (Maybe Text)
logUserAgentRawUserAgentL f LogUserAgent{..} = (\logUserAgentRawUserAgent -> LogUserAgent { logUserAgentRawUserAgent, ..} ) <$> f logUserAgentRawUserAgent
{-# INLINE logUserAgentRawUserAgentL #-}



-- * OAuthApplicationCredentials

-- | 'oAuthApplicationCredentialsOauthClient' Lens
oAuthApplicationCredentialsOauthClientL :: Lens_' OAuthApplicationCredentials (Maybe ApplicationCredentialsOAuthClient)
oAuthApplicationCredentialsOauthClientL f OAuthApplicationCredentials{..} = (\oAuthApplicationCredentialsOauthClient -> OAuthApplicationCredentials { oAuthApplicationCredentialsOauthClient, ..} ) <$> f oAuthApplicationCredentialsOauthClient
{-# INLINE oAuthApplicationCredentialsOauthClientL #-}



-- * OAuthEndpointAuthenticationMethod



-- * OAuthGrantType



-- * OAuthResponseType



-- * OpenIdConnectApplication

-- | 'openIdConnectApplicationCredentials' Lens
openIdConnectApplicationCredentialsL :: Lens_' OpenIdConnectApplication (Maybe OAuthApplicationCredentials)
openIdConnectApplicationCredentialsL f OpenIdConnectApplication{..} = (\openIdConnectApplicationCredentials -> OpenIdConnectApplication { openIdConnectApplicationCredentials, ..} ) <$> f openIdConnectApplicationCredentials
{-# INLINE openIdConnectApplicationCredentialsL #-}

-- | 'openIdConnectApplicationName' Lens
openIdConnectApplicationNameL :: Lens_' OpenIdConnectApplication (Maybe A.Value)
openIdConnectApplicationNameL f OpenIdConnectApplication{..} = (\openIdConnectApplicationName -> OpenIdConnectApplication { openIdConnectApplicationName, ..} ) <$> f openIdConnectApplicationName
{-# INLINE openIdConnectApplicationNameL #-}

-- | 'openIdConnectApplicationSettings' Lens
openIdConnectApplicationSettingsL :: Lens_' OpenIdConnectApplication (Maybe OpenIdConnectApplicationSettings)
openIdConnectApplicationSettingsL f OpenIdConnectApplication{..} = (\openIdConnectApplicationSettings -> OpenIdConnectApplication { openIdConnectApplicationSettings, ..} ) <$> f openIdConnectApplicationSettings
{-# INLINE openIdConnectApplicationSettingsL #-}



-- * OpenIdConnectApplicationConsentMethod



-- * OpenIdConnectApplicationSettings

-- | 'openIdConnectApplicationSettingsOauthClient' Lens
openIdConnectApplicationSettingsOauthClientL :: Lens_' OpenIdConnectApplicationSettings (Maybe OpenIdConnectApplicationSettingsClient)
openIdConnectApplicationSettingsOauthClientL f OpenIdConnectApplicationSettings{..} = (\openIdConnectApplicationSettingsOauthClient -> OpenIdConnectApplicationSettings { openIdConnectApplicationSettingsOauthClient, ..} ) <$> f openIdConnectApplicationSettingsOauthClient
{-# INLINE openIdConnectApplicationSettingsOauthClientL #-}



-- * OpenIdConnectApplicationSettingsClient

-- | 'openIdConnectApplicationSettingsClientApplicationType' Lens
openIdConnectApplicationSettingsClientApplicationTypeL :: Lens_' OpenIdConnectApplicationSettingsClient (Maybe OpenIdConnectApplicationType)
openIdConnectApplicationSettingsClientApplicationTypeL f OpenIdConnectApplicationSettingsClient{..} = (\openIdConnectApplicationSettingsClientApplicationType -> OpenIdConnectApplicationSettingsClient { openIdConnectApplicationSettingsClientApplicationType, ..} ) <$> f openIdConnectApplicationSettingsClientApplicationType
{-# INLINE openIdConnectApplicationSettingsClientApplicationTypeL #-}

-- | 'openIdConnectApplicationSettingsClientClientUri' Lens
openIdConnectApplicationSettingsClientClientUriL :: Lens_' OpenIdConnectApplicationSettingsClient (Maybe Text)
openIdConnectApplicationSettingsClientClientUriL f OpenIdConnectApplicationSettingsClient{..} = (\openIdConnectApplicationSettingsClientClientUri -> OpenIdConnectApplicationSettingsClient { openIdConnectApplicationSettingsClientClientUri, ..} ) <$> f openIdConnectApplicationSettingsClientClientUri
{-# INLINE openIdConnectApplicationSettingsClientClientUriL #-}

-- | 'openIdConnectApplicationSettingsClientConsentMethod' Lens
openIdConnectApplicationSettingsClientConsentMethodL :: Lens_' OpenIdConnectApplicationSettingsClient (Maybe OpenIdConnectApplicationConsentMethod)
openIdConnectApplicationSettingsClientConsentMethodL f OpenIdConnectApplicationSettingsClient{..} = (\openIdConnectApplicationSettingsClientConsentMethod -> OpenIdConnectApplicationSettingsClient { openIdConnectApplicationSettingsClientConsentMethod, ..} ) <$> f openIdConnectApplicationSettingsClientConsentMethod
{-# INLINE openIdConnectApplicationSettingsClientConsentMethodL #-}

-- | 'openIdConnectApplicationSettingsClientGrantTypes' Lens
openIdConnectApplicationSettingsClientGrantTypesL :: Lens_' OpenIdConnectApplicationSettingsClient (Maybe [OAuthGrantType])
openIdConnectApplicationSettingsClientGrantTypesL f OpenIdConnectApplicationSettingsClient{..} = (\openIdConnectApplicationSettingsClientGrantTypes -> OpenIdConnectApplicationSettingsClient { openIdConnectApplicationSettingsClientGrantTypes, ..} ) <$> f openIdConnectApplicationSettingsClientGrantTypes
{-# INLINE openIdConnectApplicationSettingsClientGrantTypesL #-}

-- | 'openIdConnectApplicationSettingsClientLogoUri' Lens
openIdConnectApplicationSettingsClientLogoUriL :: Lens_' OpenIdConnectApplicationSettingsClient (Maybe Text)
openIdConnectApplicationSettingsClientLogoUriL f OpenIdConnectApplicationSettingsClient{..} = (\openIdConnectApplicationSettingsClientLogoUri -> OpenIdConnectApplicationSettingsClient { openIdConnectApplicationSettingsClientLogoUri, ..} ) <$> f openIdConnectApplicationSettingsClientLogoUri
{-# INLINE openIdConnectApplicationSettingsClientLogoUriL #-}

-- | 'openIdConnectApplicationSettingsClientPolicyUri' Lens
openIdConnectApplicationSettingsClientPolicyUriL :: Lens_' OpenIdConnectApplicationSettingsClient (Maybe Text)
openIdConnectApplicationSettingsClientPolicyUriL f OpenIdConnectApplicationSettingsClient{..} = (\openIdConnectApplicationSettingsClientPolicyUri -> OpenIdConnectApplicationSettingsClient { openIdConnectApplicationSettingsClientPolicyUri, ..} ) <$> f openIdConnectApplicationSettingsClientPolicyUri
{-# INLINE openIdConnectApplicationSettingsClientPolicyUriL #-}

-- | 'openIdConnectApplicationSettingsClientRedirectUris' Lens
openIdConnectApplicationSettingsClientRedirectUrisL :: Lens_' OpenIdConnectApplicationSettingsClient (Maybe [Text])
openIdConnectApplicationSettingsClientRedirectUrisL f OpenIdConnectApplicationSettingsClient{..} = (\openIdConnectApplicationSettingsClientRedirectUris -> OpenIdConnectApplicationSettingsClient { openIdConnectApplicationSettingsClientRedirectUris, ..} ) <$> f openIdConnectApplicationSettingsClientRedirectUris
{-# INLINE openIdConnectApplicationSettingsClientRedirectUrisL #-}

-- | 'openIdConnectApplicationSettingsClientResponseTypes' Lens
openIdConnectApplicationSettingsClientResponseTypesL :: Lens_' OpenIdConnectApplicationSettingsClient (Maybe [OAuthResponseType])
openIdConnectApplicationSettingsClientResponseTypesL f OpenIdConnectApplicationSettingsClient{..} = (\openIdConnectApplicationSettingsClientResponseTypes -> OpenIdConnectApplicationSettingsClient { openIdConnectApplicationSettingsClientResponseTypes, ..} ) <$> f openIdConnectApplicationSettingsClientResponseTypes
{-# INLINE openIdConnectApplicationSettingsClientResponseTypesL #-}

-- | 'openIdConnectApplicationSettingsClientTosUri' Lens
openIdConnectApplicationSettingsClientTosUriL :: Lens_' OpenIdConnectApplicationSettingsClient (Maybe Text)
openIdConnectApplicationSettingsClientTosUriL f OpenIdConnectApplicationSettingsClient{..} = (\openIdConnectApplicationSettingsClientTosUri -> OpenIdConnectApplicationSettingsClient { openIdConnectApplicationSettingsClientTosUri, ..} ) <$> f openIdConnectApplicationSettingsClientTosUri
{-# INLINE openIdConnectApplicationSettingsClientTosUriL #-}



-- * OpenIdConnectApplicationType



-- * PasswordCredential

-- | 'passwordCredentialValue' Lens
passwordCredentialValueL :: Lens_' PasswordCredential (Maybe Text)
passwordCredentialValueL f PasswordCredential{..} = (\passwordCredentialValue -> PasswordCredential { passwordCredentialValue, ..} ) <$> f passwordCredentialValue
{-# INLINE passwordCredentialValueL #-}



-- * PushFactor

-- | 'pushFactorProfile' Lens
pushFactorProfileL :: Lens_' PushFactor (Maybe PushFactorProfile)
pushFactorProfileL f PushFactor{..} = (\pushFactorProfile -> PushFactor { pushFactorProfile, ..} ) <$> f pushFactorProfile
{-# INLINE pushFactorProfileL #-}



-- * PushFactorProfile

-- | 'pushFactorProfileCredentialId' Lens
pushFactorProfileCredentialIdL :: Lens_' PushFactorProfile (Maybe Text)
pushFactorProfileCredentialIdL f PushFactorProfile{..} = (\pushFactorProfileCredentialId -> PushFactorProfile { pushFactorProfileCredentialId, ..} ) <$> f pushFactorProfileCredentialId
{-# INLINE pushFactorProfileCredentialIdL #-}

-- | 'pushFactorProfileDeviceType' Lens
pushFactorProfileDeviceTypeL :: Lens_' PushFactorProfile (Maybe Text)
pushFactorProfileDeviceTypeL f PushFactorProfile{..} = (\pushFactorProfileDeviceType -> PushFactorProfile { pushFactorProfileDeviceType, ..} ) <$> f pushFactorProfileDeviceType
{-# INLINE pushFactorProfileDeviceTypeL #-}

-- | 'pushFactorProfileName' Lens
pushFactorProfileNameL :: Lens_' PushFactorProfile (Maybe Text)
pushFactorProfileNameL f PushFactorProfile{..} = (\pushFactorProfileName -> PushFactorProfile { pushFactorProfileName, ..} ) <$> f pushFactorProfileName
{-# INLINE pushFactorProfileNameL #-}

-- | 'pushFactorProfilePlatform' Lens
pushFactorProfilePlatformL :: Lens_' PushFactorProfile (Maybe Text)
pushFactorProfilePlatformL f PushFactorProfile{..} = (\pushFactorProfilePlatform -> PushFactorProfile { pushFactorProfilePlatform, ..} ) <$> f pushFactorProfilePlatform
{-# INLINE pushFactorProfilePlatformL #-}

-- | 'pushFactorProfileVersion' Lens
pushFactorProfileVersionL :: Lens_' PushFactorProfile (Maybe Text)
pushFactorProfileVersionL f PushFactorProfile{..} = (\pushFactorProfileVersion -> PushFactorProfile { pushFactorProfileVersion, ..} ) <$> f pushFactorProfileVersion
{-# INLINE pushFactorProfileVersionL #-}



-- * RecoveryQuestionCredential

-- | 'recoveryQuestionCredentialAnswer' Lens
recoveryQuestionCredentialAnswerL :: Lens_' RecoveryQuestionCredential (Maybe Text)
recoveryQuestionCredentialAnswerL f RecoveryQuestionCredential{..} = (\recoveryQuestionCredentialAnswer -> RecoveryQuestionCredential { recoveryQuestionCredentialAnswer, ..} ) <$> f recoveryQuestionCredentialAnswer
{-# INLINE recoveryQuestionCredentialAnswerL #-}

-- | 'recoveryQuestionCredentialQuestion' Lens
recoveryQuestionCredentialQuestionL :: Lens_' RecoveryQuestionCredential (Maybe Text)
recoveryQuestionCredentialQuestionL f RecoveryQuestionCredential{..} = (\recoveryQuestionCredentialQuestion -> RecoveryQuestionCredential { recoveryQuestionCredentialQuestion, ..} ) <$> f recoveryQuestionCredentialQuestion
{-# INLINE recoveryQuestionCredentialQuestionL #-}



-- * ResetPasswordToken

-- | 'resetPasswordTokenResetPasswordUrl' Lens
resetPasswordTokenResetPasswordUrlL :: Lens_' ResetPasswordToken (Maybe Text)
resetPasswordTokenResetPasswordUrlL f ResetPasswordToken{..} = (\resetPasswordTokenResetPasswordUrl -> ResetPasswordToken { resetPasswordTokenResetPasswordUrl, ..} ) <$> f resetPasswordTokenResetPasswordUrl
{-# INLINE resetPasswordTokenResetPasswordUrlL #-}



-- * Role

-- | 'roleEmbedded' Lens
roleEmbeddedL :: Lens_' Role (Maybe (Map.Map String A.Value))
roleEmbeddedL f Role{..} = (\roleEmbedded -> Role { roleEmbedded, ..} ) <$> f roleEmbedded
{-# INLINE roleEmbeddedL #-}

-- | 'roleCreated' Lens
roleCreatedL :: Lens_' Role (Maybe DateTime)
roleCreatedL f Role{..} = (\roleCreated -> Role { roleCreated, ..} ) <$> f roleCreated
{-# INLINE roleCreatedL #-}

-- | 'roleDescription' Lens
roleDescriptionL :: Lens_' Role (Maybe Text)
roleDescriptionL f Role{..} = (\roleDescription -> Role { roleDescription, ..} ) <$> f roleDescription
{-# INLINE roleDescriptionL #-}

-- | 'roleId' Lens
roleIdL :: Lens_' Role (Maybe Text)
roleIdL f Role{..} = (\roleId -> Role { roleId, ..} ) <$> f roleId
{-# INLINE roleIdL #-}

-- | 'roleLabel' Lens
roleLabelL :: Lens_' Role (Maybe Text)
roleLabelL f Role{..} = (\roleLabel -> Role { roleLabel, ..} ) <$> f roleLabel
{-# INLINE roleLabelL #-}

-- | 'roleLastUpdated' Lens
roleLastUpdatedL :: Lens_' Role (Maybe DateTime)
roleLastUpdatedL f Role{..} = (\roleLastUpdated -> Role { roleLastUpdated, ..} ) <$> f roleLastUpdated
{-# INLINE roleLastUpdatedL #-}

-- | 'roleStatus' Lens
roleStatusL :: Lens_' Role (Maybe RoleStatus)
roleStatusL f Role{..} = (\roleStatus -> Role { roleStatus, ..} ) <$> f roleStatus
{-# INLINE roleStatusL #-}

-- | 'roleType' Lens
roleTypeL :: Lens_' Role (Maybe Text)
roleTypeL f Role{..} = (\roleType -> Role { roleType, ..} ) <$> f roleType
{-# INLINE roleTypeL #-}



-- * RoleStatus



-- * SamlApplication

-- | 'samlApplicationSettings' Lens
samlApplicationSettingsL :: Lens_' SamlApplication (Maybe SamlApplicationSettings)
samlApplicationSettingsL f SamlApplication{..} = (\samlApplicationSettings -> SamlApplication { samlApplicationSettings, ..} ) <$> f samlApplicationSettings
{-# INLINE samlApplicationSettingsL #-}



-- * SamlApplicationSettings

-- | 'samlApplicationSettingsSignOn' Lens
samlApplicationSettingsSignOnL :: Lens_' SamlApplicationSettings (Maybe SamlApplicationSettingsSignOn)
samlApplicationSettingsSignOnL f SamlApplicationSettings{..} = (\samlApplicationSettingsSignOn -> SamlApplicationSettings { samlApplicationSettingsSignOn, ..} ) <$> f samlApplicationSettingsSignOn
{-# INLINE samlApplicationSettingsSignOnL #-}



-- * SamlApplicationSettingsSignOn

-- | 'samlApplicationSettingsSignOnAssertionSigned' Lens
samlApplicationSettingsSignOnAssertionSignedL :: Lens_' SamlApplicationSettingsSignOn (Maybe Bool)
samlApplicationSettingsSignOnAssertionSignedL f SamlApplicationSettingsSignOn{..} = (\samlApplicationSettingsSignOnAssertionSigned -> SamlApplicationSettingsSignOn { samlApplicationSettingsSignOnAssertionSigned, ..} ) <$> f samlApplicationSettingsSignOnAssertionSigned
{-# INLINE samlApplicationSettingsSignOnAssertionSignedL #-}

-- | 'samlApplicationSettingsSignOnAttributeStatements' Lens
samlApplicationSettingsSignOnAttributeStatementsL :: Lens_' SamlApplicationSettingsSignOn (Maybe [SamlAttributeStatement])
samlApplicationSettingsSignOnAttributeStatementsL f SamlApplicationSettingsSignOn{..} = (\samlApplicationSettingsSignOnAttributeStatements -> SamlApplicationSettingsSignOn { samlApplicationSettingsSignOnAttributeStatements, ..} ) <$> f samlApplicationSettingsSignOnAttributeStatements
{-# INLINE samlApplicationSettingsSignOnAttributeStatementsL #-}

-- | 'samlApplicationSettingsSignOnAudience' Lens
samlApplicationSettingsSignOnAudienceL :: Lens_' SamlApplicationSettingsSignOn (Maybe Text)
samlApplicationSettingsSignOnAudienceL f SamlApplicationSettingsSignOn{..} = (\samlApplicationSettingsSignOnAudience -> SamlApplicationSettingsSignOn { samlApplicationSettingsSignOnAudience, ..} ) <$> f samlApplicationSettingsSignOnAudience
{-# INLINE samlApplicationSettingsSignOnAudienceL #-}

-- | 'samlApplicationSettingsSignOnAudienceOverride' Lens
samlApplicationSettingsSignOnAudienceOverrideL :: Lens_' SamlApplicationSettingsSignOn (Maybe Text)
samlApplicationSettingsSignOnAudienceOverrideL f SamlApplicationSettingsSignOn{..} = (\samlApplicationSettingsSignOnAudienceOverride -> SamlApplicationSettingsSignOn { samlApplicationSettingsSignOnAudienceOverride, ..} ) <$> f samlApplicationSettingsSignOnAudienceOverride
{-# INLINE samlApplicationSettingsSignOnAudienceOverrideL #-}

-- | 'samlApplicationSettingsSignOnAuthnContextClassRef' Lens
samlApplicationSettingsSignOnAuthnContextClassRefL :: Lens_' SamlApplicationSettingsSignOn (Maybe Text)
samlApplicationSettingsSignOnAuthnContextClassRefL f SamlApplicationSettingsSignOn{..} = (\samlApplicationSettingsSignOnAuthnContextClassRef -> SamlApplicationSettingsSignOn { samlApplicationSettingsSignOnAuthnContextClassRef, ..} ) <$> f samlApplicationSettingsSignOnAuthnContextClassRef
{-# INLINE samlApplicationSettingsSignOnAuthnContextClassRefL #-}

-- | 'samlApplicationSettingsSignOnDefaultRelayState' Lens
samlApplicationSettingsSignOnDefaultRelayStateL :: Lens_' SamlApplicationSettingsSignOn (Maybe Text)
samlApplicationSettingsSignOnDefaultRelayStateL f SamlApplicationSettingsSignOn{..} = (\samlApplicationSettingsSignOnDefaultRelayState -> SamlApplicationSettingsSignOn { samlApplicationSettingsSignOnDefaultRelayState, ..} ) <$> f samlApplicationSettingsSignOnDefaultRelayState
{-# INLINE samlApplicationSettingsSignOnDefaultRelayStateL #-}

-- | 'samlApplicationSettingsSignOnDestination' Lens
samlApplicationSettingsSignOnDestinationL :: Lens_' SamlApplicationSettingsSignOn (Maybe Text)
samlApplicationSettingsSignOnDestinationL f SamlApplicationSettingsSignOn{..} = (\samlApplicationSettingsSignOnDestination -> SamlApplicationSettingsSignOn { samlApplicationSettingsSignOnDestination, ..} ) <$> f samlApplicationSettingsSignOnDestination
{-# INLINE samlApplicationSettingsSignOnDestinationL #-}

-- | 'samlApplicationSettingsSignOnDestinationOverride' Lens
samlApplicationSettingsSignOnDestinationOverrideL :: Lens_' SamlApplicationSettingsSignOn (Maybe Text)
samlApplicationSettingsSignOnDestinationOverrideL f SamlApplicationSettingsSignOn{..} = (\samlApplicationSettingsSignOnDestinationOverride -> SamlApplicationSettingsSignOn { samlApplicationSettingsSignOnDestinationOverride, ..} ) <$> f samlApplicationSettingsSignOnDestinationOverride
{-# INLINE samlApplicationSettingsSignOnDestinationOverrideL #-}

-- | 'samlApplicationSettingsSignOnDigestAlgorithm' Lens
samlApplicationSettingsSignOnDigestAlgorithmL :: Lens_' SamlApplicationSettingsSignOn (Maybe Text)
samlApplicationSettingsSignOnDigestAlgorithmL f SamlApplicationSettingsSignOn{..} = (\samlApplicationSettingsSignOnDigestAlgorithm -> SamlApplicationSettingsSignOn { samlApplicationSettingsSignOnDigestAlgorithm, ..} ) <$> f samlApplicationSettingsSignOnDigestAlgorithm
{-# INLINE samlApplicationSettingsSignOnDigestAlgorithmL #-}

-- | 'samlApplicationSettingsSignOnHonorForceAuthn' Lens
samlApplicationSettingsSignOnHonorForceAuthnL :: Lens_' SamlApplicationSettingsSignOn (Maybe Bool)
samlApplicationSettingsSignOnHonorForceAuthnL f SamlApplicationSettingsSignOn{..} = (\samlApplicationSettingsSignOnHonorForceAuthn -> SamlApplicationSettingsSignOn { samlApplicationSettingsSignOnHonorForceAuthn, ..} ) <$> f samlApplicationSettingsSignOnHonorForceAuthn
{-# INLINE samlApplicationSettingsSignOnHonorForceAuthnL #-}

-- | 'samlApplicationSettingsSignOnIdpIssuer' Lens
samlApplicationSettingsSignOnIdpIssuerL :: Lens_' SamlApplicationSettingsSignOn (Maybe Text)
samlApplicationSettingsSignOnIdpIssuerL f SamlApplicationSettingsSignOn{..} = (\samlApplicationSettingsSignOnIdpIssuer -> SamlApplicationSettingsSignOn { samlApplicationSettingsSignOnIdpIssuer, ..} ) <$> f samlApplicationSettingsSignOnIdpIssuer
{-# INLINE samlApplicationSettingsSignOnIdpIssuerL #-}

-- | 'samlApplicationSettingsSignOnRecipient' Lens
samlApplicationSettingsSignOnRecipientL :: Lens_' SamlApplicationSettingsSignOn (Maybe Text)
samlApplicationSettingsSignOnRecipientL f SamlApplicationSettingsSignOn{..} = (\samlApplicationSettingsSignOnRecipient -> SamlApplicationSettingsSignOn { samlApplicationSettingsSignOnRecipient, ..} ) <$> f samlApplicationSettingsSignOnRecipient
{-# INLINE samlApplicationSettingsSignOnRecipientL #-}

-- | 'samlApplicationSettingsSignOnRecipientOverride' Lens
samlApplicationSettingsSignOnRecipientOverrideL :: Lens_' SamlApplicationSettingsSignOn (Maybe Text)
samlApplicationSettingsSignOnRecipientOverrideL f SamlApplicationSettingsSignOn{..} = (\samlApplicationSettingsSignOnRecipientOverride -> SamlApplicationSettingsSignOn { samlApplicationSettingsSignOnRecipientOverride, ..} ) <$> f samlApplicationSettingsSignOnRecipientOverride
{-# INLINE samlApplicationSettingsSignOnRecipientOverrideL #-}

-- | 'samlApplicationSettingsSignOnRequestCompressed' Lens
samlApplicationSettingsSignOnRequestCompressedL :: Lens_' SamlApplicationSettingsSignOn (Maybe Bool)
samlApplicationSettingsSignOnRequestCompressedL f SamlApplicationSettingsSignOn{..} = (\samlApplicationSettingsSignOnRequestCompressed -> SamlApplicationSettingsSignOn { samlApplicationSettingsSignOnRequestCompressed, ..} ) <$> f samlApplicationSettingsSignOnRequestCompressed
{-# INLINE samlApplicationSettingsSignOnRequestCompressedL #-}

-- | 'samlApplicationSettingsSignOnResponseSigned' Lens
samlApplicationSettingsSignOnResponseSignedL :: Lens_' SamlApplicationSettingsSignOn (Maybe Bool)
samlApplicationSettingsSignOnResponseSignedL f SamlApplicationSettingsSignOn{..} = (\samlApplicationSettingsSignOnResponseSigned -> SamlApplicationSettingsSignOn { samlApplicationSettingsSignOnResponseSigned, ..} ) <$> f samlApplicationSettingsSignOnResponseSigned
{-# INLINE samlApplicationSettingsSignOnResponseSignedL #-}

-- | 'samlApplicationSettingsSignOnSignatureAlgorithm' Lens
samlApplicationSettingsSignOnSignatureAlgorithmL :: Lens_' SamlApplicationSettingsSignOn (Maybe Text)
samlApplicationSettingsSignOnSignatureAlgorithmL f SamlApplicationSettingsSignOn{..} = (\samlApplicationSettingsSignOnSignatureAlgorithm -> SamlApplicationSettingsSignOn { samlApplicationSettingsSignOnSignatureAlgorithm, ..} ) <$> f samlApplicationSettingsSignOnSignatureAlgorithm
{-# INLINE samlApplicationSettingsSignOnSignatureAlgorithmL #-}

-- | 'samlApplicationSettingsSignOnSpIssuer' Lens
samlApplicationSettingsSignOnSpIssuerL :: Lens_' SamlApplicationSettingsSignOn (Maybe Text)
samlApplicationSettingsSignOnSpIssuerL f SamlApplicationSettingsSignOn{..} = (\samlApplicationSettingsSignOnSpIssuer -> SamlApplicationSettingsSignOn { samlApplicationSettingsSignOnSpIssuer, ..} ) <$> f samlApplicationSettingsSignOnSpIssuer
{-# INLINE samlApplicationSettingsSignOnSpIssuerL #-}

-- | 'samlApplicationSettingsSignOnSsoAcsUrl' Lens
samlApplicationSettingsSignOnSsoAcsUrlL :: Lens_' SamlApplicationSettingsSignOn (Maybe Text)
samlApplicationSettingsSignOnSsoAcsUrlL f SamlApplicationSettingsSignOn{..} = (\samlApplicationSettingsSignOnSsoAcsUrl -> SamlApplicationSettingsSignOn { samlApplicationSettingsSignOnSsoAcsUrl, ..} ) <$> f samlApplicationSettingsSignOnSsoAcsUrl
{-# INLINE samlApplicationSettingsSignOnSsoAcsUrlL #-}

-- | 'samlApplicationSettingsSignOnSsoAcsUrlOverride' Lens
samlApplicationSettingsSignOnSsoAcsUrlOverrideL :: Lens_' SamlApplicationSettingsSignOn (Maybe Text)
samlApplicationSettingsSignOnSsoAcsUrlOverrideL f SamlApplicationSettingsSignOn{..} = (\samlApplicationSettingsSignOnSsoAcsUrlOverride -> SamlApplicationSettingsSignOn { samlApplicationSettingsSignOnSsoAcsUrlOverride, ..} ) <$> f samlApplicationSettingsSignOnSsoAcsUrlOverride
{-# INLINE samlApplicationSettingsSignOnSsoAcsUrlOverrideL #-}

-- | 'samlApplicationSettingsSignOnSubjectNameIdFormat' Lens
samlApplicationSettingsSignOnSubjectNameIdFormatL :: Lens_' SamlApplicationSettingsSignOn (Maybe Text)
samlApplicationSettingsSignOnSubjectNameIdFormatL f SamlApplicationSettingsSignOn{..} = (\samlApplicationSettingsSignOnSubjectNameIdFormat -> SamlApplicationSettingsSignOn { samlApplicationSettingsSignOnSubjectNameIdFormat, ..} ) <$> f samlApplicationSettingsSignOnSubjectNameIdFormat
{-# INLINE samlApplicationSettingsSignOnSubjectNameIdFormatL #-}

-- | 'samlApplicationSettingsSignOnSubjectNameIdTemplate' Lens
samlApplicationSettingsSignOnSubjectNameIdTemplateL :: Lens_' SamlApplicationSettingsSignOn (Maybe Text)
samlApplicationSettingsSignOnSubjectNameIdTemplateL f SamlApplicationSettingsSignOn{..} = (\samlApplicationSettingsSignOnSubjectNameIdTemplate -> SamlApplicationSettingsSignOn { samlApplicationSettingsSignOnSubjectNameIdTemplate, ..} ) <$> f samlApplicationSettingsSignOnSubjectNameIdTemplate
{-# INLINE samlApplicationSettingsSignOnSubjectNameIdTemplateL #-}



-- * SamlAttributeStatement

-- | 'samlAttributeStatementName' Lens
samlAttributeStatementNameL :: Lens_' SamlAttributeStatement (Maybe Text)
samlAttributeStatementNameL f SamlAttributeStatement{..} = (\samlAttributeStatementName -> SamlAttributeStatement { samlAttributeStatementName, ..} ) <$> f samlAttributeStatementName
{-# INLINE samlAttributeStatementNameL #-}

-- | 'samlAttributeStatementNamespace' Lens
samlAttributeStatementNamespaceL :: Lens_' SamlAttributeStatement (Maybe Text)
samlAttributeStatementNamespaceL f SamlAttributeStatement{..} = (\samlAttributeStatementNamespace -> SamlAttributeStatement { samlAttributeStatementNamespace, ..} ) <$> f samlAttributeStatementNamespace
{-# INLINE samlAttributeStatementNamespaceL #-}

-- | 'samlAttributeStatementType' Lens
samlAttributeStatementTypeL :: Lens_' SamlAttributeStatement (Maybe Text)
samlAttributeStatementTypeL f SamlAttributeStatement{..} = (\samlAttributeStatementType -> SamlAttributeStatement { samlAttributeStatementType, ..} ) <$> f samlAttributeStatementType
{-# INLINE samlAttributeStatementTypeL #-}

-- | 'samlAttributeStatementValues' Lens
samlAttributeStatementValuesL :: Lens_' SamlAttributeStatement (Maybe [Text])
samlAttributeStatementValuesL f SamlAttributeStatement{..} = (\samlAttributeStatementValues -> SamlAttributeStatement { samlAttributeStatementValues, ..} ) <$> f samlAttributeStatementValues
{-# INLINE samlAttributeStatementValuesL #-}



-- * SchemeApplicationCredentials

-- | 'schemeApplicationCredentialsPassword' Lens
schemeApplicationCredentialsPasswordL :: Lens_' SchemeApplicationCredentials (Maybe PasswordCredential)
schemeApplicationCredentialsPasswordL f SchemeApplicationCredentials{..} = (\schemeApplicationCredentialsPassword -> SchemeApplicationCredentials { schemeApplicationCredentialsPassword, ..} ) <$> f schemeApplicationCredentialsPassword
{-# INLINE schemeApplicationCredentialsPasswordL #-}

-- | 'schemeApplicationCredentialsRevealPassword' Lens
schemeApplicationCredentialsRevealPasswordL :: Lens_' SchemeApplicationCredentials (Maybe Bool)
schemeApplicationCredentialsRevealPasswordL f SchemeApplicationCredentials{..} = (\schemeApplicationCredentialsRevealPassword -> SchemeApplicationCredentials { schemeApplicationCredentialsRevealPassword, ..} ) <$> f schemeApplicationCredentialsRevealPassword
{-# INLINE schemeApplicationCredentialsRevealPasswordL #-}

-- | 'schemeApplicationCredentialsScheme' Lens
schemeApplicationCredentialsSchemeL :: Lens_' SchemeApplicationCredentials (Maybe ApplicationCredentialsScheme)
schemeApplicationCredentialsSchemeL f SchemeApplicationCredentials{..} = (\schemeApplicationCredentialsScheme -> SchemeApplicationCredentials { schemeApplicationCredentialsScheme, ..} ) <$> f schemeApplicationCredentialsScheme
{-# INLINE schemeApplicationCredentialsSchemeL #-}

-- | 'schemeApplicationCredentialsSigning' Lens
schemeApplicationCredentialsSigningL :: Lens_' SchemeApplicationCredentials (Maybe ApplicationCredentialsSigning)
schemeApplicationCredentialsSigningL f SchemeApplicationCredentials{..} = (\schemeApplicationCredentialsSigning -> SchemeApplicationCredentials { schemeApplicationCredentialsSigning, ..} ) <$> f schemeApplicationCredentialsSigning
{-# INLINE schemeApplicationCredentialsSigningL #-}

-- | 'schemeApplicationCredentialsUserName' Lens
schemeApplicationCredentialsUserNameL :: Lens_' SchemeApplicationCredentials (Maybe Text)
schemeApplicationCredentialsUserNameL f SchemeApplicationCredentials{..} = (\schemeApplicationCredentialsUserName -> SchemeApplicationCredentials { schemeApplicationCredentialsUserName, ..} ) <$> f schemeApplicationCredentialsUserName
{-# INLINE schemeApplicationCredentialsUserNameL #-}



-- * SecurePasswordStoreApplication

-- | 'securePasswordStoreApplicationCredentials' Lens
securePasswordStoreApplicationCredentialsL :: Lens_' SecurePasswordStoreApplication (Maybe SchemeApplicationCredentials)
securePasswordStoreApplicationCredentialsL f SecurePasswordStoreApplication{..} = (\securePasswordStoreApplicationCredentials -> SecurePasswordStoreApplication { securePasswordStoreApplicationCredentials, ..} ) <$> f securePasswordStoreApplicationCredentials
{-# INLINE securePasswordStoreApplicationCredentialsL #-}

-- | 'securePasswordStoreApplicationName' Lens
securePasswordStoreApplicationNameL :: Lens_' SecurePasswordStoreApplication (Maybe A.Value)
securePasswordStoreApplicationNameL f SecurePasswordStoreApplication{..} = (\securePasswordStoreApplicationName -> SecurePasswordStoreApplication { securePasswordStoreApplicationName, ..} ) <$> f securePasswordStoreApplicationName
{-# INLINE securePasswordStoreApplicationNameL #-}

-- | 'securePasswordStoreApplicationSettings' Lens
securePasswordStoreApplicationSettingsL :: Lens_' SecurePasswordStoreApplication (Maybe SecurePasswordStoreApplicationSettings)
securePasswordStoreApplicationSettingsL f SecurePasswordStoreApplication{..} = (\securePasswordStoreApplicationSettings -> SecurePasswordStoreApplication { securePasswordStoreApplicationSettings, ..} ) <$> f securePasswordStoreApplicationSettings
{-# INLINE securePasswordStoreApplicationSettingsL #-}



-- * SecurePasswordStoreApplicationSettings

-- | 'securePasswordStoreApplicationSettingsApp' Lens
securePasswordStoreApplicationSettingsAppL :: Lens_' SecurePasswordStoreApplicationSettings (Maybe SecurePasswordStoreApplicationSettingsApplication)
securePasswordStoreApplicationSettingsAppL f SecurePasswordStoreApplicationSettings{..} = (\securePasswordStoreApplicationSettingsApp -> SecurePasswordStoreApplicationSettings { securePasswordStoreApplicationSettingsApp, ..} ) <$> f securePasswordStoreApplicationSettingsApp
{-# INLINE securePasswordStoreApplicationSettingsAppL #-}



-- * SecurePasswordStoreApplicationSettingsApplication

-- | 'securePasswordStoreApplicationSettingsApplicationOptionalField1' Lens
securePasswordStoreApplicationSettingsApplicationOptionalField1L :: Lens_' SecurePasswordStoreApplicationSettingsApplication (Maybe Text)
securePasswordStoreApplicationSettingsApplicationOptionalField1L f SecurePasswordStoreApplicationSettingsApplication{..} = (\securePasswordStoreApplicationSettingsApplicationOptionalField1 -> SecurePasswordStoreApplicationSettingsApplication { securePasswordStoreApplicationSettingsApplicationOptionalField1, ..} ) <$> f securePasswordStoreApplicationSettingsApplicationOptionalField1
{-# INLINE securePasswordStoreApplicationSettingsApplicationOptionalField1L #-}

-- | 'securePasswordStoreApplicationSettingsApplicationOptionalField1Value' Lens
securePasswordStoreApplicationSettingsApplicationOptionalField1ValueL :: Lens_' SecurePasswordStoreApplicationSettingsApplication (Maybe Text)
securePasswordStoreApplicationSettingsApplicationOptionalField1ValueL f SecurePasswordStoreApplicationSettingsApplication{..} = (\securePasswordStoreApplicationSettingsApplicationOptionalField1Value -> SecurePasswordStoreApplicationSettingsApplication { securePasswordStoreApplicationSettingsApplicationOptionalField1Value, ..} ) <$> f securePasswordStoreApplicationSettingsApplicationOptionalField1Value
{-# INLINE securePasswordStoreApplicationSettingsApplicationOptionalField1ValueL #-}

-- | 'securePasswordStoreApplicationSettingsApplicationOptionalField2' Lens
securePasswordStoreApplicationSettingsApplicationOptionalField2L :: Lens_' SecurePasswordStoreApplicationSettingsApplication (Maybe Text)
securePasswordStoreApplicationSettingsApplicationOptionalField2L f SecurePasswordStoreApplicationSettingsApplication{..} = (\securePasswordStoreApplicationSettingsApplicationOptionalField2 -> SecurePasswordStoreApplicationSettingsApplication { securePasswordStoreApplicationSettingsApplicationOptionalField2, ..} ) <$> f securePasswordStoreApplicationSettingsApplicationOptionalField2
{-# INLINE securePasswordStoreApplicationSettingsApplicationOptionalField2L #-}

-- | 'securePasswordStoreApplicationSettingsApplicationOptionalField2Value' Lens
securePasswordStoreApplicationSettingsApplicationOptionalField2ValueL :: Lens_' SecurePasswordStoreApplicationSettingsApplication (Maybe Text)
securePasswordStoreApplicationSettingsApplicationOptionalField2ValueL f SecurePasswordStoreApplicationSettingsApplication{..} = (\securePasswordStoreApplicationSettingsApplicationOptionalField2Value -> SecurePasswordStoreApplicationSettingsApplication { securePasswordStoreApplicationSettingsApplicationOptionalField2Value, ..} ) <$> f securePasswordStoreApplicationSettingsApplicationOptionalField2Value
{-# INLINE securePasswordStoreApplicationSettingsApplicationOptionalField2ValueL #-}

-- | 'securePasswordStoreApplicationSettingsApplicationOptionalField3' Lens
securePasswordStoreApplicationSettingsApplicationOptionalField3L :: Lens_' SecurePasswordStoreApplicationSettingsApplication (Maybe Text)
securePasswordStoreApplicationSettingsApplicationOptionalField3L f SecurePasswordStoreApplicationSettingsApplication{..} = (\securePasswordStoreApplicationSettingsApplicationOptionalField3 -> SecurePasswordStoreApplicationSettingsApplication { securePasswordStoreApplicationSettingsApplicationOptionalField3, ..} ) <$> f securePasswordStoreApplicationSettingsApplicationOptionalField3
{-# INLINE securePasswordStoreApplicationSettingsApplicationOptionalField3L #-}

-- | 'securePasswordStoreApplicationSettingsApplicationOptionalField3Value' Lens
securePasswordStoreApplicationSettingsApplicationOptionalField3ValueL :: Lens_' SecurePasswordStoreApplicationSettingsApplication (Maybe Text)
securePasswordStoreApplicationSettingsApplicationOptionalField3ValueL f SecurePasswordStoreApplicationSettingsApplication{..} = (\securePasswordStoreApplicationSettingsApplicationOptionalField3Value -> SecurePasswordStoreApplicationSettingsApplication { securePasswordStoreApplicationSettingsApplicationOptionalField3Value, ..} ) <$> f securePasswordStoreApplicationSettingsApplicationOptionalField3Value
{-# INLINE securePasswordStoreApplicationSettingsApplicationOptionalField3ValueL #-}

-- | 'securePasswordStoreApplicationSettingsApplicationPasswordField' Lens
securePasswordStoreApplicationSettingsApplicationPasswordFieldL :: Lens_' SecurePasswordStoreApplicationSettingsApplication (Maybe Text)
securePasswordStoreApplicationSettingsApplicationPasswordFieldL f SecurePasswordStoreApplicationSettingsApplication{..} = (\securePasswordStoreApplicationSettingsApplicationPasswordField -> SecurePasswordStoreApplicationSettingsApplication { securePasswordStoreApplicationSettingsApplicationPasswordField, ..} ) <$> f securePasswordStoreApplicationSettingsApplicationPasswordField
{-# INLINE securePasswordStoreApplicationSettingsApplicationPasswordFieldL #-}

-- | 'securePasswordStoreApplicationSettingsApplicationUrl' Lens
securePasswordStoreApplicationSettingsApplicationUrlL :: Lens_' SecurePasswordStoreApplicationSettingsApplication (Maybe Text)
securePasswordStoreApplicationSettingsApplicationUrlL f SecurePasswordStoreApplicationSettingsApplication{..} = (\securePasswordStoreApplicationSettingsApplicationUrl -> SecurePasswordStoreApplicationSettingsApplication { securePasswordStoreApplicationSettingsApplicationUrl, ..} ) <$> f securePasswordStoreApplicationSettingsApplicationUrl
{-# INLINE securePasswordStoreApplicationSettingsApplicationUrlL #-}

-- | 'securePasswordStoreApplicationSettingsApplicationUsernameField' Lens
securePasswordStoreApplicationSettingsApplicationUsernameFieldL :: Lens_' SecurePasswordStoreApplicationSettingsApplication (Maybe Text)
securePasswordStoreApplicationSettingsApplicationUsernameFieldL f SecurePasswordStoreApplicationSettingsApplication{..} = (\securePasswordStoreApplicationSettingsApplicationUsernameField -> SecurePasswordStoreApplicationSettingsApplication { securePasswordStoreApplicationSettingsApplicationUsernameField, ..} ) <$> f securePasswordStoreApplicationSettingsApplicationUsernameField
{-# INLINE securePasswordStoreApplicationSettingsApplicationUsernameFieldL #-}



-- * SecurityQuestion

-- | 'securityQuestionAnswer' Lens
securityQuestionAnswerL :: Lens_' SecurityQuestion (Maybe Text)
securityQuestionAnswerL f SecurityQuestion{..} = (\securityQuestionAnswer -> SecurityQuestion { securityQuestionAnswer, ..} ) <$> f securityQuestionAnswer
{-# INLINE securityQuestionAnswerL #-}

-- | 'securityQuestionQuestion' Lens
securityQuestionQuestionL :: Lens_' SecurityQuestion (Maybe Text)
securityQuestionQuestionL f SecurityQuestion{..} = (\securityQuestionQuestion -> SecurityQuestion { securityQuestionQuestion, ..} ) <$> f securityQuestionQuestion
{-# INLINE securityQuestionQuestionL #-}

-- | 'securityQuestionQuestionText' Lens
securityQuestionQuestionTextL :: Lens_' SecurityQuestion (Maybe Text)
securityQuestionQuestionTextL f SecurityQuestion{..} = (\securityQuestionQuestionText -> SecurityQuestion { securityQuestionQuestionText, ..} ) <$> f securityQuestionQuestionText
{-# INLINE securityQuestionQuestionTextL #-}



-- * SecurityQuestionFactor

-- | 'securityQuestionFactorProfile' Lens
securityQuestionFactorProfileL :: Lens_' SecurityQuestionFactor (Maybe SecurityQuestionFactorProfile)
securityQuestionFactorProfileL f SecurityQuestionFactor{..} = (\securityQuestionFactorProfile -> SecurityQuestionFactor { securityQuestionFactorProfile, ..} ) <$> f securityQuestionFactorProfile
{-# INLINE securityQuestionFactorProfileL #-}



-- * SecurityQuestionFactorProfile

-- | 'securityQuestionFactorProfileAnswer' Lens
securityQuestionFactorProfileAnswerL :: Lens_' SecurityQuestionFactorProfile (Maybe Text)
securityQuestionFactorProfileAnswerL f SecurityQuestionFactorProfile{..} = (\securityQuestionFactorProfileAnswer -> SecurityQuestionFactorProfile { securityQuestionFactorProfileAnswer, ..} ) <$> f securityQuestionFactorProfileAnswer
{-# INLINE securityQuestionFactorProfileAnswerL #-}

-- | 'securityQuestionFactorProfileQuestion' Lens
securityQuestionFactorProfileQuestionL :: Lens_' SecurityQuestionFactorProfile (Maybe Text)
securityQuestionFactorProfileQuestionL f SecurityQuestionFactorProfile{..} = (\securityQuestionFactorProfileQuestion -> SecurityQuestionFactorProfile { securityQuestionFactorProfileQuestion, ..} ) <$> f securityQuestionFactorProfileQuestion
{-# INLINE securityQuestionFactorProfileQuestionL #-}

-- | 'securityQuestionFactorProfileQuestionText' Lens
securityQuestionFactorProfileQuestionTextL :: Lens_' SecurityQuestionFactorProfile (Maybe Text)
securityQuestionFactorProfileQuestionTextL f SecurityQuestionFactorProfile{..} = (\securityQuestionFactorProfileQuestionText -> SecurityQuestionFactorProfile { securityQuestionFactorProfileQuestionText, ..} ) <$> f securityQuestionFactorProfileQuestionText
{-# INLINE securityQuestionFactorProfileQuestionTextL #-}



-- * Session

-- | 'sessionLinks' Lens
sessionLinksL :: Lens_' Session (Maybe (Map.Map String A.Value))
sessionLinksL f Session{..} = (\sessionLinks -> Session { sessionLinks, ..} ) <$> f sessionLinks
{-# INLINE sessionLinksL #-}

-- | 'sessionAmr' Lens
sessionAmrL :: Lens_' Session (Maybe [SessionAuthenticationMethod])
sessionAmrL f Session{..} = (\sessionAmr -> Session { sessionAmr, ..} ) <$> f sessionAmr
{-# INLINE sessionAmrL #-}

-- | 'sessionCreatedAt' Lens
sessionCreatedAtL :: Lens_' Session (Maybe DateTime)
sessionCreatedAtL f Session{..} = (\sessionCreatedAt -> Session { sessionCreatedAt, ..} ) <$> f sessionCreatedAt
{-# INLINE sessionCreatedAtL #-}

-- | 'sessionExpiresAt' Lens
sessionExpiresAtL :: Lens_' Session (Maybe DateTime)
sessionExpiresAtL f Session{..} = (\sessionExpiresAt -> Session { sessionExpiresAt, ..} ) <$> f sessionExpiresAt
{-# INLINE sessionExpiresAtL #-}

-- | 'sessionId' Lens
sessionIdL :: Lens_' Session (Maybe Text)
sessionIdL f Session{..} = (\sessionId -> Session { sessionId, ..} ) <$> f sessionId
{-# INLINE sessionIdL #-}

-- | 'sessionIdp' Lens
sessionIdpL :: Lens_' Session (Maybe SessionIdentityProvider)
sessionIdpL f Session{..} = (\sessionIdp -> Session { sessionIdp, ..} ) <$> f sessionIdp
{-# INLINE sessionIdpL #-}

-- | 'sessionLastFactorVerification' Lens
sessionLastFactorVerificationL :: Lens_' Session (Maybe DateTime)
sessionLastFactorVerificationL f Session{..} = (\sessionLastFactorVerification -> Session { sessionLastFactorVerification, ..} ) <$> f sessionLastFactorVerification
{-# INLINE sessionLastFactorVerificationL #-}

-- | 'sessionLastPasswordVerification' Lens
sessionLastPasswordVerificationL :: Lens_' Session (Maybe DateTime)
sessionLastPasswordVerificationL f Session{..} = (\sessionLastPasswordVerification -> Session { sessionLastPasswordVerification, ..} ) <$> f sessionLastPasswordVerification
{-# INLINE sessionLastPasswordVerificationL #-}

-- | 'sessionLogin' Lens
sessionLoginL :: Lens_' Session (Maybe Text)
sessionLoginL f Session{..} = (\sessionLogin -> Session { sessionLogin, ..} ) <$> f sessionLogin
{-# INLINE sessionLoginL #-}

-- | 'sessionStatus' Lens
sessionStatusL :: Lens_' Session (Maybe SessionStatus)
sessionStatusL f Session{..} = (\sessionStatus -> Session { sessionStatus, ..} ) <$> f sessionStatus
{-# INLINE sessionStatusL #-}

-- | 'sessionUserId' Lens
sessionUserIdL :: Lens_' Session (Maybe Text)
sessionUserIdL f Session{..} = (\sessionUserId -> Session { sessionUserId, ..} ) <$> f sessionUserId
{-# INLINE sessionUserIdL #-}



-- * SessionAuthenticationMethod



-- * SessionIdentityProvider

-- | 'sessionIdentityProviderId' Lens
sessionIdentityProviderIdL :: Lens_' SessionIdentityProvider (Maybe Text)
sessionIdentityProviderIdL f SessionIdentityProvider{..} = (\sessionIdentityProviderId -> SessionIdentityProvider { sessionIdentityProviderId, ..} ) <$> f sessionIdentityProviderId
{-# INLINE sessionIdentityProviderIdL #-}

-- | 'sessionIdentityProviderType' Lens
sessionIdentityProviderTypeL :: Lens_' SessionIdentityProvider (Maybe SessionIdentityProviderType)
sessionIdentityProviderTypeL f SessionIdentityProvider{..} = (\sessionIdentityProviderType -> SessionIdentityProvider { sessionIdentityProviderType, ..} ) <$> f sessionIdentityProviderType
{-# INLINE sessionIdentityProviderTypeL #-}



-- * SessionIdentityProviderType



-- * SessionStatus



-- * SmsFactor

-- | 'smsFactorProfile' Lens
smsFactorProfileL :: Lens_' SmsFactor (Maybe SmsFactorProfile)
smsFactorProfileL f SmsFactor{..} = (\smsFactorProfile -> SmsFactor { smsFactorProfile, ..} ) <$> f smsFactorProfile
{-# INLINE smsFactorProfileL #-}



-- * SmsFactorProfile

-- | 'smsFactorProfilePhoneNumber' Lens
smsFactorProfilePhoneNumberL :: Lens_' SmsFactorProfile (Maybe Text)
smsFactorProfilePhoneNumberL f SmsFactorProfile{..} = (\smsFactorProfilePhoneNumber -> SmsFactorProfile { smsFactorProfilePhoneNumber, ..} ) <$> f smsFactorProfilePhoneNumber
{-# INLINE smsFactorProfilePhoneNumberL #-}



-- * SwaApplication

-- | 'swaApplicationName' Lens
swaApplicationNameL :: Lens_' SwaApplication (Maybe A.Value)
swaApplicationNameL f SwaApplication{..} = (\swaApplicationName -> SwaApplication { swaApplicationName, ..} ) <$> f swaApplicationName
{-# INLINE swaApplicationNameL #-}

-- | 'swaApplicationSettings' Lens
swaApplicationSettingsL :: Lens_' SwaApplication (Maybe SwaApplicationSettings)
swaApplicationSettingsL f SwaApplication{..} = (\swaApplicationSettings -> SwaApplication { swaApplicationSettings, ..} ) <$> f swaApplicationSettings
{-# INLINE swaApplicationSettingsL #-}



-- * SwaApplicationSettings

-- | 'swaApplicationSettingsApp' Lens
swaApplicationSettingsAppL :: Lens_' SwaApplicationSettings (Maybe SwaApplicationSettingsApplication)
swaApplicationSettingsAppL f SwaApplicationSettings{..} = (\swaApplicationSettingsApp -> SwaApplicationSettings { swaApplicationSettingsApp, ..} ) <$> f swaApplicationSettingsApp
{-# INLINE swaApplicationSettingsAppL #-}



-- * SwaApplicationSettingsApplication

-- | 'swaApplicationSettingsApplicationButtonField' Lens
swaApplicationSettingsApplicationButtonFieldL :: Lens_' SwaApplicationSettingsApplication (Maybe Text)
swaApplicationSettingsApplicationButtonFieldL f SwaApplicationSettingsApplication{..} = (\swaApplicationSettingsApplicationButtonField -> SwaApplicationSettingsApplication { swaApplicationSettingsApplicationButtonField, ..} ) <$> f swaApplicationSettingsApplicationButtonField
{-# INLINE swaApplicationSettingsApplicationButtonFieldL #-}

-- | 'swaApplicationSettingsApplicationLoginUrlRegex' Lens
swaApplicationSettingsApplicationLoginUrlRegexL :: Lens_' SwaApplicationSettingsApplication (Maybe Text)
swaApplicationSettingsApplicationLoginUrlRegexL f SwaApplicationSettingsApplication{..} = (\swaApplicationSettingsApplicationLoginUrlRegex -> SwaApplicationSettingsApplication { swaApplicationSettingsApplicationLoginUrlRegex, ..} ) <$> f swaApplicationSettingsApplicationLoginUrlRegex
{-# INLINE swaApplicationSettingsApplicationLoginUrlRegexL #-}

-- | 'swaApplicationSettingsApplicationPasswordField' Lens
swaApplicationSettingsApplicationPasswordFieldL :: Lens_' SwaApplicationSettingsApplication (Maybe Text)
swaApplicationSettingsApplicationPasswordFieldL f SwaApplicationSettingsApplication{..} = (\swaApplicationSettingsApplicationPasswordField -> SwaApplicationSettingsApplication { swaApplicationSettingsApplicationPasswordField, ..} ) <$> f swaApplicationSettingsApplicationPasswordField
{-# INLINE swaApplicationSettingsApplicationPasswordFieldL #-}

-- | 'swaApplicationSettingsApplicationUrl' Lens
swaApplicationSettingsApplicationUrlL :: Lens_' SwaApplicationSettingsApplication (Maybe Text)
swaApplicationSettingsApplicationUrlL f SwaApplicationSettingsApplication{..} = (\swaApplicationSettingsApplicationUrl -> SwaApplicationSettingsApplication { swaApplicationSettingsApplicationUrl, ..} ) <$> f swaApplicationSettingsApplicationUrl
{-# INLINE swaApplicationSettingsApplicationUrlL #-}

-- | 'swaApplicationSettingsApplicationUsernameField' Lens
swaApplicationSettingsApplicationUsernameFieldL :: Lens_' SwaApplicationSettingsApplication (Maybe Text)
swaApplicationSettingsApplicationUsernameFieldL f SwaApplicationSettingsApplication{..} = (\swaApplicationSettingsApplicationUsernameField -> SwaApplicationSettingsApplication { swaApplicationSettingsApplicationUsernameField, ..} ) <$> f swaApplicationSettingsApplicationUsernameField
{-# INLINE swaApplicationSettingsApplicationUsernameFieldL #-}



-- * SwaThreeFieldApplication

-- | 'swaThreeFieldApplicationName' Lens
swaThreeFieldApplicationNameL :: Lens_' SwaThreeFieldApplication (Maybe A.Value)
swaThreeFieldApplicationNameL f SwaThreeFieldApplication{..} = (\swaThreeFieldApplicationName -> SwaThreeFieldApplication { swaThreeFieldApplicationName, ..} ) <$> f swaThreeFieldApplicationName
{-# INLINE swaThreeFieldApplicationNameL #-}

-- | 'swaThreeFieldApplicationSettings' Lens
swaThreeFieldApplicationSettingsL :: Lens_' SwaThreeFieldApplication (Maybe SwaThreeFieldApplicationSettings)
swaThreeFieldApplicationSettingsL f SwaThreeFieldApplication{..} = (\swaThreeFieldApplicationSettings -> SwaThreeFieldApplication { swaThreeFieldApplicationSettings, ..} ) <$> f swaThreeFieldApplicationSettings
{-# INLINE swaThreeFieldApplicationSettingsL #-}



-- * SwaThreeFieldApplicationSettings

-- | 'swaThreeFieldApplicationSettingsApp' Lens
swaThreeFieldApplicationSettingsAppL :: Lens_' SwaThreeFieldApplicationSettings (Maybe SwaThreeFieldApplicationSettingsApplication)
swaThreeFieldApplicationSettingsAppL f SwaThreeFieldApplicationSettings{..} = (\swaThreeFieldApplicationSettingsApp -> SwaThreeFieldApplicationSettings { swaThreeFieldApplicationSettingsApp, ..} ) <$> f swaThreeFieldApplicationSettingsApp
{-# INLINE swaThreeFieldApplicationSettingsAppL #-}



-- * SwaThreeFieldApplicationSettingsApplication

-- | 'swaThreeFieldApplicationSettingsApplicationButtonSelector' Lens
swaThreeFieldApplicationSettingsApplicationButtonSelectorL :: Lens_' SwaThreeFieldApplicationSettingsApplication (Maybe Text)
swaThreeFieldApplicationSettingsApplicationButtonSelectorL f SwaThreeFieldApplicationSettingsApplication{..} = (\swaThreeFieldApplicationSettingsApplicationButtonSelector -> SwaThreeFieldApplicationSettingsApplication { swaThreeFieldApplicationSettingsApplicationButtonSelector, ..} ) <$> f swaThreeFieldApplicationSettingsApplicationButtonSelector
{-# INLINE swaThreeFieldApplicationSettingsApplicationButtonSelectorL #-}

-- | 'swaThreeFieldApplicationSettingsApplicationExtraFieldSelector' Lens
swaThreeFieldApplicationSettingsApplicationExtraFieldSelectorL :: Lens_' SwaThreeFieldApplicationSettingsApplication (Maybe Text)
swaThreeFieldApplicationSettingsApplicationExtraFieldSelectorL f SwaThreeFieldApplicationSettingsApplication{..} = (\swaThreeFieldApplicationSettingsApplicationExtraFieldSelector -> SwaThreeFieldApplicationSettingsApplication { swaThreeFieldApplicationSettingsApplicationExtraFieldSelector, ..} ) <$> f swaThreeFieldApplicationSettingsApplicationExtraFieldSelector
{-# INLINE swaThreeFieldApplicationSettingsApplicationExtraFieldSelectorL #-}

-- | 'swaThreeFieldApplicationSettingsApplicationExtraFieldValue' Lens
swaThreeFieldApplicationSettingsApplicationExtraFieldValueL :: Lens_' SwaThreeFieldApplicationSettingsApplication (Maybe Text)
swaThreeFieldApplicationSettingsApplicationExtraFieldValueL f SwaThreeFieldApplicationSettingsApplication{..} = (\swaThreeFieldApplicationSettingsApplicationExtraFieldValue -> SwaThreeFieldApplicationSettingsApplication { swaThreeFieldApplicationSettingsApplicationExtraFieldValue, ..} ) <$> f swaThreeFieldApplicationSettingsApplicationExtraFieldValue
{-# INLINE swaThreeFieldApplicationSettingsApplicationExtraFieldValueL #-}

-- | 'swaThreeFieldApplicationSettingsApplicationLoginUrlRegex' Lens
swaThreeFieldApplicationSettingsApplicationLoginUrlRegexL :: Lens_' SwaThreeFieldApplicationSettingsApplication (Maybe Text)
swaThreeFieldApplicationSettingsApplicationLoginUrlRegexL f SwaThreeFieldApplicationSettingsApplication{..} = (\swaThreeFieldApplicationSettingsApplicationLoginUrlRegex -> SwaThreeFieldApplicationSettingsApplication { swaThreeFieldApplicationSettingsApplicationLoginUrlRegex, ..} ) <$> f swaThreeFieldApplicationSettingsApplicationLoginUrlRegex
{-# INLINE swaThreeFieldApplicationSettingsApplicationLoginUrlRegexL #-}

-- | 'swaThreeFieldApplicationSettingsApplicationPasswordSelector' Lens
swaThreeFieldApplicationSettingsApplicationPasswordSelectorL :: Lens_' SwaThreeFieldApplicationSettingsApplication (Maybe Text)
swaThreeFieldApplicationSettingsApplicationPasswordSelectorL f SwaThreeFieldApplicationSettingsApplication{..} = (\swaThreeFieldApplicationSettingsApplicationPasswordSelector -> SwaThreeFieldApplicationSettingsApplication { swaThreeFieldApplicationSettingsApplicationPasswordSelector, ..} ) <$> f swaThreeFieldApplicationSettingsApplicationPasswordSelector
{-# INLINE swaThreeFieldApplicationSettingsApplicationPasswordSelectorL #-}

-- | 'swaThreeFieldApplicationSettingsApplicationTargetUrl' Lens
swaThreeFieldApplicationSettingsApplicationTargetUrlL :: Lens_' SwaThreeFieldApplicationSettingsApplication (Maybe Text)
swaThreeFieldApplicationSettingsApplicationTargetUrlL f SwaThreeFieldApplicationSettingsApplication{..} = (\swaThreeFieldApplicationSettingsApplicationTargetUrl -> SwaThreeFieldApplicationSettingsApplication { swaThreeFieldApplicationSettingsApplicationTargetUrl, ..} ) <$> f swaThreeFieldApplicationSettingsApplicationTargetUrl
{-# INLINE swaThreeFieldApplicationSettingsApplicationTargetUrlL #-}

-- | 'swaThreeFieldApplicationSettingsApplicationUserNameSelector' Lens
swaThreeFieldApplicationSettingsApplicationUserNameSelectorL :: Lens_' SwaThreeFieldApplicationSettingsApplication (Maybe Text)
swaThreeFieldApplicationSettingsApplicationUserNameSelectorL f SwaThreeFieldApplicationSettingsApplication{..} = (\swaThreeFieldApplicationSettingsApplicationUserNameSelector -> SwaThreeFieldApplicationSettingsApplication { swaThreeFieldApplicationSettingsApplicationUserNameSelector, ..} ) <$> f swaThreeFieldApplicationSettingsApplicationUserNameSelector
{-# INLINE swaThreeFieldApplicationSettingsApplicationUserNameSelectorL #-}



-- * TempPassword

-- | 'tempPasswordTempPassword' Lens
tempPasswordTempPasswordL :: Lens_' TempPassword (Maybe Text)
tempPasswordTempPasswordL f TempPassword{..} = (\tempPasswordTempPassword -> TempPassword { tempPasswordTempPassword, ..} ) <$> f tempPasswordTempPassword
{-# INLINE tempPasswordTempPasswordL #-}



-- * TokenFactor

-- | 'tokenFactorProfile' Lens
tokenFactorProfileL :: Lens_' TokenFactor (Maybe TokenFactorProfile)
tokenFactorProfileL f TokenFactor{..} = (\tokenFactorProfile -> TokenFactor { tokenFactorProfile, ..} ) <$> f tokenFactorProfile
{-# INLINE tokenFactorProfileL #-}



-- * TokenFactorProfile

-- | 'tokenFactorProfileCredentialId' Lens
tokenFactorProfileCredentialIdL :: Lens_' TokenFactorProfile (Maybe Text)
tokenFactorProfileCredentialIdL f TokenFactorProfile{..} = (\tokenFactorProfileCredentialId -> TokenFactorProfile { tokenFactorProfileCredentialId, ..} ) <$> f tokenFactorProfileCredentialId
{-# INLINE tokenFactorProfileCredentialIdL #-}



-- * TotpFactor

-- | 'totpFactorProfile' Lens
totpFactorProfileL :: Lens_' TotpFactor (Maybe TotpFactorProfile)
totpFactorProfileL f TotpFactor{..} = (\totpFactorProfile -> TotpFactor { totpFactorProfile, ..} ) <$> f totpFactorProfile
{-# INLINE totpFactorProfileL #-}



-- * TotpFactorProfile

-- | 'totpFactorProfileCredentialId' Lens
totpFactorProfileCredentialIdL :: Lens_' TotpFactorProfile (Maybe Text)
totpFactorProfileCredentialIdL f TotpFactorProfile{..} = (\totpFactorProfileCredentialId -> TotpFactorProfile { totpFactorProfileCredentialId, ..} ) <$> f totpFactorProfileCredentialId
{-# INLINE totpFactorProfileCredentialIdL #-}



-- * U2fFactor

-- | 'u2fFactorProfile' Lens
u2fFactorProfileL :: Lens_' U2fFactor (Maybe A.Value)
u2fFactorProfileL f U2fFactor{..} = (\u2fFactorProfile -> U2fFactor { u2fFactorProfile, ..} ) <$> f u2fFactorProfile
{-# INLINE u2fFactorProfileL #-}



-- * User

-- | 'userEmbedded' Lens
userEmbeddedL :: Lens_' User (Maybe (Map.Map String A.Value))
userEmbeddedL f User{..} = (\userEmbedded -> User { userEmbedded, ..} ) <$> f userEmbedded
{-# INLINE userEmbeddedL #-}

-- | 'userLinks' Lens
userLinksL :: Lens_' User (Maybe (Map.Map String A.Value))
userLinksL f User{..} = (\userLinks -> User { userLinks, ..} ) <$> f userLinks
{-# INLINE userLinksL #-}

-- | 'userActivated' Lens
userActivatedL :: Lens_' User (Maybe DateTime)
userActivatedL f User{..} = (\userActivated -> User { userActivated, ..} ) <$> f userActivated
{-# INLINE userActivatedL #-}

-- | 'userCreated' Lens
userCreatedL :: Lens_' User (Maybe DateTime)
userCreatedL f User{..} = (\userCreated -> User { userCreated, ..} ) <$> f userCreated
{-# INLINE userCreatedL #-}

-- | 'userCredentials' Lens
userCredentialsL :: Lens_' User (Maybe UserCredentials)
userCredentialsL f User{..} = (\userCredentials -> User { userCredentials, ..} ) <$> f userCredentials
{-# INLINE userCredentialsL #-}

-- | 'userId' Lens
userIdL :: Lens_' User (Maybe Text)
userIdL f User{..} = (\userId -> User { userId, ..} ) <$> f userId
{-# INLINE userIdL #-}

-- | 'userLastLogin' Lens
userLastLoginL :: Lens_' User (Maybe DateTime)
userLastLoginL f User{..} = (\userLastLogin -> User { userLastLogin, ..} ) <$> f userLastLogin
{-# INLINE userLastLoginL #-}

-- | 'userLastUpdated' Lens
userLastUpdatedL :: Lens_' User (Maybe DateTime)
userLastUpdatedL f User{..} = (\userLastUpdated -> User { userLastUpdated, ..} ) <$> f userLastUpdated
{-# INLINE userLastUpdatedL #-}

-- | 'userPasswordChanged' Lens
userPasswordChangedL :: Lens_' User (Maybe DateTime)
userPasswordChangedL f User{..} = (\userPasswordChanged -> User { userPasswordChanged, ..} ) <$> f userPasswordChanged
{-# INLINE userPasswordChangedL #-}

-- | 'userProfile' Lens
userProfileL :: Lens_' User (Maybe UserProfile)
userProfileL f User{..} = (\userProfile -> User { userProfile, ..} ) <$> f userProfile
{-# INLINE userProfileL #-}

-- | 'userStatus' Lens
userStatusL :: Lens_' User (Maybe UserStatus)
userStatusL f User{..} = (\userStatus -> User { userStatus, ..} ) <$> f userStatus
{-# INLINE userStatusL #-}

-- | 'userStatusChanged' Lens
userStatusChangedL :: Lens_' User (Maybe DateTime)
userStatusChangedL f User{..} = (\userStatusChanged -> User { userStatusChanged, ..} ) <$> f userStatusChanged
{-# INLINE userStatusChangedL #-}

-- | 'userTransitioningToStatus' Lens
userTransitioningToStatusL :: Lens_' User (Maybe UserStatus)
userTransitioningToStatusL f User{..} = (\userTransitioningToStatus -> User { userTransitioningToStatus, ..} ) <$> f userTransitioningToStatus
{-# INLINE userTransitioningToStatusL #-}



-- * UserActivationToken

-- | 'userActivationTokenActivationToken' Lens
userActivationTokenActivationTokenL :: Lens_' UserActivationToken (Maybe Text)
userActivationTokenActivationTokenL f UserActivationToken{..} = (\userActivationTokenActivationToken -> UserActivationToken { userActivationTokenActivationToken, ..} ) <$> f userActivationTokenActivationToken
{-# INLINE userActivationTokenActivationTokenL #-}

-- | 'userActivationTokenActivationUrl' Lens
userActivationTokenActivationUrlL :: Lens_' UserActivationToken (Maybe Text)
userActivationTokenActivationUrlL f UserActivationToken{..} = (\userActivationTokenActivationUrl -> UserActivationToken { userActivationTokenActivationUrl, ..} ) <$> f userActivationTokenActivationUrl
{-# INLINE userActivationTokenActivationUrlL #-}



-- * UserCredentials

-- | 'userCredentialsEmails' Lens
userCredentialsEmailsL :: Lens_' UserCredentials (Maybe [EmailAddress])
userCredentialsEmailsL f UserCredentials{..} = (\userCredentialsEmails -> UserCredentials { userCredentialsEmails, ..} ) <$> f userCredentialsEmails
{-# INLINE userCredentialsEmailsL #-}

-- | 'userCredentialsPassword' Lens
userCredentialsPasswordL :: Lens_' UserCredentials (Maybe PasswordCredential)
userCredentialsPasswordL f UserCredentials{..} = (\userCredentialsPassword -> UserCredentials { userCredentialsPassword, ..} ) <$> f userCredentialsPassword
{-# INLINE userCredentialsPasswordL #-}

-- | 'userCredentialsProvider' Lens
userCredentialsProviderL :: Lens_' UserCredentials (Maybe AuthenticationProvider)
userCredentialsProviderL f UserCredentials{..} = (\userCredentialsProvider -> UserCredentials { userCredentialsProvider, ..} ) <$> f userCredentialsProvider
{-# INLINE userCredentialsProviderL #-}

-- | 'userCredentialsRecoveryQuestion' Lens
userCredentialsRecoveryQuestionL :: Lens_' UserCredentials (Maybe RecoveryQuestionCredential)
userCredentialsRecoveryQuestionL f UserCredentials{..} = (\userCredentialsRecoveryQuestion -> UserCredentials { userCredentialsRecoveryQuestion, ..} ) <$> f userCredentialsRecoveryQuestion
{-# INLINE userCredentialsRecoveryQuestionL #-}



-- * UserNextLogin



-- * UserProfile

-- | 'userProfileEmail' Lens
userProfileEmailL :: Lens_' UserProfile (Maybe Text)
userProfileEmailL f UserProfile{..} = (\userProfileEmail -> UserProfile { userProfileEmail, ..} ) <$> f userProfileEmail
{-# INLINE userProfileEmailL #-}

-- | 'userProfileFirstName' Lens
userProfileFirstNameL :: Lens_' UserProfile (Maybe Text)
userProfileFirstNameL f UserProfile{..} = (\userProfileFirstName -> UserProfile { userProfileFirstName, ..} ) <$> f userProfileFirstName
{-# INLINE userProfileFirstNameL #-}

-- | 'userProfileLastName' Lens
userProfileLastNameL :: Lens_' UserProfile (Maybe Text)
userProfileLastNameL f UserProfile{..} = (\userProfileLastName -> UserProfile { userProfileLastName, ..} ) <$> f userProfileLastName
{-# INLINE userProfileLastNameL #-}

-- | 'userProfileLogin' Lens
userProfileLoginL :: Lens_' UserProfile (Maybe Text)
userProfileLoginL f UserProfile{..} = (\userProfileLogin -> UserProfile { userProfileLogin, ..} ) <$> f userProfileLogin
{-# INLINE userProfileLoginL #-}

-- | 'userProfileMobilePhone' Lens
userProfileMobilePhoneL :: Lens_' UserProfile (Maybe Text)
userProfileMobilePhoneL f UserProfile{..} = (\userProfileMobilePhone -> UserProfile { userProfileMobilePhone, ..} ) <$> f userProfileMobilePhone
{-# INLINE userProfileMobilePhoneL #-}

-- | 'userProfileSecondEmail' Lens
userProfileSecondEmailL :: Lens_' UserProfile (Maybe Text)
userProfileSecondEmailL f UserProfile{..} = (\userProfileSecondEmail -> UserProfile { userProfileSecondEmail, ..} ) <$> f userProfileSecondEmail
{-# INLINE userProfileSecondEmailL #-}



-- * UserStatus



-- * VerifyFactorRequest

-- | 'verifyFactorRequestActivationToken' Lens
verifyFactorRequestActivationTokenL :: Lens_' VerifyFactorRequest (Maybe Text)
verifyFactorRequestActivationTokenL f VerifyFactorRequest{..} = (\verifyFactorRequestActivationToken -> VerifyFactorRequest { verifyFactorRequestActivationToken, ..} ) <$> f verifyFactorRequestActivationToken
{-# INLINE verifyFactorRequestActivationTokenL #-}

-- | 'verifyFactorRequestAnswer' Lens
verifyFactorRequestAnswerL :: Lens_' VerifyFactorRequest (Maybe Text)
verifyFactorRequestAnswerL f VerifyFactorRequest{..} = (\verifyFactorRequestAnswer -> VerifyFactorRequest { verifyFactorRequestAnswer, ..} ) <$> f verifyFactorRequestAnswer
{-# INLINE verifyFactorRequestAnswerL #-}

-- | 'verifyFactorRequestNextPassCode' Lens
verifyFactorRequestNextPassCodeL :: Lens_' VerifyFactorRequest (Maybe Text)
verifyFactorRequestNextPassCodeL f VerifyFactorRequest{..} = (\verifyFactorRequestNextPassCode -> VerifyFactorRequest { verifyFactorRequestNextPassCode, ..} ) <$> f verifyFactorRequestNextPassCode
{-# INLINE verifyFactorRequestNextPassCodeL #-}

-- | 'verifyFactorRequestPassCode' Lens
verifyFactorRequestPassCodeL :: Lens_' VerifyFactorRequest (Maybe Text)
verifyFactorRequestPassCodeL f VerifyFactorRequest{..} = (\verifyFactorRequestPassCode -> VerifyFactorRequest { verifyFactorRequestPassCode, ..} ) <$> f verifyFactorRequestPassCode
{-# INLINE verifyFactorRequestPassCodeL #-}

-- | 'verifyFactorRequestTokenLifetimeSeconds' Lens
verifyFactorRequestTokenLifetimeSecondsL :: Lens_' VerifyFactorRequest (Maybe Int)
verifyFactorRequestTokenLifetimeSecondsL f VerifyFactorRequest{..} = (\verifyFactorRequestTokenLifetimeSeconds -> VerifyFactorRequest { verifyFactorRequestTokenLifetimeSeconds, ..} ) <$> f verifyFactorRequestTokenLifetimeSeconds
{-# INLINE verifyFactorRequestTokenLifetimeSecondsL #-}



-- * VerifyFactorResponse

-- | 'verifyFactorResponseEmbedded' Lens
verifyFactorResponseEmbeddedL :: Lens_' VerifyFactorResponse (Maybe (Map.Map String A.Value))
verifyFactorResponseEmbeddedL f VerifyFactorResponse{..} = (\verifyFactorResponseEmbedded -> VerifyFactorResponse { verifyFactorResponseEmbedded, ..} ) <$> f verifyFactorResponseEmbedded
{-# INLINE verifyFactorResponseEmbeddedL #-}

-- | 'verifyFactorResponseLinks' Lens
verifyFactorResponseLinksL :: Lens_' VerifyFactorResponse (Maybe (Map.Map String A.Value))
verifyFactorResponseLinksL f VerifyFactorResponse{..} = (\verifyFactorResponseLinks -> VerifyFactorResponse { verifyFactorResponseLinks, ..} ) <$> f verifyFactorResponseLinks
{-# INLINE verifyFactorResponseLinksL #-}

-- | 'verifyFactorResponseExpiresAt' Lens
verifyFactorResponseExpiresAtL :: Lens_' VerifyFactorResponse (Maybe DateTime)
verifyFactorResponseExpiresAtL f VerifyFactorResponse{..} = (\verifyFactorResponseExpiresAt -> VerifyFactorResponse { verifyFactorResponseExpiresAt, ..} ) <$> f verifyFactorResponseExpiresAt
{-# INLINE verifyFactorResponseExpiresAtL #-}

-- | 'verifyFactorResponseFactorResult' Lens
verifyFactorResponseFactorResultL :: Lens_' VerifyFactorResponse (Maybe FactorResultType)
verifyFactorResponseFactorResultL f VerifyFactorResponse{..} = (\verifyFactorResponseFactorResult -> VerifyFactorResponse { verifyFactorResponseFactorResult, ..} ) <$> f verifyFactorResponseFactorResult
{-# INLINE verifyFactorResponseFactorResultL #-}

-- | 'verifyFactorResponseFactorResultMessage' Lens
verifyFactorResponseFactorResultMessageL :: Lens_' VerifyFactorResponse (Maybe Text)
verifyFactorResponseFactorResultMessageL f VerifyFactorResponse{..} = (\verifyFactorResponseFactorResultMessage -> VerifyFactorResponse { verifyFactorResponseFactorResultMessage, ..} ) <$> f verifyFactorResponseFactorResultMessage
{-# INLINE verifyFactorResponseFactorResultMessageL #-}



-- * WebFactor

-- | 'webFactorProfile' Lens
webFactorProfileL :: Lens_' WebFactor (Maybe WebFactorProfile)
webFactorProfileL f WebFactor{..} = (\webFactorProfile -> WebFactor { webFactorProfile, ..} ) <$> f webFactorProfile
{-# INLINE webFactorProfileL #-}



-- * WebFactorProfile

-- | 'webFactorProfileCredentialId' Lens
webFactorProfileCredentialIdL :: Lens_' WebFactorProfile (Maybe Text)
webFactorProfileCredentialIdL f WebFactorProfile{..} = (\webFactorProfileCredentialId -> WebFactorProfile { webFactorProfileCredentialId, ..} ) <$> f webFactorProfileCredentialId
{-# INLINE webFactorProfileCredentialIdL #-}



-- * WsFederationApplication

-- | 'wsFederationApplicationName' Lens
wsFederationApplicationNameL :: Lens_' WsFederationApplication (Maybe A.Value)
wsFederationApplicationNameL f WsFederationApplication{..} = (\wsFederationApplicationName -> WsFederationApplication { wsFederationApplicationName, ..} ) <$> f wsFederationApplicationName
{-# INLINE wsFederationApplicationNameL #-}

-- | 'wsFederationApplicationSettings' Lens
wsFederationApplicationSettingsL :: Lens_' WsFederationApplication (Maybe WsFederationApplicationSettings)
wsFederationApplicationSettingsL f WsFederationApplication{..} = (\wsFederationApplicationSettings -> WsFederationApplication { wsFederationApplicationSettings, ..} ) <$> f wsFederationApplicationSettings
{-# INLINE wsFederationApplicationSettingsL #-}



-- * WsFederationApplicationSettings

-- | 'wsFederationApplicationSettingsApp' Lens
wsFederationApplicationSettingsAppL :: Lens_' WsFederationApplicationSettings (Maybe WsFederationApplicationSettingsApplication)
wsFederationApplicationSettingsAppL f WsFederationApplicationSettings{..} = (\wsFederationApplicationSettingsApp -> WsFederationApplicationSettings { wsFederationApplicationSettingsApp, ..} ) <$> f wsFederationApplicationSettingsApp
{-# INLINE wsFederationApplicationSettingsAppL #-}



-- * WsFederationApplicationSettingsApplication

-- | 'wsFederationApplicationSettingsApplicationAttributeStatements' Lens
wsFederationApplicationSettingsApplicationAttributeStatementsL :: Lens_' WsFederationApplicationSettingsApplication (Maybe Text)
wsFederationApplicationSettingsApplicationAttributeStatementsL f WsFederationApplicationSettingsApplication{..} = (\wsFederationApplicationSettingsApplicationAttributeStatements -> WsFederationApplicationSettingsApplication { wsFederationApplicationSettingsApplicationAttributeStatements, ..} ) <$> f wsFederationApplicationSettingsApplicationAttributeStatements
{-# INLINE wsFederationApplicationSettingsApplicationAttributeStatementsL #-}

-- | 'wsFederationApplicationSettingsApplicationAudienceRestriction' Lens
wsFederationApplicationSettingsApplicationAudienceRestrictionL :: Lens_' WsFederationApplicationSettingsApplication (Maybe Text)
wsFederationApplicationSettingsApplicationAudienceRestrictionL f WsFederationApplicationSettingsApplication{..} = (\wsFederationApplicationSettingsApplicationAudienceRestriction -> WsFederationApplicationSettingsApplication { wsFederationApplicationSettingsApplicationAudienceRestriction, ..} ) <$> f wsFederationApplicationSettingsApplicationAudienceRestriction
{-# INLINE wsFederationApplicationSettingsApplicationAudienceRestrictionL #-}

-- | 'wsFederationApplicationSettingsApplicationAuthnContextClassRef' Lens
wsFederationApplicationSettingsApplicationAuthnContextClassRefL :: Lens_' WsFederationApplicationSettingsApplication (Maybe Text)
wsFederationApplicationSettingsApplicationAuthnContextClassRefL f WsFederationApplicationSettingsApplication{..} = (\wsFederationApplicationSettingsApplicationAuthnContextClassRef -> WsFederationApplicationSettingsApplication { wsFederationApplicationSettingsApplicationAuthnContextClassRef, ..} ) <$> f wsFederationApplicationSettingsApplicationAuthnContextClassRef
{-# INLINE wsFederationApplicationSettingsApplicationAuthnContextClassRefL #-}

-- | 'wsFederationApplicationSettingsApplicationGroupFilter' Lens
wsFederationApplicationSettingsApplicationGroupFilterL :: Lens_' WsFederationApplicationSettingsApplication (Maybe Text)
wsFederationApplicationSettingsApplicationGroupFilterL f WsFederationApplicationSettingsApplication{..} = (\wsFederationApplicationSettingsApplicationGroupFilter -> WsFederationApplicationSettingsApplication { wsFederationApplicationSettingsApplicationGroupFilter, ..} ) <$> f wsFederationApplicationSettingsApplicationGroupFilter
{-# INLINE wsFederationApplicationSettingsApplicationGroupFilterL #-}

-- | 'wsFederationApplicationSettingsApplicationGroupName' Lens
wsFederationApplicationSettingsApplicationGroupNameL :: Lens_' WsFederationApplicationSettingsApplication (Maybe Text)
wsFederationApplicationSettingsApplicationGroupNameL f WsFederationApplicationSettingsApplication{..} = (\wsFederationApplicationSettingsApplicationGroupName -> WsFederationApplicationSettingsApplication { wsFederationApplicationSettingsApplicationGroupName, ..} ) <$> f wsFederationApplicationSettingsApplicationGroupName
{-# INLINE wsFederationApplicationSettingsApplicationGroupNameL #-}

-- | 'wsFederationApplicationSettingsApplicationGroupValueFormat' Lens
wsFederationApplicationSettingsApplicationGroupValueFormatL :: Lens_' WsFederationApplicationSettingsApplication (Maybe Text)
wsFederationApplicationSettingsApplicationGroupValueFormatL f WsFederationApplicationSettingsApplication{..} = (\wsFederationApplicationSettingsApplicationGroupValueFormat -> WsFederationApplicationSettingsApplication { wsFederationApplicationSettingsApplicationGroupValueFormat, ..} ) <$> f wsFederationApplicationSettingsApplicationGroupValueFormat
{-# INLINE wsFederationApplicationSettingsApplicationGroupValueFormatL #-}

-- | 'wsFederationApplicationSettingsApplicationNameIdFormat' Lens
wsFederationApplicationSettingsApplicationNameIdFormatL :: Lens_' WsFederationApplicationSettingsApplication (Maybe Text)
wsFederationApplicationSettingsApplicationNameIdFormatL f WsFederationApplicationSettingsApplication{..} = (\wsFederationApplicationSettingsApplicationNameIdFormat -> WsFederationApplicationSettingsApplication { wsFederationApplicationSettingsApplicationNameIdFormat, ..} ) <$> f wsFederationApplicationSettingsApplicationNameIdFormat
{-# INLINE wsFederationApplicationSettingsApplicationNameIdFormatL #-}

-- | 'wsFederationApplicationSettingsApplicationRealm' Lens
wsFederationApplicationSettingsApplicationRealmL :: Lens_' WsFederationApplicationSettingsApplication (Maybe Text)
wsFederationApplicationSettingsApplicationRealmL f WsFederationApplicationSettingsApplication{..} = (\wsFederationApplicationSettingsApplicationRealm -> WsFederationApplicationSettingsApplication { wsFederationApplicationSettingsApplicationRealm, ..} ) <$> f wsFederationApplicationSettingsApplicationRealm
{-# INLINE wsFederationApplicationSettingsApplicationRealmL #-}

-- | 'wsFederationApplicationSettingsApplicationSiteUrl' Lens
wsFederationApplicationSettingsApplicationSiteUrlL :: Lens_' WsFederationApplicationSettingsApplication (Maybe Text)
wsFederationApplicationSettingsApplicationSiteUrlL f WsFederationApplicationSettingsApplication{..} = (\wsFederationApplicationSettingsApplicationSiteUrl -> WsFederationApplicationSettingsApplication { wsFederationApplicationSettingsApplicationSiteUrl, ..} ) <$> f wsFederationApplicationSettingsApplicationSiteUrl
{-# INLINE wsFederationApplicationSettingsApplicationSiteUrlL #-}

-- | 'wsFederationApplicationSettingsApplicationUsernameAttribute' Lens
wsFederationApplicationSettingsApplicationUsernameAttributeL :: Lens_' WsFederationApplicationSettingsApplication (Maybe Text)
wsFederationApplicationSettingsApplicationUsernameAttributeL f WsFederationApplicationSettingsApplication{..} = (\wsFederationApplicationSettingsApplicationUsernameAttribute -> WsFederationApplicationSettingsApplication { wsFederationApplicationSettingsApplicationUsernameAttribute, ..} ) <$> f wsFederationApplicationSettingsApplicationUsernameAttribute
{-# INLINE wsFederationApplicationSettingsApplicationUsernameAttributeL #-}

-- | 'wsFederationApplicationSettingsApplicationWReplyOverride' Lens
wsFederationApplicationSettingsApplicationWReplyOverrideL :: Lens_' WsFederationApplicationSettingsApplication (Maybe Bool)
wsFederationApplicationSettingsApplicationWReplyOverrideL f WsFederationApplicationSettingsApplication{..} = (\wsFederationApplicationSettingsApplicationWReplyOverride -> WsFederationApplicationSettingsApplication { wsFederationApplicationSettingsApplicationWReplyOverride, ..} ) <$> f wsFederationApplicationSettingsApplicationWReplyOverride
{-# INLINE wsFederationApplicationSettingsApplicationWReplyOverrideL #-}

-- | 'wsFederationApplicationSettingsApplicationWReplyUrl' Lens
wsFederationApplicationSettingsApplicationWReplyUrlL :: Lens_' WsFederationApplicationSettingsApplication (Maybe Text)
wsFederationApplicationSettingsApplicationWReplyUrlL f WsFederationApplicationSettingsApplication{..} = (\wsFederationApplicationSettingsApplicationWReplyUrl -> WsFederationApplicationSettingsApplication { wsFederationApplicationSettingsApplicationWReplyUrl, ..} ) <$> f wsFederationApplicationSettingsApplicationWReplyUrl
{-# INLINE wsFederationApplicationSettingsApplicationWReplyUrlL #-}


