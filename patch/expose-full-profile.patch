diff --git a/gen/lib/Okta/Model.hs b/gen/lib/Okta/Model.hs
index eed4fd4..ecd9381 100644
--- a/gen/lib/Okta/Model.hs
+++ b/gen/lib/Okta/Model.hs
@@ -12960,9 +12960,15 @@ mkU2fUserFactorProfile =
   { u2fUserFactorProfileCredentialId = Nothing
   }
 
+-- | A quick hack to expose custom profile attributes by default
+type User = UserP A.Object
+
+-- | Access to typed original auto-generated UserProfile
+type User' = UserP UserProfile
+
 -- ** User
 -- | User
-data User = User
+data UserP p = User
   { userEmbedded :: !(Maybe (Map.Map String A.Value)) -- ^ /ReadOnly/ "_embedded"
   , userLinks :: !(Maybe (Map.Map String A.Value)) -- ^ /ReadOnly/ "_links"
   , userActivated :: !(Maybe DateTime) -- ^ /ReadOnly/ "activated"
@@ -12973,7 +12979,7 @@ data User = User
   , userLastLogin :: !(Maybe DateTime) -- ^ /ReadOnly/ "lastLogin"
   , userLastUpdated :: !(Maybe DateTime) -- ^ /ReadOnly/ "lastUpdated"
   , userPasswordChanged :: !(Maybe DateTime) -- ^ /ReadOnly/ "passwordChanged"
-  , userProfile :: !(Maybe UserProfile) -- ^ "profile"
+  , userProfile :: !(Maybe p) -- ^ "profile"
   , userStatus :: !(Maybe UserStatus) -- ^ "status"
   , userStatusChanged :: !(Maybe DateTime) -- ^ /ReadOnly/ "statusChanged"
   , userTransitioningToStatus :: !(Maybe UserStatus) -- ^ "transitioningToStatus"
@@ -12981,7 +12987,7 @@ data User = User
   } deriving (P.Show, P.Eq, P.Typeable)
 
 -- | FromJSON User
-instance A.FromJSON User where
+instance A.FromJSON p => A.FromJSON (UserP p) where
   parseJSON = A.withObject "User" $ \o ->
     User
       <$> (o .:? "_embedded")
@@ -13001,7 +13007,7 @@ instance A.FromJSON User where
       <*> (o .:? "type")
 
 -- | ToJSON User
-instance A.ToJSON User where
+instance A.ToJSON p => A.ToJSON (UserP p) where
   toJSON User {..} =
    _omitNulls
       [ "_embedded" .= userEmbedded
diff --git a/gen/lib/Okta/ModelLens.hs b/gen/lib/Okta/ModelLens.hs
index 284946b..c05858c 100644
--- a/gen/lib/Okta/ModelLens.hs
+++ b/gen/lib/Okta/ModelLens.hs
@@ -7639,7 +7639,7 @@ userGroupIdsL f User{..} = (\userGroupIds -> User { userGroupIds, ..} ) <$> f us
 {-# INLINE userGroupIdsL #-}
 
 -- | 'userProfile' Lens
-userProfileL :: Lens_' User (Maybe UserProfile)
+userProfileL :: Lens_' (UserP p) (Maybe p)
 userProfileL f User{..} = (\userProfile -> User { userProfile, ..} ) <$> f userProfile
 {-# INLINE userProfileL #-}
 
